/*! For license information please see main.js.LICENSE.txt */
var silex;silex=(()=>{var e={1807:e=>{var t=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=t},1296:(e,t,n)=>{var i=/^\s+|\s+$/g,o=/^[-+]0x[0-9a-f]+$/i,r=/^0b[01]+$/i,s=/^0o[0-7]+$/i,a=parseInt,l="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,c="object"==typeof self&&self&&self.Object===Object&&self,u=l||c||Function("return this")(),d=Object.prototype.toString,h=Math.max,p=Math.min,f=function(){return u.Date.now()};function m(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function g(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==d.call(e)}(e))return NaN;if(m(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=m(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(i,"");var n=r.test(e);return n||s.test(e)?a(e.slice(2),n?2:8):o.test(e)?NaN:+e}e.exports=function(e,t,n){var i,o,r,s,a,l,c=0,u=!1,d=!1,b=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function y(t){var n=i,r=o;return i=o=void 0,c=t,s=e.apply(r,n)}function v(e){return c=e,a=setTimeout(S,t),u?y(e):s}function E(e){var n=e-l;return void 0===l||n>=t||n<0||d&&e-c>=r}function S(){var e=f();if(E(e))return w(e);a=setTimeout(S,function(e){var n=t-(e-l);return d?p(n,r-(e-c)):n}(e))}function w(e){return a=void 0,b&&i?y(e):(i=o=void 0,s)}function x(){var e=f(),n=E(e);if(i=arguments,o=this,l=e,n){if(void 0===a)return v(l);if(d)return a=setTimeout(S,t),y(l)}return void 0===a&&(a=setTimeout(S,t)),s}return t=g(t)||0,m(n)&&(u=!!n.leading,r=(d="maxWait"in n)?h(g(n.maxWait)||0,t):r,b="trailing"in n?!!n.trailing:b),x.cancel=function(){void 0!==a&&clearTimeout(a),c=0,i=l=o=a=void 0},x.flush=function(){return void 0===a?s:w(f())},x}},773:(e,t,n)=>{var i,o="__lodash_hash_undefined__",r=/^\[object .+?Constructor\]$/,s="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,a="object"==typeof self&&self&&self.Object===Object&&self,l=s||a||Function("return this")(),c=Array.prototype,u=Function.prototype,d=Object.prototype,h=l["__core-js_shared__"],p=(i=/[^.]+$/.exec(h&&h.keys&&h.keys.IE_PROTO||""))?"Symbol(src)_1."+i:"",f=u.toString,m=d.hasOwnProperty,g=d.toString,b=RegExp("^"+f.call(m).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),y=c.splice,v=k(l,"Map"),E=k(Object,"create");function S(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function w(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function x(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var i=e[t];this.set(i[0],i[1])}}function C(e,t){for(var n,i,o=e.length;o--;)if((n=e[o][0])===(i=t)||n!=n&&i!=i)return o;return-1}function T(e,t){var n,i,o=e.__data__;return("string"==(i=typeof(n=t))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function k(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){if(!A(e)||p&&p in e)return!1;var t=function(e){var t=A(e)?g.call(e):"";return"[object Function]"==t||"[object GeneratorFunction]"==t}(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e)?b:r;return t.test(function(e){if(null!=e){try{return f.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}(n)?n:void 0}function I(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var i=arguments,o=t?t.apply(this,i):i[0],r=n.cache;if(r.has(o))return r.get(o);var s=e.apply(this,i);return n.cache=r.set(o,s),s};return n.cache=new(I.Cache||x),n}function A(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}S.prototype.clear=function(){this.__data__=E?E(null):{}},S.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},S.prototype.get=function(e){var t=this.__data__;if(E){var n=t[e];return n===o?void 0:n}return m.call(t,e)?t[e]:void 0},S.prototype.has=function(e){var t=this.__data__;return E?void 0!==t[e]:m.call(t,e)},S.prototype.set=function(e,t){return this.__data__[e]=E&&void 0===t?o:t,this},w.prototype.clear=function(){this.__data__=[]},w.prototype.delete=function(e){var t=this.__data__,n=C(t,e);return!(n<0||(n==t.length-1?t.pop():y.call(t,n,1),0))},w.prototype.get=function(e){var t=this.__data__,n=C(t,e);return n<0?void 0:t[n][1]},w.prototype.has=function(e){return C(this.__data__,e)>-1},w.prototype.set=function(e,t){var n=this.__data__,i=C(n,e);return i<0?n.push([e,t]):n[i][1]=t,this},x.prototype.clear=function(){this.__data__={hash:new S,map:new(v||w),string:new S}},x.prototype.delete=function(e){return T(this,e).delete(e)},x.prototype.get=function(e){return T(this,e).get(e)},x.prototype.has=function(e){return T(this,e).has(e)},x.prototype.set=function(e,t){return T(this,e).set(e,t),this},I.Cache=x,e.exports=I},3096:(e,t,n)=>{var i="Expected a function",o=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,a=/^0o[0-7]+$/i,l=parseInt,c="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,u="object"==typeof self&&self&&self.Object===Object&&self,d=c||u||Function("return this")(),h=Object.prototype.toString,p=Math.max,f=Math.min,m=function(){return d.Date.now()};function g(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function b(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==h.call(e)}(e))return NaN;if(g(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=g(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var n=s.test(e);return n||a.test(e)?l(e.slice(2),n?2:8):r.test(e)?NaN:+e}e.exports=function(e,t,n){var o=!0,r=!0;if("function"!=typeof e)throw new TypeError(i);return g(n)&&(o="leading"in n?!!n.leading:o,r="trailing"in n?!!n.trailing:r),function(e,t,n){var o,r,s,a,l,c,u=0,d=!1,h=!1,y=!0;if("function"!=typeof e)throw new TypeError(i);function v(t){var n=o,i=r;return o=r=void 0,u=t,a=e.apply(i,n)}function E(e){return u=e,l=setTimeout(w,t),d?v(e):a}function S(e){var n=e-c;return void 0===c||n>=t||n<0||h&&e-u>=s}function w(){var e=m();if(S(e))return x(e);l=setTimeout(w,function(e){var n=t-(e-c);return h?f(n,s-(e-u)):n}(e))}function x(e){return l=void 0,y&&o?v(e):(o=r=void 0,a)}function C(){var e=m(),n=S(e);if(o=arguments,r=this,c=e,n){if(void 0===l)return E(c);if(h)return l=setTimeout(w,t),v(c)}return void 0===l&&(l=setTimeout(w,t)),a}return t=b(t)||0,g(n)&&(d=!!n.leading,s=(h="maxWait"in n)?p(b(n.maxWait)||0,t):s,y="trailing"in n?!!n.trailing:y),C.cancel=function(){void 0!==l&&clearTimeout(l),u=0,o=c=r=l=void 0},C.flush=function(){return void 0===l?a:x(m())},C}(e,t,{leading:o,maxWait:t,trailing:r})}},1528:function(e,t){var n,i,o;!function(r,s){"use strict";"object"==typeof e.exports?e.exports=s():(i=[],void 0===(o="function"==typeof(n=s)?n.apply(t,i):n)||(e.exports=o))}(0,(function(){"use strict";var e=Object.prototype.toString;function t(e,t){return null!=e&&Object.prototype.hasOwnProperty.call(e,t)}function n(e){if(!e)return!0;if(o(e)&&0===e.length)return!0;if("string"!=typeof e){for(var n in e)if(t(e,n))return!1;return!0}return!1}function i(t){return e.call(t)}var o=Array.isArray||function(t){return"[object Array]"===e.call(t)};function r(e){var t=parseInt(e);return t.toString()===e?t:e}function s(e){var s,a=function(e){return Object.keys(a).reduce((function(t,n){return"create"===n||"function"==typeof a[n]&&(t[n]=a[n].bind(a,e)),t}),{})};function l(e,t){if(s(e,t))return e[t]}function c(t,n,i,o){if("number"==typeof n&&(n=[n]),!n||0===n.length)return t;if("string"==typeof n)return c(t,n.split(".").map(r),i,o);var s=n[0],a=l(t,s);if(e.includeInheritedProps&&("__proto__"===s||"constructor"===s&&"function"==typeof a))throw new Error("For security reasons, object's magic properties cannot be set");return 1===n.length?(void 0!==a&&o||(t[s]=i),a):(void 0===a&&("number"==typeof n[1]?t[s]=[]:t[s]={}),c(t[s],n.slice(1),i,o))}return s=(e=e||{}).includeInheritedProps?function(){return!0}:function(e,n){return"number"==typeof n&&Array.isArray(e)||t(e,n)},a.has=function(n,i){if("number"==typeof i?i=[i]:"string"==typeof i&&(i=i.split(".")),!i||0===i.length)return!!n;for(var s=0;s<i.length;s++){var a=r(i[s]);if(!("number"==typeof a&&o(n)&&a<n.length||(e.includeInheritedProps?a in Object(n):t(n,a))))return!1;n=n[a]}return!0},a.ensureExists=function(e,t,n){return c(e,t,n,!0)},a.set=function(e,t,n,i){return c(e,t,n,i)},a.insert=function(e,t,n,i){var r=a.get(e,t);i=~~i,o(r)||(r=[],a.set(e,t,r)),r.splice(i,0,n)},a.empty=function(e,t){var r,l;if(!n(t)&&null!=e&&(r=a.get(e,t))){if("string"==typeof r)return a.set(e,t,"");if(function(e){return"boolean"==typeof e||"[object Boolean]"===i(e)}(r))return a.set(e,t,!1);if("number"==typeof r)return a.set(e,t,0);if(o(r))r.length=0;else{if(!function(e){return"object"==typeof e&&"[object Object]"===i(e)}(r))return a.set(e,t,null);for(l in r)s(r,l)&&delete r[l]}}},a.push=function(e,t){var n=a.get(e,t);o(n)||(n=[],a.set(e,t,n)),n.push.apply(n,Array.prototype.slice.call(arguments,2))},a.coalesce=function(e,t,n){for(var i,o=0,r=t.length;o<r;o++)if(void 0!==(i=a.get(e,t[o])))return i;return n},a.get=function(e,t,n){if("number"==typeof t&&(t=[t]),!t||0===t.length)return e;if(null==e)return n;if("string"==typeof t)return a.get(e,t.split("."),n);var i=r(t[0]),o=l(e,i);return void 0===o?n:1===t.length?o:a.get(e[i],t.slice(1),n)},a.del=function(e,t){if("number"==typeof t&&(t=[t]),null==e)return e;if(n(t))return e;if("string"==typeof t)return a.del(e,t.split("."));var i=r(t[0]);return s(e,i)?1!==t.length?a.del(e[i],t.slice(1)):(o(e)?e.splice(i,1):delete e[i],e):e},a}var a=s();return a.create=s,a.withInheritedProps=s({includeInheritedProps:!0}),a}))},2236:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ActionCreators=t.ActionTypes=void 0;var n={UNDO:"@@redux-undo/UNDO",REDO:"@@redux-undo/REDO",JUMP_TO_FUTURE:"@@redux-undo/JUMP_TO_FUTURE",JUMP_TO_PAST:"@@redux-undo/JUMP_TO_PAST",JUMP:"@@redux-undo/JUMP",CLEAR_HISTORY:"@@redux-undo/CLEAR_HISTORY"};t.ActionTypes=n;var i={undo:function(){return{type:n.UNDO}},redo:function(){return{type:n.REDO}},jumpToFuture:function(e){return{type:n.JUMP_TO_FUTURE,index:e}},jumpToPast:function(e){return{type:n.JUMP_TO_PAST,index:e}},jump:function(e){return{type:n.JUMP,index:e}},clearHistory:function(){return{type:n.CLEAR_HISTORY}}};t.ActionCreators=i},8823:(e,t)=>{"use strict";function n(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var i,o;Object.defineProperty(t,"__esModule",{value:!0}),t.set=function(e){i=e},t.start=function(e,t){o={header:[],prev:[],action:[],next:[],msgs:[]},i&&(console.group?(o.header=["%credux-undo","font-style: italic","action",e.type],o.action=l("action",s,e),o.prev=l("prev history",r,t)):(o.header=["redux-undo action",e.type],o.action=["action",e],o.prev=["prev history",t]))},t.end=function(e){var t,r,s,c,u,d,h,p,f,m,g,b,y,v,E,S;i&&(console.group?o.next=l("next history",a,e):o.next=["next history",e],b=(g=o).header,y=g.prev,v=g.next,E=g.action,S=g.msgs,console.group?((t=console).groupCollapsed.apply(t,n(b)),(r=console).log.apply(r,n(y)),(s=console).log.apply(s,n(E)),(c=console).log.apply(c,n(v)),(u=console).log.apply(u,n(S)),console.groupEnd()):((d=console).log.apply(d,n(b)),(h=console).log.apply(h,n(y)),(p=console).log.apply(p,n(E)),(f=console).log.apply(f,n(v)),(m=console).log.apply(m,n(S))))},t.log=function(){if(i){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];o.msgs=o.msgs.concat([].concat(t,["\n"]))}};var r="#9E9E9E",s="#03A9F4",a="#4CAF50";function l(e,t,n){return["%c".concat(e),"color: ".concat(t,"; font-weight: bold"),n]}},1619:(e,t)=>{"use strict";function n(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Array.isArray(e)?e:"string"==typeof e?[e]:t}Object.defineProperty(t,"__esModule",{value:!0}),t.parseActions=n,t.isHistory=function(e){return void 0!==e.present&&void 0!==e.future&&void 0!==e.past&&Array.isArray(e.future)&&Array.isArray(e.past)},t.includeAction=function(e){var t=n(e);return function(e){return t.indexOf(e.type)>=0}},t.excludeAction=function(e){var t=n(e);return function(e){return t.indexOf(e.type)<0}},t.combineFilters=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return function(n,i,o){return e(n,i,o)&&t(n,i,o)}}),(function(){return!0}))},t.groupByActionTypes=function(e){var t=n(e);return function(e){return t.indexOf(e.type)>=0?e.type:null}},t.newHistory=function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return{past:e,present:t,future:n,group:i,_latestUnfiltered:t,index:e.length,limit:e.length+n.length+1}}},1090:(e,t,n)=>{"use strict";Object.defineProperty(t,"zF",{enumerable:!0,get:function(){return o.ActionCreators}}),Object.defineProperty(t,"an",{enumerable:!0,get:function(){return r.includeAction}}),Object.defineProperty(t,"ZP",{enumerable:!0,get:function(){return s.default}});var i,o=n(2236),r=n(1619),s=(i=n(2479))&&i.__esModule?i:{default:i}},2479:(e,t,n)=>{"use strict";function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o.set(t.debug);var n,i=c({limit:void 0,filter:function(){return!0},groupBy:function(){return null},undoType:r.ActionTypes.UNDO,redoType:r.ActionTypes.REDO,jumpToPastType:r.ActionTypes.JUMP_TO_PAST,jumpToFutureType:r.ActionTypes.JUMP_TO_FUTURE,jumpType:r.ActionTypes.JUMP,neverSkipReducer:!1,ignoreInitialState:!1,syncFilter:!1},t,{initTypes:(0,s.parseActions)(t.initTypes,["@@redux-undo/INIT"]),clearHistoryType:(0,s.parseActions)(t.clearHistoryType,[r.ActionTypes.CLEAR_HISTORY])}),a=i.neverSkipReducer?function(t,n){for(var i=arguments.length,o=new Array(i>2?i-2:0),r=2;r<i;r++)o[r-2]=arguments[r];return c({},t,{present:e.apply(void 0,[t.present,n].concat(o))})}:function(e){return e};return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o.start(r,t);for(var l,c=t,u=arguments.length,d=new Array(u>2?u-2:0),y=2;y<u;y++)d[y-2]=arguments[y];if(!n){if(o.log("history is uninitialized"),void 0===t){var v={type:"@@redux-undo/CREATE_HISTORY"},E=e.apply(void 0,[t,v].concat(d));return c=h(E,i.ignoreInitialState),o.log("do not set initialState on probe actions"),o.end(c),c}(0,s.isHistory)(t)?(c=n=i.ignoreInitialState?t:(0,s.newHistory)(t.past,t.present,t.future),o.log("initialHistory initialized: initialState is a history",n)):(c=n=h(t,i.ignoreInitialState),o.log("initialHistory initialized: initialState is not a history",n))}switch(r.type){case void 0:return c;case i.undoType:return l=g(c,-1),o.log("perform undo"),o.end(l),a.apply(void 0,[l,r].concat(d));case i.redoType:return l=g(c,1),o.log("perform redo"),o.end(l),a.apply(void 0,[l,r].concat(d));case i.jumpToPastType:return l=m(c,r.index),o.log("perform jumpToPast to ".concat(r.index)),o.end(l),a.apply(void 0,[l,r].concat(d));case i.jumpToFutureType:return l=f(c,r.index),o.log("perform jumpToFuture to ".concat(r.index)),o.end(l),a.apply(void 0,[l,r].concat(d));case i.jumpType:return l=g(c,r.index),o.log("perform jump to ".concat(r.index)),o.end(l),a.apply(void 0,[l,r].concat(d));case b(r.type,i.clearHistoryType):return l=h(c.present,i.ignoreInitialState),o.log("perform clearHistory"),o.end(l),a.apply(void 0,[l,r].concat(d));default:if(l=e.apply(void 0,[c.present,r].concat(d)),i.initTypes.some((function(e){return e===r.type})))return o.log("reset history due to init action"),o.end(n),n;if(c._latestUnfiltered===l)return c;var S="function"==typeof i.filter&&!i.filter(r,l,c);if(S){var w=(0,s.newHistory)(c.past,l,c.future,c.group);return i.syncFilter||(w._latestUnfiltered=c._latestUnfiltered),o.log("filter ignored action, not storing it in past"),o.end(w),w}var x=i.groupBy(r,l,c);if(null!=x&&x===c.group){var C=(0,s.newHistory)(c.past,l,c.future,c.group);return o.log("groupBy grouped the action with the previous action"),o.end(C),C}return c=p(c,l,i.limit,x),o.log("inserted new state into history"),o.end(c),c}}};var o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==i(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var s=o?Object.getOwnPropertyDescriptor(e,r):null;s&&(s.get||s.set)?Object.defineProperty(n,r,s):n[r]=e[r]}return n.default=e,t&&t.set(e,n),n}(n(8823)),r=n(2236),s=n(1619);function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){u(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function h(e,t){var n=(0,s.newHistory)([],e,[]);return t&&(n._latestUnfiltered=null),n}function p(e,t,n,i){var r=e.past.length+1;o.log("inserting",t),o.log("new free: ",n-r);var a=e.past,l=e._latestUnfiltered,c=n&&n<=r,u=a.slice(c?1:0),h=null!=l?[].concat(d(u),[l]):u;return(0,s.newHistory)(h,t,[],i)}function f(e,t){if(t<0||t>=e.future.length)return e;var n=e.past,i=e.future,o=e._latestUnfiltered,r=[].concat(d(n),[o],d(i.slice(0,t))),a=i[t],l=i.slice(t+1);return(0,s.newHistory)(r,a,l)}function m(e,t){if(t<0||t>=e.past.length)return e;var n=e.past,i=e.future,o=e._latestUnfiltered,r=n.slice(0,t),a=[].concat(d(n.slice(t+1)),[o],d(i)),l=n[t];return(0,s.newHistory)(r,l,a)}function g(e,t){return t>0?f(e,t-1):t<0?m(e,e.past.length+t):e}function b(e,t){return t.indexOf(e)>-1?e:!e}},5055:(e,t,n)=>{var i=n(6282),o=n(180),r=TypeError;e.exports=function(e){if(i(e))return e;throw r(o(e)+" is not a function")}},2004:(e,t,n)=>{var i=n(6282),o=String,r=TypeError;e.exports=function(e){if("object"==typeof e||i(e))return e;throw r("Can't set "+o(e)+" as a prototype")}},9256:(e,t,n)=>{var i=n(8149),o=n(1525),r=n(9168).f,s=i("unscopables"),a=Array.prototype;null==a[s]&&r(a,s,{configurable:!0,value:o(null)}),e.exports=function(e){a[s][e]=!0}},3615:(e,t,n)=>{"use strict";var i=n(7321).charAt;e.exports=function(e,t,n){return t+(n?i(e,t).length:1)}},3046:(e,t,n)=>{var i=n(1786),o=TypeError;e.exports=function(e,t){if(i(t,e))return e;throw o("Incorrect invocation")}},1474:(e,t,n)=>{var i=n(5896),o=String,r=TypeError;e.exports=function(e){if(i(e))return e;throw r(o(e)+" is not an object")}},8774:(e,t,n)=>{var i=n(6183);e.exports=i((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}}))},1269:(e,t,n)=>{"use strict";var i=n(528).forEach,o=n(1923)("forEach");e.exports=o?[].forEach:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}},5675:(e,t,n)=>{var i=n(3206),o=n(9623),r=n(1829),s=function(e){return function(t,n,s){var a,l=i(t),c=r(l),u=o(s,c);if(e&&n!=n){for(;c>u;)if((a=l[u++])!=a)return!0}else for(;c>u;u++)if((e||u in l)&&l[u]===n)return e||u||0;return!e&&-1}};e.exports={includes:s(!0),indexOf:s(!1)}},528:(e,t,n)=>{var i=n(1098),o=n(1768),r=n(7530),s=n(9473),a=n(1829),l=n(2768),c=o([].push),u=function(e){var t=1==e,n=2==e,o=3==e,u=4==e,d=6==e,h=7==e,p=5==e||d;return function(f,m,g,b){for(var y,v,E=s(f),S=r(E),w=i(m,g),x=a(S),C=0,T=b||l,k=t?T(f,x):n||h?T(f,0):void 0;x>C;C++)if((p||C in S)&&(v=w(y=S[C],C,E),e))if(t)k[C]=v;else if(v)switch(e){case 3:return!0;case 5:return y;case 6:return C;case 2:c(k,y)}else switch(e){case 4:return!1;case 7:c(k,y)}return d?-1:o||u?u:k}};e.exports={forEach:u(0),map:u(1),filter:u(2),some:u(3),every:u(4),find:u(5),findIndex:u(6),filterReject:u(7)}},4820:(e,t,n)=>{var i=n(6183),o=n(8149),r=n(4324),s=o("species");e.exports=function(e){return r>=51||!i((function(){var t=[];return(t.constructor={})[s]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},1923:(e,t,n)=>{"use strict";var i=n(6183);e.exports=function(e,t){var n=[][e];return!!n&&i((function(){n.call(null,t||function(){return 1},1)}))}},6589:(e,t,n)=>{var i=n(5055),o=n(9473),r=n(7530),s=n(1829),a=TypeError,l=function(e){return function(t,n,l,c){i(n);var u=o(t),d=r(u),h=s(u),p=e?h-1:0,f=e?-1:1;if(l<2)for(;;){if(p in d){c=d[p],p+=f;break}if(p+=f,e?p<0:h<=p)throw a("Reduce of empty array with no initial value")}for(;e?p>=0:h>p;p+=f)p in d&&(c=n(c,d[p],p,u));return c}};e.exports={left:l(!1),right:l(!0)}},4072:(e,t,n)=>{var i=n(9623),o=n(1829),r=n(2759),s=Array,a=Math.max;e.exports=function(e,t,n){for(var l=o(e),c=i(t,l),u=i(void 0===n?l:n,l),d=s(a(u-c,0)),h=0;c<u;c++,h++)r(d,h,e[c]);return d.length=h,d}},9882:(e,t,n)=>{var i=n(7931),o=n(2240),r=n(5896),s=n(8149)("species"),a=Array;e.exports=function(e){var t;return i(e)&&(t=e.constructor,(o(t)&&(t===a||i(t.prototype))||r(t)&&null===(t=t[s]))&&(t=void 0)),void 0===t?a:t}},2768:(e,t,n)=>{var i=n(9882);e.exports=function(e,t){return new(i(e))(0===t?0:t)}},1751:(e,t,n)=>{var i=n(8149)("iterator"),o=!1;try{var r=0,s={next:function(){return{done:!!r++}},return:function(){o=!0}};s[i]=function(){return this},Array.from(s,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var r={};r[i]=function(){return{next:function(){return{done:n=!0}}}},e(r)}catch(e){}return n}},1510:(e,t,n)=>{var i=n(1768),o=i({}.toString),r=i("".slice);e.exports=function(e){return r(o(e),8,-1)}},9225:(e,t,n)=>{var i=n(4823),o=n(6282),r=n(1510),s=n(8149)("toStringTag"),a=Object,l="Arguments"==r(function(){return arguments}());e.exports=i?r:function(e){var t,n,i;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=a(e),s))?n:l?r(t):"Object"==(i=r(t))&&o(t.callee)?"Arguments":i}},7790:(e,t,n)=>{"use strict";var i=n(1768),o=n(6367),r=n(6582).getWeakData,s=n(1474),a=n(5896),l=n(3046),c=n(1518),u=n(528),d=n(8281),h=n(1030),p=h.set,f=h.getterFor,m=u.find,g=u.findIndex,b=i([].splice),y=0,v=function(e){return e.frozen||(e.frozen=new E)},E=function(){this.entries=[]},S=function(e,t){return m(e.entries,(function(e){return e[0]===t}))};E.prototype={get:function(e){var t=S(this,e);if(t)return t[1]},has:function(e){return!!S(this,e)},set:function(e,t){var n=S(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=g(this.entries,(function(t){return t[0]===e}));return~t&&b(this.entries,t,1),!!~t}},e.exports={getConstructor:function(e,t,n,i){var u=e((function(e,o){l(e,h),p(e,{type:t,id:y++,frozen:void 0}),null!=o&&c(o,e[i],{that:e,AS_ENTRIES:n})})),h=u.prototype,m=f(t),g=function(e,t,n){var i=m(e),o=r(s(t),!0);return!0===o?v(i).set(t,n):o[i.id]=n,e};return o(h,{delete:function(e){var t=m(this);if(!a(e))return!1;var n=r(e);return!0===n?v(t).delete(e):n&&d(n,t.id)&&delete n[t.id]},has:function(e){var t=m(this);if(!a(e))return!1;var n=r(e);return!0===n?v(t).has(e):n&&d(n,t.id)}}),o(h,n?{get:function(e){var t=m(this);if(a(e)){var n=r(e);return!0===n?v(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return g(this,e,t)}}:{add:function(e){return g(this,e,!0)}}),u}}},6645:(e,t,n)=>{"use strict";var i=n(4761),o=n(8454),r=n(1768),s=n(1949),a=n(2054),l=n(6582),c=n(1518),u=n(3046),d=n(6282),h=n(5896),p=n(6183),f=n(1751),m=n(820),g=n(7770);e.exports=function(e,t,n){var b=-1!==e.indexOf("Map"),y=-1!==e.indexOf("Weak"),v=b?"set":"add",E=o[e],S=E&&E.prototype,w=E,x={},C=function(e){var t=r(S[e]);a(S,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(y&&!h(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return y&&!h(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(y&&!h(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this})};if(s(e,!d(E)||!(y||S.forEach&&!p((function(){(new E).entries().next()})))))w=n.getConstructor(t,e,b,v),l.enable();else if(s(e,!0)){var T=new w,k=T[v](y?{}:-0,1)!=T,I=p((function(){T.has(1)})),A=f((function(e){new E(e)})),_=!y&&p((function(){for(var e=new E,t=5;t--;)e[v](t,t);return!e.has(-0)}));A||((w=t((function(e,t){u(e,S);var n=g(new E,e,w);return null!=t&&c(t,n[v],{that:n,AS_ENTRIES:b}),n}))).prototype=S,S.constructor=w),(I||_)&&(C("delete"),C("has"),b&&C("get")),(_||k)&&C(v),y&&S.clear&&delete S.clear}return x[e]=w,i({global:!0,constructor:!0,forced:w!=E},x),m(w,e),y||n.setStrong(w,e,b),w}},882:(e,t,n)=>{var i=n(8281),o=n(1441),r=n(5663),s=n(9168);e.exports=function(e,t,n){for(var a=o(t),l=s.f,c=r.f,u=0;u<a.length;u++){var d=a[u];i(e,d)||n&&i(n,d)||l(e,d,c(t,d))}}},7401:(e,t,n)=>{var i=n(6183);e.exports=!i((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},2538:(e,t,n)=>{"use strict";var i=n(6524).IteratorPrototype,o=n(1525),r=n(9273),s=n(820),a=n(6126),l=function(){return this};e.exports=function(e,t,n,c){var u=t+" Iterator";return e.prototype=o(i,{next:r(+!c,n)}),s(e,u,!1,!0),a[u]=l,e}},1501:(e,t,n)=>{var i=n(723),o=n(9168),r=n(9273);e.exports=i?function(e,t,n){return o.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},9273:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},2759:(e,t,n)=>{"use strict";var i=n(2988),o=n(9168),r=n(9273);e.exports=function(e,t,n){var s=i(t);s in e?o.f(e,s,r(0,n)):e[s]=n}},2054:(e,t,n)=>{var i=n(6282),o=n(9168),r=n(5903),s=n(7194);e.exports=function(e,t,n,a){a||(a={});var l=a.enumerable,c=void 0!==a.name?a.name:t;return i(n)&&r(n,c,a),a.global?l?e[t]=n:s(t,n):(a.unsafe?e[t]&&(l=!0):delete e[t],l?e[t]=n:o.f(e,t,{value:n,enumerable:!1,configurable:!a.nonConfigurable,writable:!a.nonWritable})),e}},6367:(e,t,n)=>{var i=n(2054);e.exports=function(e,t,n){for(var o in t)i(e,o,t[o],n);return e}},7194:(e,t,n)=>{var i=n(8454),o=Object.defineProperty;e.exports=function(e,t){try{o(i,e,{value:t,configurable:!0,writable:!0})}catch(n){i[e]=t}return t}},7583:(e,t,n)=>{"use strict";var i=n(4761),o=n(4552),r=n(8977),s=n(4530),a=n(6282),l=n(2538),c=n(4204),u=n(5900),d=n(820),h=n(1501),p=n(2054),f=n(8149),m=n(6126),g=n(6524),b=s.PROPER,y=s.CONFIGURABLE,v=g.IteratorPrototype,E=g.BUGGY_SAFARI_ITERATORS,S=f("iterator"),w="keys",x="values",C="entries",T=function(){return this};e.exports=function(e,t,n,s,f,g,k){l(n,t,s);var I,A,_,O=function(e){if(e===f&&M)return M;if(!E&&e in D)return D[e];switch(e){case w:case x:case C:return function(){return new n(this,e)}}return function(){return new n(this)}},L=t+" Iterator",N=!1,D=e.prototype,P=D[S]||D["@@iterator"]||f&&D[f],M=!E&&P||O(f),R="Array"==t&&D.entries||P;if(R&&(I=c(R.call(new e)))!==Object.prototype&&I.next&&(r||c(I)===v||(u?u(I,v):a(I[S])||p(I,S,T)),d(I,L,!0,!0),r&&(m[L]=T)),b&&f==x&&P&&P.name!==x&&(!r&&y?h(D,"name",x):(N=!0,M=function(){return o(P,this)})),f)if(A={values:O(x),keys:g?M:O(w),entries:O(C)},k)for(_ in A)(E||N||!(_ in D))&&p(D,_,A[_]);else i({target:t,proto:!0,forced:E||N},A);return r&&!k||D[S]===M||p(D,S,M,{name:f}),m[t]=M,A}},723:(e,t,n)=>{var i=n(6183);e.exports=!i((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},7282:(e,t,n)=>{var i=n(8454),o=n(5896),r=i.document,s=o(r)&&o(r.createElement);e.exports=function(e){return s?r.createElement(e):{}}},6181:e=>{e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},2387:(e,t,n)=>{var i=n(7282)("span").classList,o=i&&i.constructor&&i.constructor.prototype;e.exports=o===Object.prototype?void 0:o},7594:(e,t,n)=>{var i=n(1510),o=n(8454);e.exports="process"==i(o.process)},2543:(e,t,n)=>{var i=n(4991);e.exports=i("navigator","userAgent")||""},4324:(e,t,n)=>{var i,o,r=n(8454),s=n(2543),a=r.process,l=r.Deno,c=a&&a.versions||l&&l.version,u=c&&c.v8;u&&(o=(i=u.split("."))[0]>0&&i[0]<4?1:+(i[0]+i[1])),!o&&s&&(!(i=s.match(/Edge\/(\d+)/))||i[1]>=74)&&(i=s.match(/Chrome\/(\d+)/))&&(o=+i[1]),e.exports=o},8409:e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},4761:(e,t,n)=>{var i=n(8454),o=n(5663).f,r=n(1501),s=n(2054),a=n(7194),l=n(882),c=n(1949);e.exports=function(e,t){var n,u,d,h,p,f=e.target,m=e.global,g=e.stat;if(n=m?i:g?i[f]||a(f,{}):(i[f]||{}).prototype)for(u in t){if(h=t[u],d=e.dontCallGetSet?(p=o(n,u))&&p.value:n[u],!c(m?u:f+(g?".":"#")+u,e.forced)&&void 0!==d){if(typeof h==typeof d)continue;l(h,d)}(e.sham||d&&d.sham)&&r(h,"sham",!0),s(n,u,h,e)}}},6183:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},9696:(e,t,n)=>{"use strict";n(9989);var i=n(1768),o=n(2054),r=n(5510),s=n(6183),a=n(8149),l=n(1501),c=a("species"),u=RegExp.prototype;e.exports=function(e,t,n,d){var h=a(e),p=!s((function(){var t={};return t[h]=function(){return 7},7!=""[e](t)})),f=p&&!s((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[c]=function(){return n},n.flags="",n[h]=/./[h]),n.exec=function(){return t=!0,null},n[h](""),!t}));if(!p||!f||n){var m=i(/./[h]),g=t(h,""[e],(function(e,t,n,o,s){var a=i(e),l=t.exec;return l===r||l===u.exec?p&&!s?{done:!0,value:m(t,n,o)}:{done:!0,value:a(n,t,o)}:{done:!1}}));o(String.prototype,e,g[0]),o(u,h,g[1])}d&&l(u[h],"sham",!0)}},3116:(e,t,n)=>{var i=n(6183);e.exports=!i((function(){return Object.isExtensible(Object.preventExtensions({}))}))},6218:(e,t,n)=>{var i=n(160),o=Function.prototype,r=o.apply,s=o.call;e.exports="object"==typeof Reflect&&Reflect.apply||(i?s.bind(r):function(){return s.apply(r,arguments)})},1098:(e,t,n)=>{var i=n(1768),o=n(5055),r=n(160),s=i(i.bind);e.exports=function(e,t){return o(e),void 0===t?e:r?s(e,t):function(){return e.apply(t,arguments)}}},160:(e,t,n)=>{var i=n(6183);e.exports=!i((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},4552:(e,t,n)=>{var i=n(160),o=Function.prototype.call;e.exports=i?o.bind(o):function(){return o.apply(o,arguments)}},4530:(e,t,n)=>{var i=n(723),o=n(8281),r=Function.prototype,s=i&&Object.getOwnPropertyDescriptor,a=o(r,"name"),l=a&&"something"===function(){}.name,c=a&&(!i||i&&s(r,"name").configurable);e.exports={EXISTS:a,PROPER:l,CONFIGURABLE:c}},1768:(e,t,n)=>{var i=n(160),o=Function.prototype,r=o.bind,s=o.call,a=i&&r.bind(s,s);e.exports=i?function(e){return e&&a(e)}:function(e){return e&&function(){return s.apply(e,arguments)}}},4991:(e,t,n)=>{var i=n(8454),o=n(6282),r=function(e){return o(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?r(i[e]):i[e]&&i[e][t]}},650:(e,t,n)=>{var i=n(9225),o=n(9827),r=n(6126),s=n(8149)("iterator");e.exports=function(e){if(null!=e)return o(e,s)||o(e,"@@iterator")||r[i(e)]}},7755:(e,t,n)=>{var i=n(4552),o=n(5055),r=n(1474),s=n(180),a=n(650),l=TypeError;e.exports=function(e,t){var n=arguments.length<2?a(e):t;if(o(n))return r(i(n,e));throw l(s(e)+" is not iterable")}},9827:(e,t,n)=>{var i=n(5055);e.exports=function(e,t){var n=e[t];return null==n?void 0:i(n)}},4742:(e,t,n)=>{var i=n(1768),o=n(9473),r=Math.floor,s=i("".charAt),a=i("".replace),l=i("".slice),c=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,t,n,i,d,h){var p=n+e.length,f=i.length,m=u;return void 0!==d&&(d=o(d),m=c),a(h,m,(function(o,a){var c;switch(s(a,0)){case"$":return"$";case"&":return e;case"`":return l(t,0,n);case"'":return l(t,p);case"<":c=d[l(a,1,-1)];break;default:var u=+a;if(0===u)return o;if(u>f){var h=r(u/10);return 0===h?o:h<=f?void 0===i[h-1]?s(a,1):i[h-1]+s(a,1):o}c=i[u-1]}return void 0===c?"":c}))}},8454:(e,t,n)=>{var i=function(e){return e&&e.Math==Math&&e};e.exports=i("object"==typeof globalThis&&globalThis)||i("object"==typeof window&&window)||i("object"==typeof self&&self)||i("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},8281:(e,t,n)=>{var i=n(1768),o=n(9473),r=i({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return r(o(e),t)}},4377:e=>{e.exports={}},7461:(e,t,n)=>{var i=n(4991);e.exports=i("document","documentElement")},4985:(e,t,n)=>{var i=n(723),o=n(6183),r=n(7282);e.exports=!i&&!o((function(){return 7!=Object.defineProperty(r("div"),"a",{get:function(){return 7}}).a}))},7530:(e,t,n)=>{var i=n(1768),o=n(6183),r=n(1510),s=Object,a=i("".split);e.exports=o((function(){return!s("z").propertyIsEnumerable(0)}))?function(e){return"String"==r(e)?a(e,""):s(e)}:s},7770:(e,t,n)=>{var i=n(6282),o=n(5896),r=n(5900);e.exports=function(e,t,n){var s,a;return r&&i(s=t.constructor)&&s!==n&&o(a=s.prototype)&&a!==n.prototype&&r(e,a),e}},6901:(e,t,n)=>{var i=n(1768),o=n(6282),r=n(2047),s=i(Function.toString);o(r.inspectSource)||(r.inspectSource=function(e){return s(e)}),e.exports=r.inspectSource},6582:(e,t,n)=>{var i=n(4761),o=n(1768),r=n(4377),s=n(5896),a=n(8281),l=n(9168).f,c=n(6785),u=n(6675),d=n(6662),h=n(9059),p=n(3116),f=!1,m=h("meta"),g=0,b=function(e){l(e,m,{value:{objectID:"O"+g++,weakData:{}}})},y=e.exports={enable:function(){y.enable=function(){},f=!0;var e=c.f,t=o([].splice),n={};n[m]=1,e(n).length&&(c.f=function(n){for(var i=e(n),o=0,r=i.length;o<r;o++)if(i[o]===m){t(i,o,1);break}return i},i({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:u.f}))},fastKey:function(e,t){if(!s(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,m)){if(!d(e))return"F";if(!t)return"E";b(e)}return e[m].objectID},getWeakData:function(e,t){if(!a(e,m)){if(!d(e))return!0;if(!t)return!1;b(e)}return e[m].weakData},onFreeze:function(e){return p&&f&&d(e)&&!a(e,m)&&b(e),e}};r[m]=!0},1030:(e,t,n)=>{var i,o,r,s=n(4404),a=n(8454),l=n(1768),c=n(5896),u=n(1501),d=n(8281),h=n(2047),p=n(8873),f=n(4377),m="Object already initialized",g=a.TypeError,b=a.WeakMap;if(s||h.state){var y=h.state||(h.state=new b),v=l(y.get),E=l(y.has),S=l(y.set);i=function(e,t){if(E(y,e))throw new g(m);return t.facade=e,S(y,e,t),t},o=function(e){return v(y,e)||{}},r=function(e){return E(y,e)}}else{var w=p("state");f[w]=!0,i=function(e,t){if(d(e,w))throw new g(m);return t.facade=e,u(e,w,t),t},o=function(e){return d(e,w)?e[w]:{}},r=function(e){return d(e,w)}}e.exports={set:i,get:o,has:r,enforce:function(e){return r(e)?o(e):i(e,{})},getterFor:function(e){return function(t){var n;if(!c(t)||(n=o(t)).type!==e)throw g("Incompatible receiver, "+e+" required");return n}}}},5859:(e,t,n)=>{var i=n(8149),o=n(6126),r=i("iterator"),s=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||s[r]===e)}},7931:(e,t,n)=>{var i=n(1510);e.exports=Array.isArray||function(e){return"Array"==i(e)}},6282:e=>{e.exports=function(e){return"function"==typeof e}},2240:(e,t,n)=>{var i=n(1768),o=n(6183),r=n(6282),s=n(9225),a=n(4991),l=n(6901),c=function(){},u=[],d=a("Reflect","construct"),h=/^\s*(?:class|function)\b/,p=i(h.exec),f=!h.exec(c),m=function(e){if(!r(e))return!1;try{return d(c,u,e),!0}catch(e){return!1}},g=function(e){if(!r(e))return!1;switch(s(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return f||!!p(h,l(e))}catch(e){return!0}};g.sham=!0,e.exports=!d||o((function(){var e;return m(m.call)||!m(Object)||!m((function(){e=!0}))||e}))?g:m},1949:(e,t,n)=>{var i=n(6183),o=n(6282),r=/#|\.prototype\./,s=function(e,t){var n=l[a(e)];return n==u||n!=c&&(o(t)?i(t):!!t)},a=s.normalize=function(e){return String(e).replace(r,".").toLowerCase()},l=s.data={},c=s.NATIVE="N",u=s.POLYFILL="P";e.exports=s},5896:(e,t,n)=>{var i=n(6282);e.exports=function(e){return"object"==typeof e?null!==e:i(e)}},8977:e=>{e.exports=!1},1527:(e,t,n)=>{var i=n(4991),o=n(6282),r=n(1786),s=n(4746),a=Object;e.exports=s?function(e){return"symbol"==typeof e}:function(e){var t=i("Symbol");return o(t)&&r(t.prototype,a(e))}},1518:(e,t,n)=>{var i=n(1098),o=n(4552),r=n(1474),s=n(180),a=n(5859),l=n(1829),c=n(1786),u=n(7755),d=n(650),h=n(9193),p=TypeError,f=function(e,t){this.stopped=e,this.result=t},m=f.prototype;e.exports=function(e,t,n){var g,b,y,v,E,S,w,x=n&&n.that,C=!(!n||!n.AS_ENTRIES),T=!(!n||!n.IS_ITERATOR),k=!(!n||!n.INTERRUPTED),I=i(t,x),A=function(e){return g&&h(g,"normal",e),new f(!0,e)},_=function(e){return C?(r(e),k?I(e[0],e[1],A):I(e[0],e[1])):k?I(e,A):I(e)};if(T)g=e;else{if(!(b=d(e)))throw p(s(e)+" is not iterable");if(a(b)){for(y=0,v=l(e);v>y;y++)if((E=_(e[y]))&&c(m,E))return E;return new f(!1)}g=u(e,b)}for(S=g.next;!(w=o(S,g)).done;){try{E=_(w.value)}catch(e){h(g,"throw",e)}if("object"==typeof E&&E&&c(m,E))return E}return new f(!1)}},9193:(e,t,n)=>{var i=n(4552),o=n(1474),r=n(9827);e.exports=function(e,t,n){var s,a;o(e);try{if(!(s=r(e,"return"))){if("throw"===t)throw n;return n}s=i(s,e)}catch(e){a=!0,s=e}if("throw"===t)throw n;if(a)throw s;return o(s),n}},6524:(e,t,n)=>{"use strict";var i,o,r,s=n(6183),a=n(6282),l=n(1525),c=n(4204),u=n(2054),d=n(8149),h=n(8977),p=d("iterator"),f=!1;[].keys&&("next"in(r=[].keys())?(o=c(c(r)))!==Object.prototype&&(i=o):f=!0),null==i||s((function(){var e={};return i[p].call(e)!==e}))?i={}:h&&(i=l(i)),a(i[p])||u(i,p,(function(){return this})),e.exports={IteratorPrototype:i,BUGGY_SAFARI_ITERATORS:f}},6126:e=>{e.exports={}},1829:(e,t,n)=>{var i=n(3917);e.exports=function(e){return i(e.length)}},5903:(e,t,n)=>{var i=n(6183),o=n(6282),r=n(8281),s=n(723),a=n(4530).CONFIGURABLE,l=n(6901),c=n(1030),u=c.enforce,d=c.get,h=Object.defineProperty,p=s&&!i((function(){return 8!==h((function(){}),"length",{value:8}).length})),f=String(String).split("String"),m=e.exports=function(e,t,n){"Symbol("===String(t).slice(0,7)&&(t="["+String(t).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!r(e,"name")||a&&e.name!==t)&&h(e,"name",{value:t,configurable:!0}),p&&n&&r(n,"arity")&&e.length!==n.arity&&h(e,"length",{value:n.arity});try{n&&r(n,"constructor")&&n.constructor?s&&h(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var i=u(e);return r(i,"source")||(i.source=f.join("string"==typeof t?t:"")),e};Function.prototype.toString=m((function(){return o(this)&&d(this).source||l(this)}),"toString")},1021:e=>{var t=Math.ceil,n=Math.floor;e.exports=Math.trunc||function(e){var i=+e;return(i>0?n:t)(i)}},323:(e,t,n)=>{var i=n(4324),o=n(6183);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&i&&i<41}))},4404:(e,t,n)=>{var i=n(8454),o=n(6282),r=n(6901),s=i.WeakMap;e.exports=o(s)&&/native code/.test(r(s))},8513:(e,t,n)=>{var i=n(8454),o=n(6183),r=n(1768),s=n(7655),a=n(9749).trim,l=n(8342),c=i.parseInt,u=i.Symbol,d=u&&u.iterator,h=/^[+-]?0x/i,p=r(h.exec),f=8!==c(l+"08")||22!==c(l+"0x16")||d&&!o((function(){c(Object(d))}));e.exports=f?function(e,t){var n=a(s(e));return c(n,t>>>0||(p(h,n)?16:10))}:c},4727:(e,t,n)=>{"use strict";var i=n(723),o=n(1768),r=n(4552),s=n(6183),a=n(1340),l=n(8074),c=n(4043),u=n(9473),d=n(7530),h=Object.assign,p=Object.defineProperty,f=o([].concat);e.exports=!h||s((function(){if(i&&1!==h({b:1},h(p({},"a",{enumerable:!0,get:function(){p(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),o="abcdefghijklmnopqrst";return e[n]=7,o.split("").forEach((function(e){t[e]=e})),7!=h({},e)[n]||a(h({},t)).join("")!=o}))?function(e,t){for(var n=u(e),o=arguments.length,s=1,h=l.f,p=c.f;o>s;)for(var m,g=d(arguments[s++]),b=h?f(a(g),h(g)):a(g),y=b.length,v=0;y>v;)m=b[v++],i&&!r(p,g,m)||(n[m]=g[m]);return n}:h},1525:(e,t,n)=>{var i,o=n(1474),r=n(262),s=n(8409),a=n(4377),l=n(7461),c=n(7282),u=n(8873)("IE_PROTO"),d=function(){},h=function(e){return"<script>"+e+"<\/script>"},p=function(e){e.write(h("")),e.close();var t=e.parentWindow.Object;return e=null,t},f=function(){try{i=new ActiveXObject("htmlfile")}catch(e){}var e,t;f="undefined"!=typeof document?document.domain&&i?p(i):((t=c("iframe")).style.display="none",l.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(h("document.F=Object")),e.close(),e.F):p(i);for(var n=s.length;n--;)delete f.prototype[s[n]];return f()};a[u]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(d.prototype=o(e),n=new d,d.prototype=null,n[u]=e):n=f(),void 0===t?n:r.f(n,t)}},262:(e,t,n)=>{var i=n(723),o=n(8654),r=n(9168),s=n(1474),a=n(3206),l=n(1340);t.f=i&&!o?Object.defineProperties:function(e,t){s(e);for(var n,i=a(t),o=l(t),c=o.length,u=0;c>u;)r.f(e,n=o[u++],i[n]);return e}},9168:(e,t,n)=>{var i=n(723),o=n(4985),r=n(8654),s=n(1474),a=n(2988),l=TypeError,c=Object.defineProperty,u=Object.getOwnPropertyDescriptor;t.f=i?r?function(e,t,n){if(s(e),t=a(t),s(n),"function"==typeof e&&"prototype"===t&&"value"in n&&"writable"in n&&!n.writable){var i=u(e,t);i&&i.writable&&(e[t]=n.value,n={configurable:"configurable"in n?n.configurable:i.configurable,enumerable:"enumerable"in n?n.enumerable:i.enumerable,writable:!1})}return c(e,t,n)}:c:function(e,t,n){if(s(e),t=a(t),s(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw l("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},5663:(e,t,n)=>{var i=n(723),o=n(4552),r=n(4043),s=n(9273),a=n(3206),l=n(2988),c=n(8281),u=n(4985),d=Object.getOwnPropertyDescriptor;t.f=i?d:function(e,t){if(e=a(e),t=l(t),u)try{return d(e,t)}catch(e){}if(c(e,t))return s(!o(r.f,e,t),e[t])}},6675:(e,t,n)=>{var i=n(1510),o=n(3206),r=n(6785).f,s=n(4072),a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"Window"==i(e)?function(e){try{return r(e)}catch(e){return s(a)}}(e):r(o(e))}},6785:(e,t,n)=>{var i=n(5113),o=n(8409).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return i(e,o)}},8074:(e,t)=>{t.f=Object.getOwnPropertySymbols},4204:(e,t,n)=>{var i=n(8281),o=n(6282),r=n(9473),s=n(8873),a=n(7401),l=s("IE_PROTO"),c=Object,u=c.prototype;e.exports=a?c.getPrototypeOf:function(e){var t=r(e);if(i(t,l))return t[l];var n=t.constructor;return o(n)&&t instanceof n?n.prototype:t instanceof c?u:null}},6662:(e,t,n)=>{var i=n(6183),o=n(5896),r=n(1510),s=n(8774),a=Object.isExtensible,l=i((function(){a(1)}));e.exports=l||s?function(e){return!!o(e)&&(!s||"ArrayBuffer"!=r(e))&&(!a||a(e))}:a},1786:(e,t,n)=>{var i=n(1768);e.exports=i({}.isPrototypeOf)},5113:(e,t,n)=>{var i=n(1768),o=n(8281),r=n(3206),s=n(5675).indexOf,a=n(4377),l=i([].push);e.exports=function(e,t){var n,i=r(e),c=0,u=[];for(n in i)!o(a,n)&&o(i,n)&&l(u,n);for(;t.length>c;)o(i,n=t[c++])&&(~s(u,n)||l(u,n));return u}},1340:(e,t,n)=>{var i=n(5113),o=n(8409);e.exports=Object.keys||function(e){return i(e,o)}},4043:(e,t)=>{"use strict";var n={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!n.call({1:2},1);t.f=o?function(e){var t=i(this,e);return!!t&&t.enumerable}:n},5900:(e,t,n)=>{var i=n(1768),o=n(1474),r=n(2004);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=i(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(e){}return function(n,i){return o(n),r(i),t?e(n,i):n.__proto__=i,n}}():void 0)},4117:(e,t,n)=>{"use strict";var i=n(4823),o=n(9225);e.exports=i?{}.toString:function(){return"[object "+o(this)+"]"}},6891:(e,t,n)=>{var i=n(4552),o=n(6282),r=n(5896),s=TypeError;e.exports=function(e,t){var n,a;if("string"===t&&o(n=e.toString)&&!r(a=i(n,e)))return a;if(o(n=e.valueOf)&&!r(a=i(n,e)))return a;if("string"!==t&&o(n=e.toString)&&!r(a=i(n,e)))return a;throw s("Can't convert object to primitive value")}},1441:(e,t,n)=>{var i=n(4991),o=n(1768),r=n(6785),s=n(8074),a=n(1474),l=o([].concat);e.exports=i("Reflect","ownKeys")||function(e){var t=r.f(a(e)),n=s.f;return n?l(t,n(e)):t}},8734:(e,t,n)=>{var i=n(4552),o=n(1474),r=n(6282),s=n(1510),a=n(5510),l=TypeError;e.exports=function(e,t){var n=e.exec;if(r(n)){var c=i(n,e,t);return null!==c&&o(c),c}if("RegExp"===s(e))return i(a,e,t);throw l("RegExp#exec called on incompatible receiver")}},5510:(e,t,n)=>{"use strict";var i,o,r=n(4552),s=n(1768),a=n(7655),l=n(8383),c=n(6558),u=n(1748),d=n(1525),h=n(1030).get,p=n(7672),f=n(9729),m=u("native-string-replace",String.prototype.replace),g=RegExp.prototype.exec,b=g,y=s("".charAt),v=s("".indexOf),E=s("".replace),S=s("".slice),w=(o=/b*/g,r(g,i=/a/,"a"),r(g,o,"a"),0!==i.lastIndex||0!==o.lastIndex),x=c.BROKEN_CARET,C=void 0!==/()??/.exec("")[1];(w||C||x||p||f)&&(b=function(e){var t,n,i,o,s,c,u,p=this,f=h(p),T=a(e),k=f.raw;if(k)return k.lastIndex=p.lastIndex,t=r(b,k,T),p.lastIndex=k.lastIndex,t;var I=f.groups,A=x&&p.sticky,_=r(l,p),O=p.source,L=0,N=T;if(A&&(_=E(_,"y",""),-1===v(_,"g")&&(_+="g"),N=S(T,p.lastIndex),p.lastIndex>0&&(!p.multiline||p.multiline&&"\n"!==y(T,p.lastIndex-1))&&(O="(?: "+O+")",N=" "+N,L++),n=new RegExp("^(?:"+O+")",_)),C&&(n=new RegExp("^"+O+"$(?!\\s)",_)),w&&(i=p.lastIndex),o=r(g,A?n:p,N),A?o?(o.input=S(o.input,L),o[0]=S(o[0],L),o.index=p.lastIndex,p.lastIndex+=o[0].length):p.lastIndex=0:w&&o&&(p.lastIndex=p.global?o.index+o[0].length:i),C&&o&&o.length>1&&r(m,o[0],n,(function(){for(s=1;s<arguments.length-2;s++)void 0===arguments[s]&&(o[s]=void 0)})),o&&I)for(o.groups=c=d(null),s=0;s<I.length;s++)c[(u=I[s])[0]]=o[u[1]];return o}),e.exports=b},8383:(e,t,n)=>{"use strict";var i=n(1474);e.exports=function(){var e=i(this),t="";return e.hasIndices&&(t+="d"),e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.unicodeSets&&(t+="v"),e.sticky&&(t+="y"),t}},6558:(e,t,n)=>{var i=n(6183),o=n(8454).RegExp,r=i((function(){var e=o("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),s=r||i((function(){return!o("a","y").sticky})),a=r||i((function(){var e=o("^r","gy");return e.lastIndex=2,null!=e.exec("str")}));e.exports={BROKEN_CARET:a,MISSED_STICKY:s,UNSUPPORTED_Y:r}},7672:(e,t,n)=>{var i=n(6183),o=n(8454).RegExp;e.exports=i((function(){var e=o(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)}))},9729:(e,t,n)=>{var i=n(6183),o=n(8454).RegExp;e.exports=i((function(){var e=o("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},7431:e=>{var t=TypeError;e.exports=function(e){if(null==e)throw t("Can't call method on "+e);return e}},820:(e,t,n)=>{var i=n(9168).f,o=n(8281),r=n(8149)("toStringTag");e.exports=function(e,t,n){e&&!n&&(e=e.prototype),e&&!o(e,r)&&i(e,r,{configurable:!0,value:t})}},8873:(e,t,n)=>{var i=n(1748),o=n(9059),r=i("keys");e.exports=function(e){return r[e]||(r[e]=o(e))}},2047:(e,t,n)=>{var i=n(8454),o=n(7194),r="__core-js_shared__",s=i[r]||o(r,{});e.exports=s},1748:(e,t,n)=>{var i=n(8977),o=n(2047);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.23.2",mode:i?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.23.2/LICENSE",source:"https://github.com/zloirock/core-js"})},7321:(e,t,n)=>{var i=n(1768),o=n(8037),r=n(7655),s=n(7431),a=i("".charAt),l=i("".charCodeAt),c=i("".slice),u=function(e){return function(t,n){var i,u,d=r(s(t)),h=o(n),p=d.length;return h<0||h>=p?e?"":void 0:(i=l(d,h))<55296||i>56319||h+1===p||(u=l(d,h+1))<56320||u>57343?e?a(d,h):i:e?c(d,h,h+2):u-56320+(i-55296<<10)+65536}};e.exports={codeAt:u(!1),charAt:u(!0)}},9749:(e,t,n)=>{var i=n(1768),o=n(7431),r=n(7655),s=n(8342),a=i("".replace),l="["+s+"]",c=RegExp("^"+l+l+"*"),u=RegExp(l+l+"*$"),d=function(e){return function(t){var n=r(o(t));return 1&e&&(n=a(n,c,"")),2&e&&(n=a(n,u,"")),n}};e.exports={start:d(1),end:d(2),trim:d(3)}},9623:(e,t,n)=>{var i=n(8037),o=Math.max,r=Math.min;e.exports=function(e,t){var n=i(e);return n<0?o(n+t,0):r(n,t)}},3206:(e,t,n)=>{var i=n(7530),o=n(7431);e.exports=function(e){return i(o(e))}},8037:(e,t,n)=>{var i=n(1021);e.exports=function(e){var t=+e;return t!=t||0===t?0:i(t)}},3917:(e,t,n)=>{var i=n(8037),o=Math.min;e.exports=function(e){return e>0?o(i(e),9007199254740991):0}},9473:(e,t,n)=>{var i=n(7431),o=Object;e.exports=function(e){return o(i(e))}},3948:(e,t,n)=>{var i=n(4552),o=n(5896),r=n(1527),s=n(9827),a=n(6891),l=n(8149),c=TypeError,u=l("toPrimitive");e.exports=function(e,t){if(!o(e)||r(e))return e;var n,l=s(e,u);if(l){if(void 0===t&&(t="default"),n=i(l,e,t),!o(n)||r(n))return n;throw c("Can't convert object to primitive value")}return void 0===t&&(t="number"),a(e,t)}},2988:(e,t,n)=>{var i=n(3948),o=n(1527);e.exports=function(e){var t=i(e,"string");return o(t)?t:t+""}},4823:(e,t,n)=>{var i={};i[n(8149)("toStringTag")]="z",e.exports="[object z]"===String(i)},7655:(e,t,n)=>{var i=n(9225),o=String;e.exports=function(e){if("Symbol"===i(e))throw TypeError("Cannot convert a Symbol value to a string");return o(e)}},180:e=>{var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},9059:(e,t,n)=>{var i=n(1768),o=0,r=Math.random(),s=i(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+s(++o+r,36)}},4746:(e,t,n)=>{var i=n(323);e.exports=i&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},8654:(e,t,n)=>{var i=n(723),o=n(6183);e.exports=i&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},8149:(e,t,n)=>{var i=n(8454),o=n(1748),r=n(8281),s=n(9059),a=n(323),l=n(4746),c=o("wks"),u=i.Symbol,d=u&&u.for,h=l?u:u&&u.withoutSetter||s;e.exports=function(e){if(!r(c,e)||!a&&"string"!=typeof c[e]){var t="Symbol."+e;a&&r(u,e)?c[e]=u[e]:c[e]=l&&d?d(t):h(t)}return c[e]}},8342:e=>{e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},8165:(e,t,n)=>{"use strict";var i=n(4761),o=n(528).filter;i({target:"Array",proto:!0,forced:!n(4820)("filter")},{filter:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},7543:(e,t,n)=>{"use strict";var i=n(3206),o=n(9256),r=n(6126),s=n(1030),a=n(9168).f,l=n(7583),c=n(8977),u=n(723),d="Array Iterator",h=s.set,p=s.getterFor(d);e.exports=l(Array,"Array",(function(e,t){h(this,{type:d,target:i(e),index:0,kind:t})}),(function(){var e=p(this),t=e.target,n=e.kind,i=e.index++;return!t||i>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:i,done:!1}:"values"==n?{value:t[i],done:!1}:{value:[i,t[i]],done:!1}}),"values");var f=r.Arguments=r.Array;if(o("keys"),o("values"),o("entries"),!c&&u&&"values"!==f.name)try{a(f,"name",{value:"values"})}catch(e){}},7985:(e,t,n)=>{"use strict";var i=n(4761),o=n(6589).left,r=n(1923),s=n(4324),a=n(7594);i({target:"Array",proto:!0,forced:!r("reduce")||!a&&s>79&&s<83},{reduce:function(e){var t=arguments.length;return o(this,e,t,t>1?arguments[1]:void 0)}})},6618:(e,t,n)=>{var i=n(723),o=n(4530).EXISTS,r=n(1768),s=n(9168).f,a=Function.prototype,l=r(a.toString),c=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,u=r(c.exec);i&&!o&&s(a,"name",{configurable:!0,get:function(){try{return u(c,l(this))[1]}catch(e){return""}}})},7692:(e,t,n)=>{var i=n(4761),o=n(4727);i({target:"Object",stat:!0,arity:2,forced:Object.assign!==o},{assign:o})},2352:(e,t,n)=>{var i=n(4823),o=n(2054),r=n(4117);i||o(Object.prototype,"toString",r,{unsafe:!0})},4249:(e,t,n)=>{var i=n(4761),o=n(8513);i({global:!0,forced:parseInt!=o},{parseInt:o})},9989:(e,t,n)=>{"use strict";var i=n(4761),o=n(5510);i({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},3344:(e,t,n)=>{"use strict";var i=n(7321).charAt,o=n(7655),r=n(1030),s=n(7583),a="String Iterator",l=r.set,c=r.getterFor(a);s(String,"String",(function(e){l(this,{type:a,string:o(e),index:0})}),(function(){var e,t=c(this),n=t.string,o=t.index;return o>=n.length?{value:void 0,done:!0}:(e=i(n,o),t.index+=e.length,{value:e,done:!1})}))},8307:(e,t,n)=>{"use strict";var i=n(4552),o=n(9696),r=n(1474),s=n(3917),a=n(7655),l=n(7431),c=n(9827),u=n(3615),d=n(8734);o("match",(function(e,t,n){return[function(t){var n=l(this),o=null==t?void 0:c(t,e);return o?i(o,t,n):new RegExp(t)[e](a(n))},function(e){var i=r(this),o=a(e),l=n(t,i,o);if(l.done)return l.value;if(!i.global)return d(i,o);var c=i.unicode;i.lastIndex=0;for(var h,p=[],f=0;null!==(h=d(i,o));){var m=a(h[0]);p[f]=m,""===m&&(i.lastIndex=u(o,s(i.lastIndex),c)),f++}return 0===f?null:p}]}))},4390:(e,t,n)=>{"use strict";var i=n(6218),o=n(4552),r=n(1768),s=n(9696),a=n(6183),l=n(1474),c=n(6282),u=n(8037),d=n(3917),h=n(7655),p=n(7431),f=n(3615),m=n(9827),g=n(4742),b=n(8734),y=n(8149)("replace"),v=Math.max,E=Math.min,S=r([].concat),w=r([].push),x=r("".indexOf),C=r("".slice),T="$0"==="a".replace(/./,"$0"),k=!!/./[y]&&""===/./[y]("a","$0");s("replace",(function(e,t,n){var r=k?"$":"$0";return[function(e,n){var i=p(this),r=null==e?void 0:m(e,y);return r?o(r,e,i,n):o(t,h(i),e,n)},function(e,o){var s=l(this),a=h(e);if("string"==typeof o&&-1===x(o,r)&&-1===x(o,"$<")){var p=n(t,s,a,o);if(p.done)return p.value}var m=c(o);m||(o=h(o));var y=s.global;if(y){var T=s.unicode;s.lastIndex=0}for(var k=[];;){var I=b(s,a);if(null===I)break;if(w(k,I),!y)break;""===h(I[0])&&(s.lastIndex=f(a,d(s.lastIndex),T))}for(var A,_="",O=0,L=0;L<k.length;L++){for(var N=h((I=k[L])[0]),D=v(E(u(I.index),a.length),0),P=[],M=1;M<I.length;M++)w(P,void 0===(A=I[M])?A:String(A));var R=I.groups;if(m){var B=S([N],P,D,a);void 0!==R&&w(B,R);var W=h(i(o,void 0,B))}else W=g(N,a,D,P,R,o);D>=O&&(_+=C(a,O,D)+W,O=D+N.length)}return _+C(a,O)}]}),!!a((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!T||k)},9703:(e,t,n)=>{"use strict";var i,o=n(8454),r=n(1768),s=n(6367),a=n(6582),l=n(6645),c=n(7790),u=n(5896),d=n(6662),h=n(1030).enforce,p=n(4404),f=!o.ActiveXObject&&"ActiveXObject"in o,m=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},g=l("WeakMap",m,c);if(p&&f){i=c.getConstructor(m,"WeakMap",!0),a.enable();var b=g.prototype,y=r(b.delete),v=r(b.has),E=r(b.get),S=r(b.set);s(b,{delete:function(e){if(u(e)&&!d(e)){var t=h(this);return t.frozen||(t.frozen=new i),y(this,e)||t.frozen.delete(e)}return y(this,e)},has:function(e){if(u(e)&&!d(e)){var t=h(this);return t.frozen||(t.frozen=new i),v(this,e)||t.frozen.has(e)}return v(this,e)},get:function(e){if(u(e)&&!d(e)){var t=h(this);return t.frozen||(t.frozen=new i),v(this,e)?E(this,e):t.frozen.get(e)}return E(this,e)},set:function(e,t){if(u(e)&&!d(e)){var n=h(this);n.frozen||(n.frozen=new i),v(this,e)?S(this,e,t):n.frozen.set(e,t)}else S(this,e,t);return this}})}},7323:(e,t,n)=>{n(9703)},3542:(e,t,n)=>{var i=n(8454),o=n(6181),r=n(2387),s=n(1269),a=n(1501),l=function(e){if(e&&e.forEach!==s)try{a(e,"forEach",s)}catch(t){e.forEach=s}};for(var c in o)o[c]&&l(i[c]&&i[c].prototype);l(r)},4079:(e,t,n)=>{var i=n(8454),o=n(6181),r=n(2387),s=n(7543),a=n(1501),l=n(8149),c=l("iterator"),u=l("toStringTag"),d=s.values,h=function(e,t){if(e){if(e[c]!==d)try{a(e,c,d)}catch(t){e[c]=d}if(e[u]||a(e,u,t),o[t])for(var n in s)if(e[n]!==s[n])try{a(e,n,s[n])}catch(t){e[n]=s[n]}}};for(var p in o)h(i[p]&&i[p].prototype,p);h(r,"DOMTokenList")},7121:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i}),e=n.hmd(e);const i=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e)},1907:function(e,t){var n,i;n=function(e,t){"use strict";t.exports=i;var n="placeholder pattern spellcheck autocomplete autocapitalize autofocus accessKey accept lang minLength maxLength required".split(" ");function i(e){function t(e,t,n,i){var o=document.createElement(e);for(var r in t&&(o.className=t),n&&(o.textContent=n),i)o.setAttribute("data-"+r,i[r]);return o}function i(e,t){return!0===t?Array.prototype.slice.call(d.querySelectorAll(e)):d.querySelector(e)}function o(){return i(".tag",!0).map((function(e){return e.textContent})).concat(d.input.value||[]).join(",")}function r(){e.value=o(),e.dispatchEvent(new Event("change"))}function s(n){if(~n.indexOf(",")&&(n=n.split(",")),Array.isArray(n))return n.forEach(s);var o=n&&n.trim();if(!o)return!1;if(!e.getAttribute("duplicates")){var r=function(){var e=i('[data-tag="'+o+'"]');if(e)return e.classList.add("dupe"),setTimeout((function(){return e.classList.remove("dupe")}),100),{v:!1}}();if("object"==typeof r)return r.v}d.insertBefore(t("span","tag",o,{tag:o}),d.input)}function a(e){var t=i(".selected");t&&t.classList.remove("selected"),e&&e.classList.add("selected")}function l(){var e=i(".tag",!0).pop(),t=d.offsetWidth;t&&(d.input.style.width=Math.max(t-(e?e.offsetLeft+e.offsetWidth:5)-5,t/4)+"px")}function c(e){"string"==typeof e||Array.isArray(e)||(e=d.input.value),!1!==s(e)&&(d.input.value="",r(),l())}function u(e){return e.target.classList.contains("tag")&&a(e.target),e.target===d.input?a():(d.input.focus(),e.preventDefault(),!1)}var d=t("div","tags-input"),h=e.nextSibling;e.parentNode[h?"insertBefore":"appendChild"](d,h),e.style.cssText="position:absolute;left:0;top:-99px;width:1px;height:1px;opacity:0.01;",e.tabIndex=-1,d.input=t("input"),d.input.setAttribute("type","text"),n.forEach((function(t){if(e[t]!==d.input[t]){d.input[t]=e[t];try{delete e[t]}catch(e){}}})),d.appendChild(d.input),e.addEventListener("focus",(function(){d.input.focus()})),d.input.addEventListener("focus",(function(){d.classList.add("focus"),a()})),d.input.addEventListener("blur",(function(){d.classList.remove("focus"),a(),c()})),d.input.addEventListener("keydown",(function(e){var t=d.input,n=e.keyCode||e.which,o=i(".tag.selected"),s=t.selectionStart===t.selectionEnd&&t.selectionStart,u=i(".tag",!0).pop();if(l(),13===n||188===n||9===n){if(!t.value&&188!==n)return;c()}else if(46===n&&o)o.nextSibling!==d.input&&a(o.nextSibling),d.removeChild(o),l(),r();else if(8===n)if(o)a(o.previousSibling),d.removeChild(o),l(),r();else{if(!u||0!==s)return;a(u)}else if(37===n)if(o)o.previousSibling&&a(o.previousSibling);else{if(0!==s)return;a(u)}else{if(39!==n)return a();if(!o)return;a(o.nextSibling)}return e.preventDefault(),!1})),d.input.addEventListener("input",(function(){e.value=o(),e.dispatchEvent(new Event("input"))})),d.input.addEventListener("paste",(function(){return setTimeout(c,0)})),d.addEventListener("mousedown",u),d.addEventListener("touchstart",u),d.setValue=function(e){i(".tag",!0).forEach((function(e){return d.removeChild(e)})),c(e)},d.getValue=o,c(e.value)}i.enhance=i.tagsInput=i},void 0===(i=n.apply(t,[t,e]))||(e.exports=i)},4125:(e,t,n)=>{"use strict";n.r(t),n.d(t,{CloudStorage:()=>Gt,INITIAL_ELEMENT_SIZE:()=>no,Notification:()=>me,SilexTasks:()=>xr,addDialog:()=>pr,addElement:()=>Ao,addLink:()=>Po,addMediaQueryIfMobileOnly:()=>Hi,addToPage:()=>Lo,browse:()=>yo,cloneElement:()=>er,cloneElements:()=>Qo,componentStyleChanged:()=>Au,config:()=>de,copySelection:()=>Zo,count:()=>Hr,createElements:()=>Pn,createPage:()=>gr,createPages:()=>$i,crudIdKey:()=>Qt,deleteElements:()=>Mn,deletePages:()=>Fi,duplicateSelection:()=>Jo,editLink:()=>bo,editPage:()=>br,editPageSettings:()=>Er,fromData:()=>tn,fromElementData:()=>Ln,fromPageData:()=>zi,getAllParents:()=>ri,getAllStyles:()=>mo,getBody:()=>ai,getBoundingBox:()=>uo,getChildren:()=>ni,getChildrenRecursive:()=>ii,getComponentClassName:()=>Li,getComponents:()=>_i,getComponentsDef:()=>Ii,getCreateAction:()=>io,getCreationDropZone:()=>ho,getCssClasses:()=>Ni,getCurrentPage:()=>sr,getDefaultStyle:()=>ro,getDisplayName:()=>fo,getDropStyle:()=>po,getElementByDomElement:()=>ti,getElementById:()=>ei,getElementRect:()=>co,getElementStyle:()=>lo,getElements:()=>Bn,getEmptyElementData:()=>oo,getFirstPagedParent:()=>di,getNewId:()=>ao,getPageById:()=>rr,getPages:()=>Yi,getParent:()=>oi,getPseudoClassData:()=>gi,getSelectedElements:()=>ci,getSelectedElementsNoSectionContent:()=>ui,getSite:()=>fi,getState:()=>On,getUi:()=>an,getVisibleDialogs:()=>_s,hasElementsToPaste:()=>nr,hasRedo:()=>vn,hasUndo:()=>yn,indexOfElement:()=>vo,init:()=>$u,initComponent:()=>Oi,initProdotype:()=>wi,initStyle:()=>Iu,initializeData:()=>Rr,initializeElements:()=>Dn,initializePages:()=>Ui,initializeSite:()=>hi,initializeUi:()=>rn,isBody:()=>si,isComponent:()=>Ai,isDialogVisible:()=>As,isDirty:()=>fn,isSameTag:()=>Pi,isVisibleInPage:()=>go,loadComponents:()=>ki,moveDown:()=>jo,moveElements:()=>wo,movePage:()=>Vi,movePageTo:()=>vr,moveToBottom:()=>qo,moveToTop:()=>zo,moveUp:()=>Ho,multipleStylesChanged:()=>To,noSectionContent:()=>li,onAddElements:()=>Qr,onAddPages:()=>ns,onChangeUi:()=>us,onCrudChange:()=>on,onDeleteElements:()=>es,onDeletePages:()=>is,onUpdateElements:()=>ts,onUpdatePages:()=>ss,once:()=>jr,openComponentEditor:()=>Ri,openDashboardToLoadAWebsite:()=>bs,openDialog:()=>mr,openFile:()=>ys,openPage:()=>hr,openRecent:()=>gs,openStyleEditor:()=>Bi,pasteClipBoard:()=>ir,pasteElements:()=>or,position:()=>Wo,preview:()=>Fr,previewResponsize:()=>Gr,publish:()=>Ss,redo:()=>bn,removeDialog:()=>fr,removeElements:()=>_o,removeElementsWithoutConfirm:()=>Oo,removeFromPage:()=>No,removeLink:()=>Mo,removePage:()=>yr,removeStyle:()=>_u,resetComponentEditor:()=>Mi,resetDirty:()=>pn,resetUndo:()=>mn,save:()=>fs,saveEditableChildren:()=>Wi,selectBody:()=>Eo,selectElements:()=>So,setAttributes:()=>ko,setClassName:()=>Io,setHideOnDesktop:()=>xo,setImageUrl:()=>Uo,setPreviewWindowLocation:()=>Vr,setStyleToDom:()=>ji,start:()=>Fu,store:()=>Tn,styleChanged:()=>Co,subscribeElements:()=>Wn,subscribePages:()=>Xi,subscribeSite:()=>mi,subscribeTo:()=>_n,subscribeToCrud:()=>An,subscribeUi:()=>ln,toData:()=>nn,toElementData:()=>Nn,toPageData:()=>qi,undo:()=>gn,updateComponents:()=>Ti,updateComponentsDependencies:()=>Di,updateElements:()=>Rn,updatePages:()=>Gi,updateSite:()=>pi,updateUi:()=>sn,visibleOnAllPages:()=>Do,withCrudReducer:()=>en,withDirtyDispatcher:()=>cn,withUndoDispatcher:()=>En}),n(2352),n(3542);var i,o=n(1807),r=n.n(o),s=(n(4249),n(7692),n(8165),n(7543),n(3344),n(7323),n(4079),n(3096)),a=n.n(s),l=n(1296),c=n.n(l),u=n(773),d=n.n(u),h=[],p="ResizeObserver loop completed with undelivered notifications.";!function(e){e.BORDER_BOX="border-box",e.CONTENT_BOX="content-box",e.DEVICE_PIXEL_CONTENT_BOX="device-pixel-content-box"}(i||(i={}));var f,m=function(e){return Object.freeze(e)},g=function(e,t){this.inlineSize=e,this.blockSize=t,m(this)},b=function(){function e(e,t,n,i){return this.x=e,this.y=t,this.width=n,this.height=i,this.top=this.y,this.left=this.x,this.bottom=this.top+this.height,this.right=this.left+this.width,m(this)}return e.prototype.toJSON=function(){var e=this;return{x:e.x,y:e.y,top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.width,height:e.height}},e.fromRect=function(t){return new e(t.x,t.y,t.width,t.height)},e}(),y=function(e){return e instanceof SVGElement&&"getBBox"in e},v=function(e){if(y(e)){var t=e.getBBox(),n=t.width,i=t.height;return!n&&!i}var o=e,r=o.offsetWidth,s=o.offsetHeight;return!(r||s||e.getClientRects().length)},E=function(e){var t,n;if(e instanceof Element)return!0;var i=null===(n=null===(t=e)||void 0===t?void 0:t.ownerDocument)||void 0===n?void 0:n.defaultView;return!!(i&&e instanceof i.Element)},S="undefined"!=typeof window?window:{},w=new WeakMap,x=/auto|scroll/,C=/^tb|vertical/,T=/msie|trident/i.test(S.navigator&&S.navigator.userAgent),k=function(e){return parseFloat(e||"0")},I=function(e,t,n){return void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=!1),new g((n?t:e)||0,(n?e:t)||0)},A=m({devicePixelContentBoxSize:I(),borderBoxSize:I(),contentBoxSize:I(),contentRect:new b(0,0,0,0)}),_=function(e,t){if(void 0===t&&(t=!1),w.has(e)&&!t)return w.get(e);if(v(e))return w.set(e,A),A;var n=getComputedStyle(e),i=y(e)&&e.ownerSVGElement&&e.getBBox(),o=!T&&"border-box"===n.boxSizing,r=C.test(n.writingMode||""),s=!i&&x.test(n.overflowY||""),a=!i&&x.test(n.overflowX||""),l=i?0:k(n.paddingTop),c=i?0:k(n.paddingRight),u=i?0:k(n.paddingBottom),d=i?0:k(n.paddingLeft),h=i?0:k(n.borderTopWidth),p=i?0:k(n.borderRightWidth),f=i?0:k(n.borderBottomWidth),g=d+c,E=l+u,S=(i?0:k(n.borderLeftWidth))+p,_=h+f,O=a?e.offsetHeight-_-e.clientHeight:0,L=s?e.offsetWidth-S-e.clientWidth:0,N=o?g+S:0,D=o?E+_:0,P=i?i.width:k(n.width)-N-L,M=i?i.height:k(n.height)-D-O,R=P+g+L+S,B=M+E+O+_,W=m({devicePixelContentBoxSize:I(Math.round(P*devicePixelRatio),Math.round(M*devicePixelRatio),r),borderBoxSize:I(R,B,r),contentBoxSize:I(P,M,r),contentRect:new b(d,l,P,M)});return w.set(e,W),W},O=function(e,t,n){var o=_(e,n),r=o.borderBoxSize,s=o.contentBoxSize,a=o.devicePixelContentBoxSize;switch(t){case i.DEVICE_PIXEL_CONTENT_BOX:return a;case i.BORDER_BOX:return r;default:return s}},L=function(e){var t=_(e);this.target=e,this.contentRect=t.contentRect,this.borderBoxSize=m([t.borderBoxSize]),this.contentBoxSize=m([t.contentBoxSize]),this.devicePixelContentBoxSize=m([t.devicePixelContentBoxSize])},N=function(e){if(v(e))return 1/0;for(var t=0,n=e.parentNode;n;)t+=1,n=n.parentNode;return t},D=function(){var e=1/0,t=[];h.forEach((function(n){if(0!==n.activeTargets.length){var i=[];n.activeTargets.forEach((function(t){var n=new L(t.target),o=N(t.target);i.push(n),t.lastReportedSize=O(t.target,t.observedBox),o<e&&(e=o)})),t.push((function(){n.callback.call(n.observer,i,n.observer)})),n.activeTargets.splice(0,n.activeTargets.length)}}));for(var n=0,i=t;n<i.length;n++)(0,i[n])();return e},P=function(e){h.forEach((function(t){t.activeTargets.splice(0,t.activeTargets.length),t.skippedTargets.splice(0,t.skippedTargets.length),t.observationTargets.forEach((function(n){n.isActive()&&(N(n.target)>e?t.activeTargets.push(n):t.skippedTargets.push(n))}))}))},M=[],R=0,B={attributes:!0,characterData:!0,childList:!0,subtree:!0},W=["resize","load","transitionend","animationend","animationstart","animationiteration","keyup","keydown","mouseup","mousedown","mouseover","mouseout","blur","focus"],H=function(e){return void 0===e&&(e=0),Date.now()+e},j=!1,z=new(function(){function e(){var e=this;this.stopped=!0,this.listener=function(){return e.schedule()}}return e.prototype.run=function(e){var t=this;if(void 0===e&&(e=250),!j){j=!0;var n,i=H(e);n=function(){var n=!1;try{n=function(){var e,t=0;for(P(t);h.some((function(e){return e.activeTargets.length>0}));)t=D(),P(t);return h.some((function(e){return e.skippedTargets.length>0}))&&("function"==typeof ErrorEvent?e=new ErrorEvent("error",{message:p}):((e=document.createEvent("Event")).initEvent("error",!1,!1),e.message=p),window.dispatchEvent(e)),t>0}()}finally{if(j=!1,e=i-H(),!R)return;n?t.run(1e3):e>0?t.run(e):t.start()}},function(e){if(!f){var t=0,n=document.createTextNode("");new MutationObserver((function(){return M.splice(0).forEach((function(e){return e()}))})).observe(n,{characterData:!0}),f=function(){n.textContent=""+(t?t--:t++)}}M.push(e),f()}((function(){requestAnimationFrame(n)}))}},e.prototype.schedule=function(){this.stop(),this.run()},e.prototype.observe=function(){var e=this,t=function(){return e.observer&&e.observer.observe(document.body,B)};document.body?t():S.addEventListener("DOMContentLoaded",t)},e.prototype.start=function(){var e=this;this.stopped&&(this.stopped=!1,this.observer=new MutationObserver(this.listener),this.observe(),W.forEach((function(t){return S.addEventListener(t,e.listener,!0)})))},e.prototype.stop=function(){var e=this;this.stopped||(this.observer&&this.observer.disconnect(),W.forEach((function(t){return S.removeEventListener(t,e.listener,!0)})),this.stopped=!0)},e}()),q=function(e){!R&&e>0&&z.start(),!(R+=e)&&z.stop()},U=function(){function e(e,t){this.target=e,this.observedBox=t||i.CONTENT_BOX,this.lastReportedSize={inlineSize:0,blockSize:0}}return e.prototype.isActive=function(){var e,t=O(this.target,this.observedBox,!0);return e=this.target,y(e)||function(e){switch(e.tagName){case"INPUT":if("image"!==e.type)break;case"VIDEO":case"AUDIO":case"EMBED":case"OBJECT":case"CANVAS":case"IFRAME":case"IMG":return!0}return!1}(e)||"inline"!==getComputedStyle(e).display||(this.lastReportedSize=t),this.lastReportedSize.inlineSize!==t.inlineSize||this.lastReportedSize.blockSize!==t.blockSize},e}(),$=function(e,t){this.activeTargets=[],this.skippedTargets=[],this.observationTargets=[],this.observer=e,this.callback=t},F=new WeakMap,G=function(e,t){for(var n=0;n<e.length;n+=1)if(e[n].target===t)return n;return-1},V=function(){function e(){}return e.connect=function(e,t){var n=new $(e,t);F.set(e,n)},e.observe=function(e,t,n){var i=F.get(e),o=0===i.observationTargets.length;G(i.observationTargets,t)<0&&(o&&h.push(i),i.observationTargets.push(new U(t,n&&n.box)),q(1),z.schedule())},e.unobserve=function(e,t){var n=F.get(e),i=G(n.observationTargets,t),o=1===n.observationTargets.length;i>=0&&(o&&h.splice(h.indexOf(n),1),n.observationTargets.splice(i,1),q(-1))},e.disconnect=function(e){var t=this,n=F.get(e);n.observationTargets.slice().forEach((function(n){return t.unobserve(e,n.target)})),n.activeTargets.splice(0,n.activeTargets.length)},e}(),Y=function(){function e(e){if(0===arguments.length)throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");if("function"!=typeof e)throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");V.connect(this,e)}return e.prototype.observe=function(e,t){if(0===arguments.length)throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");if(!E(e))throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");V.observe(this,e,t)},e.prototype.unobserve=function(e){if(0===arguments.length)throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");if(!E(e))throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");V.unobserve(this,e)},e.prototype.disconnect=function(){V.disconnect(this)},e.toString=function(){return"function ResizeObserver () { [polyfill code] }"},e}(),X=(n(7985),n(9989),n(8307),n(6618),n(4390),function(e){return Array.prototype.reduce.call(e,(function(e,t){var n=t.name.match(/data-simplebar-(.+)/);if(n){var i=n[1].replace(/\W+(.)/g,(function(e,t){return t.toUpperCase()}));switch(t.value){case"true":e[i]=!0;break;case"false":e[i]=!1;break;case void 0:e[i]=!0;break;default:e[i]=t.value}}return e}),{})});function K(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView?e.ownerDocument.defaultView:window}function Z(e){return e&&e.ownerDocument?e.ownerDocument:document}var J=null,Q=null;function ee(e){if(null===J){var t=Z(e);if(void 0===t)return J=0;var n=t.body,i=t.createElement("div");i.classList.add("simplebar-hide-scrollbar"),n.appendChild(i);var o=i.getBoundingClientRect().right;n.removeChild(i),J=o}return J}r()&&window.addEventListener("resize",(function(){Q!==window.devicePixelRatio&&(Q=window.devicePixelRatio,J=null)}));var te=function(){function e(t,n){var i=this;this.onScroll=function(){var e=K(i.el);i.scrollXTicking||(e.requestAnimationFrame(i.scrollX),i.scrollXTicking=!0),i.scrollYTicking||(e.requestAnimationFrame(i.scrollY),i.scrollYTicking=!0)},this.scrollX=function(){i.axis.x.isOverflowing&&(i.showScrollbar("x"),i.positionScrollbar("x")),i.scrollXTicking=!1},this.scrollY=function(){i.axis.y.isOverflowing&&(i.showScrollbar("y"),i.positionScrollbar("y")),i.scrollYTicking=!1},this.onMouseEnter=function(){i.showScrollbar("x"),i.showScrollbar("y")},this.onMouseMove=function(e){i.mouseX=e.clientX,i.mouseY=e.clientY,(i.axis.x.isOverflowing||i.axis.x.forceVisible)&&i.onMouseMoveForAxis("x"),(i.axis.y.isOverflowing||i.axis.y.forceVisible)&&i.onMouseMoveForAxis("y")},this.onMouseLeave=function(){i.onMouseMove.cancel(),(i.axis.x.isOverflowing||i.axis.x.forceVisible)&&i.onMouseLeaveForAxis("x"),(i.axis.y.isOverflowing||i.axis.y.forceVisible)&&i.onMouseLeaveForAxis("y"),i.mouseX=-1,i.mouseY=-1},this.onWindowResize=function(){i.scrollbarWidth=i.getScrollbarWidth(),i.hideNativeScrollbar()},this.hideScrollbars=function(){i.axis.x.track.rect=i.axis.x.track.el.getBoundingClientRect(),i.axis.y.track.rect=i.axis.y.track.el.getBoundingClientRect(),i.isWithinBounds(i.axis.y.track.rect)||(i.axis.y.scrollbar.el.classList.remove(i.classNames.visible),i.axis.y.isVisible=!1),i.isWithinBounds(i.axis.x.track.rect)||(i.axis.x.scrollbar.el.classList.remove(i.classNames.visible),i.axis.x.isVisible=!1)},this.onPointerEvent=function(e){var t,n;i.axis.x.track.rect=i.axis.x.track.el.getBoundingClientRect(),i.axis.y.track.rect=i.axis.y.track.el.getBoundingClientRect(),(i.axis.x.isOverflowing||i.axis.x.forceVisible)&&(t=i.isWithinBounds(i.axis.x.track.rect)),(i.axis.y.isOverflowing||i.axis.y.forceVisible)&&(n=i.isWithinBounds(i.axis.y.track.rect)),(t||n)&&(e.preventDefault(),e.stopPropagation(),"mousedown"===e.type&&(t&&(i.axis.x.scrollbar.rect=i.axis.x.scrollbar.el.getBoundingClientRect(),i.isWithinBounds(i.axis.x.scrollbar.rect)?i.onDragStart(e,"x"):i.onTrackClick(e,"x")),n&&(i.axis.y.scrollbar.rect=i.axis.y.scrollbar.el.getBoundingClientRect(),i.isWithinBounds(i.axis.y.scrollbar.rect)?i.onDragStart(e,"y"):i.onTrackClick(e,"y"))))},this.drag=function(t){var n=i.axis[i.draggedAxis].track,o=n.rect[i.axis[i.draggedAxis].sizeAttr],r=i.axis[i.draggedAxis].scrollbar,s=i.contentWrapperEl[i.axis[i.draggedAxis].scrollSizeAttr],a=parseInt(i.elStyles[i.axis[i.draggedAxis].sizeAttr],10);t.preventDefault(),t.stopPropagation();var l=(("y"===i.draggedAxis?t.pageY:t.pageX)-n.rect[i.axis[i.draggedAxis].offsetAttr]-i.axis[i.draggedAxis].dragOffset)/(o-r.size)*(s-a);"x"===i.draggedAxis&&(l=i.isRtl&&e.getRtlHelpers().isRtlScrollbarInverted?l-(o+r.size):l,l=i.isRtl&&e.getRtlHelpers().isRtlScrollingInverted?-l:l),i.contentWrapperEl[i.axis[i.draggedAxis].scrollOffsetAttr]=l},this.onEndDrag=function(e){var t=Z(i.el),n=K(i.el);e.preventDefault(),e.stopPropagation(),i.el.classList.remove(i.classNames.dragging),t.removeEventListener("mousemove",i.drag,!0),t.removeEventListener("mouseup",i.onEndDrag,!0),i.removePreventClickId=n.setTimeout((function(){t.removeEventListener("click",i.preventClick,!0),t.removeEventListener("dblclick",i.preventClick,!0),i.removePreventClickId=null}))},this.preventClick=function(e){e.preventDefault(),e.stopPropagation()},this.el=t,this.minScrollbarWidth=20,this.options=Object.assign({},e.defaultOptions,n),this.classNames=Object.assign({},e.defaultOptions.classNames,this.options.classNames),this.axis={x:{scrollOffsetAttr:"scrollLeft",sizeAttr:"width",scrollSizeAttr:"scrollWidth",offsetSizeAttr:"offsetWidth",offsetAttr:"left",overflowAttr:"overflowX",dragOffset:0,isOverflowing:!0,isVisible:!1,forceVisible:!1,track:{},scrollbar:{}},y:{scrollOffsetAttr:"scrollTop",sizeAttr:"height",scrollSizeAttr:"scrollHeight",offsetSizeAttr:"offsetHeight",offsetAttr:"top",overflowAttr:"overflowY",dragOffset:0,isOverflowing:!0,isVisible:!1,forceVisible:!1,track:{},scrollbar:{}}},this.removePreventClickId=null,e.instances.has(this.el)||(this.recalculate=a()(this.recalculate.bind(this),64),this.onMouseMove=a()(this.onMouseMove.bind(this),64),this.hideScrollbars=c()(this.hideScrollbars.bind(this),this.options.timeout),this.onWindowResize=c()(this.onWindowResize.bind(this),64,{leading:!0}),e.getRtlHelpers=d()(e.getRtlHelpers),this.init())}e.getRtlHelpers=function(){var t=document.createElement("div");t.innerHTML='<div class="hs-dummy-scrollbar-size"><div style="height: 200%; width: 200%; margin: 10px 0;"></div></div>';var n=t.firstElementChild;document.body.appendChild(n);var i=n.firstElementChild;n.scrollLeft=0;var o=e.getOffset(n),r=e.getOffset(i);n.scrollLeft=999;var s=e.getOffset(i);return{isRtlScrollingInverted:o.left!==r.left&&r.left-s.left!=0,isRtlScrollbarInverted:o.left!==r.left}},e.getOffset=function(e){var t=e.getBoundingClientRect(),n=Z(e),i=K(e);return{top:t.top+(i.pageYOffset||n.documentElement.scrollTop),left:t.left+(i.pageXOffset||n.documentElement.scrollLeft)}};var t=e.prototype;return t.init=function(){e.instances.set(this.el,this),r()&&(this.initDOM(),this.setAccessibilityAttributes(),this.scrollbarWidth=this.getScrollbarWidth(),this.recalculate(),this.initListeners())},t.initDOM=function(){var e=this;if(Array.prototype.filter.call(this.el.children,(function(t){return t.classList.contains(e.classNames.wrapper)})).length)this.wrapperEl=this.el.querySelector("."+this.classNames.wrapper),this.contentWrapperEl=this.options.scrollableNode||this.el.querySelector("."+this.classNames.contentWrapper),this.contentEl=this.options.contentNode||this.el.querySelector("."+this.classNames.contentEl),this.offsetEl=this.el.querySelector("."+this.classNames.offset),this.maskEl=this.el.querySelector("."+this.classNames.mask),this.placeholderEl=this.findChild(this.wrapperEl,"."+this.classNames.placeholder),this.heightAutoObserverWrapperEl=this.el.querySelector("."+this.classNames.heightAutoObserverWrapperEl),this.heightAutoObserverEl=this.el.querySelector("."+this.classNames.heightAutoObserverEl),this.axis.x.track.el=this.findChild(this.el,"."+this.classNames.track+"."+this.classNames.horizontal),this.axis.y.track.el=this.findChild(this.el,"."+this.classNames.track+"."+this.classNames.vertical);else{for(this.wrapperEl=document.createElement("div"),this.contentWrapperEl=document.createElement("div"),this.offsetEl=document.createElement("div"),this.maskEl=document.createElement("div"),this.contentEl=document.createElement("div"),this.placeholderEl=document.createElement("div"),this.heightAutoObserverWrapperEl=document.createElement("div"),this.heightAutoObserverEl=document.createElement("div"),this.wrapperEl.classList.add(this.classNames.wrapper),this.contentWrapperEl.classList.add(this.classNames.contentWrapper),this.offsetEl.classList.add(this.classNames.offset),this.maskEl.classList.add(this.classNames.mask),this.contentEl.classList.add(this.classNames.contentEl),this.placeholderEl.classList.add(this.classNames.placeholder),this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl),this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl);this.el.firstChild;)this.contentEl.appendChild(this.el.firstChild);this.contentWrapperEl.appendChild(this.contentEl),this.offsetEl.appendChild(this.contentWrapperEl),this.maskEl.appendChild(this.offsetEl),this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl),this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl),this.wrapperEl.appendChild(this.maskEl),this.wrapperEl.appendChild(this.placeholderEl),this.el.appendChild(this.wrapperEl)}if(!this.axis.x.track.el||!this.axis.y.track.el){var t=document.createElement("div"),n=document.createElement("div");t.classList.add(this.classNames.track),n.classList.add(this.classNames.scrollbar),t.appendChild(n),this.axis.x.track.el=t.cloneNode(!0),this.axis.x.track.el.classList.add(this.classNames.horizontal),this.axis.y.track.el=t.cloneNode(!0),this.axis.y.track.el.classList.add(this.classNames.vertical),this.el.appendChild(this.axis.x.track.el),this.el.appendChild(this.axis.y.track.el)}this.axis.x.scrollbar.el=this.axis.x.track.el.querySelector("."+this.classNames.scrollbar),this.axis.y.scrollbar.el=this.axis.y.track.el.querySelector("."+this.classNames.scrollbar),this.options.autoHide||(this.axis.x.scrollbar.el.classList.add(this.classNames.visible),this.axis.y.scrollbar.el.classList.add(this.classNames.visible)),this.el.setAttribute("data-simplebar","init")},t.setAccessibilityAttributes=function(){var e=this.options.ariaLabel||"scrollable content";this.contentWrapperEl.setAttribute("tabindex","0"),this.contentWrapperEl.setAttribute("role","region"),this.contentWrapperEl.setAttribute("aria-label",e)},t.initListeners=function(){var e=this,t=K(this.el);this.options.autoHide&&this.el.addEventListener("mouseenter",this.onMouseEnter),["mousedown","click","dblclick"].forEach((function(t){e.el.addEventListener(t,e.onPointerEvent,!0)})),["touchstart","touchend","touchmove"].forEach((function(t){e.el.addEventListener(t,e.onPointerEvent,{capture:!0,passive:!0})})),this.el.addEventListener("mousemove",this.onMouseMove),this.el.addEventListener("mouseleave",this.onMouseLeave),this.contentWrapperEl.addEventListener("scroll",this.onScroll),t.addEventListener("resize",this.onWindowResize);var n=!1,i=t.ResizeObserver||Y;this.resizeObserver=new i((function(){n&&e.recalculate()})),this.resizeObserver.observe(this.el),this.resizeObserver.observe(this.contentEl),t.requestAnimationFrame((function(){n=!0})),this.mutationObserver=new t.MutationObserver(this.recalculate),this.mutationObserver.observe(this.contentEl,{childList:!0,subtree:!0,characterData:!0})},t.recalculate=function(){var e=K(this.el);this.elStyles=e.getComputedStyle(this.el),this.isRtl="rtl"===this.elStyles.direction;var t=this.heightAutoObserverEl.offsetHeight<=1,n=this.heightAutoObserverEl.offsetWidth<=1,i=this.contentEl.offsetWidth,o=this.contentWrapperEl.offsetWidth,r=this.elStyles.overflowX,s=this.elStyles.overflowY;this.contentEl.style.padding=this.elStyles.paddingTop+" "+this.elStyles.paddingRight+" "+this.elStyles.paddingBottom+" "+this.elStyles.paddingLeft,this.wrapperEl.style.margin="-"+this.elStyles.paddingTop+" -"+this.elStyles.paddingRight+" -"+this.elStyles.paddingBottom+" -"+this.elStyles.paddingLeft;var a=this.contentEl.scrollHeight,l=this.contentEl.scrollWidth;this.contentWrapperEl.style.height=t?"auto":"100%",this.placeholderEl.style.width=n?i+"px":"auto",this.placeholderEl.style.height=a+"px";var c=this.contentWrapperEl.offsetHeight;this.axis.x.isOverflowing=l>i,this.axis.y.isOverflowing=a>c,this.axis.x.isOverflowing="hidden"!==r&&this.axis.x.isOverflowing,this.axis.y.isOverflowing="hidden"!==s&&this.axis.y.isOverflowing,this.axis.x.forceVisible="x"===this.options.forceVisible||!0===this.options.forceVisible,this.axis.y.forceVisible="y"===this.options.forceVisible||!0===this.options.forceVisible,this.hideNativeScrollbar();var u=this.axis.x.isOverflowing?this.scrollbarWidth:0,d=this.axis.y.isOverflowing?this.scrollbarWidth:0;this.axis.x.isOverflowing=this.axis.x.isOverflowing&&l>o-d,this.axis.y.isOverflowing=this.axis.y.isOverflowing&&a>c-u,this.axis.x.scrollbar.size=this.getScrollbarSize("x"),this.axis.y.scrollbar.size=this.getScrollbarSize("y"),this.axis.x.scrollbar.el.style.width=this.axis.x.scrollbar.size+"px",this.axis.y.scrollbar.el.style.height=this.axis.y.scrollbar.size+"px",this.positionScrollbar("x"),this.positionScrollbar("y"),this.toggleTrackVisibility("x"),this.toggleTrackVisibility("y")},t.getScrollbarSize=function(e){if(void 0===e&&(e="y"),!this.axis[e].isOverflowing)return 0;var t,n=this.contentEl[this.axis[e].scrollSizeAttr],i=this.axis[e].track.el[this.axis[e].offsetSizeAttr],o=i/n;return t=Math.max(~~(o*i),this.options.scrollbarMinSize),this.options.scrollbarMaxSize&&(t=Math.min(t,this.options.scrollbarMaxSize)),t},t.positionScrollbar=function(t){if(void 0===t&&(t="y"),this.axis[t].isOverflowing){var n=this.contentWrapperEl[this.axis[t].scrollSizeAttr],i=this.axis[t].track.el[this.axis[t].offsetSizeAttr],o=parseInt(this.elStyles[this.axis[t].sizeAttr],10),r=this.axis[t].scrollbar,s=this.contentWrapperEl[this.axis[t].scrollOffsetAttr],a=(s="x"===t&&this.isRtl&&e.getRtlHelpers().isRtlScrollingInverted?-s:s)/(n-o),l=~~((i-r.size)*a);l="x"===t&&this.isRtl&&e.getRtlHelpers().isRtlScrollbarInverted?l+(i-r.size):l,r.el.style.transform="x"===t?"translate3d("+l+"px, 0, 0)":"translate3d(0, "+l+"px, 0)"}},t.toggleTrackVisibility=function(e){void 0===e&&(e="y");var t=this.axis[e].track.el,n=this.axis[e].scrollbar.el;this.axis[e].isOverflowing||this.axis[e].forceVisible?(t.style.visibility="visible",this.contentWrapperEl.style[this.axis[e].overflowAttr]="scroll"):(t.style.visibility="hidden",this.contentWrapperEl.style[this.axis[e].overflowAttr]="hidden"),this.axis[e].isOverflowing?n.style.display="block":n.style.display="none"},t.hideNativeScrollbar=function(){this.offsetEl.style[this.isRtl?"left":"right"]=this.axis.y.isOverflowing||this.axis.y.forceVisible?"-"+this.scrollbarWidth+"px":0,this.offsetEl.style.bottom=this.axis.x.isOverflowing||this.axis.x.forceVisible?"-"+this.scrollbarWidth+"px":0},t.onMouseMoveForAxis=function(e){void 0===e&&(e="y"),this.axis[e].track.rect=this.axis[e].track.el.getBoundingClientRect(),this.axis[e].scrollbar.rect=this.axis[e].scrollbar.el.getBoundingClientRect(),this.isWithinBounds(this.axis[e].scrollbar.rect)?this.axis[e].scrollbar.el.classList.add(this.classNames.hover):this.axis[e].scrollbar.el.classList.remove(this.classNames.hover),this.isWithinBounds(this.axis[e].track.rect)?(this.showScrollbar(e),this.axis[e].track.el.classList.add(this.classNames.hover)):this.axis[e].track.el.classList.remove(this.classNames.hover)},t.onMouseLeaveForAxis=function(e){void 0===e&&(e="y"),this.axis[e].track.el.classList.remove(this.classNames.hover),this.axis[e].scrollbar.el.classList.remove(this.classNames.hover)},t.showScrollbar=function(e){void 0===e&&(e="y");var t=this.axis[e].scrollbar.el;this.axis[e].isVisible||(t.classList.add(this.classNames.visible),this.axis[e].isVisible=!0),this.options.autoHide&&this.hideScrollbars()},t.onDragStart=function(e,t){void 0===t&&(t="y");var n=Z(this.el),i=K(this.el),o=this.axis[t].scrollbar,r="y"===t?e.pageY:e.pageX;this.axis[t].dragOffset=r-o.rect[this.axis[t].offsetAttr],this.draggedAxis=t,this.el.classList.add(this.classNames.dragging),n.addEventListener("mousemove",this.drag,!0),n.addEventListener("mouseup",this.onEndDrag,!0),null===this.removePreventClickId?(n.addEventListener("click",this.preventClick,!0),n.addEventListener("dblclick",this.preventClick,!0)):(i.clearTimeout(this.removePreventClickId),this.removePreventClickId=null)},t.onTrackClick=function(e,t){var n=this;if(void 0===t&&(t="y"),this.options.clickOnTrack){var i=K(this.el);this.axis[t].scrollbar.rect=this.axis[t].scrollbar.el.getBoundingClientRect();var o=this.axis[t].scrollbar.rect[this.axis[t].offsetAttr],r=parseInt(this.elStyles[this.axis[t].sizeAttr],10),s=this.contentWrapperEl[this.axis[t].scrollOffsetAttr],a=("y"===t?this.mouseY-o:this.mouseX-o)<0?-1:1,l=-1===a?s-r:s+r;!function e(){var o,r;-1===a?s>l&&(s-=n.options.clickOnTrackSpeed,n.contentWrapperEl.scrollTo(((o={})[n.axis[t].offsetAttr]=s,o)),i.requestAnimationFrame(e)):s<l&&(s+=n.options.clickOnTrackSpeed,n.contentWrapperEl.scrollTo(((r={})[n.axis[t].offsetAttr]=s,r)),i.requestAnimationFrame(e))}()}},t.getContentElement=function(){return this.contentEl},t.getScrollElement=function(){return this.contentWrapperEl},t.getScrollbarWidth=function(){try{return"none"===getComputedStyle(this.contentWrapperEl,"::-webkit-scrollbar").display||"scrollbarWidth"in document.documentElement.style||"-ms-overflow-style"in document.documentElement.style?0:ee(this.el)}catch(e){return ee(this.el)}},t.removeListeners=function(){var e=this,t=K(this.el);this.options.autoHide&&this.el.removeEventListener("mouseenter",this.onMouseEnter),["mousedown","click","dblclick"].forEach((function(t){e.el.removeEventListener(t,e.onPointerEvent,!0)})),["touchstart","touchend","touchmove"].forEach((function(t){e.el.removeEventListener(t,e.onPointerEvent,{capture:!0,passive:!0})})),this.el.removeEventListener("mousemove",this.onMouseMove),this.el.removeEventListener("mouseleave",this.onMouseLeave),this.contentWrapperEl&&this.contentWrapperEl.removeEventListener("scroll",this.onScroll),t.removeEventListener("resize",this.onWindowResize),this.mutationObserver&&this.mutationObserver.disconnect(),this.resizeObserver&&this.resizeObserver.disconnect(),this.recalculate.cancel(),this.onMouseMove.cancel(),this.hideScrollbars.cancel(),this.onWindowResize.cancel()},t.unMount=function(){this.removeListeners(),e.instances.delete(this.el)},t.isWithinBounds=function(e){return this.mouseX>=e.left&&this.mouseX<=e.left+e.width&&this.mouseY>=e.top&&this.mouseY<=e.top+e.height},t.findChild=function(e,t){var n=e.matches||e.webkitMatchesSelector||e.mozMatchesSelector||e.msMatchesSelector;return Array.prototype.filter.call(e.children,(function(e){return n.call(e,t)}))[0]},e}();te.defaultOptions={autoHide:!0,forceVisible:!1,clickOnTrack:!0,clickOnTrackSpeed:40,classNames:{contentEl:"simplebar-content",contentWrapper:"simplebar-content-wrapper",offset:"simplebar-offset",mask:"simplebar-mask",wrapper:"simplebar-wrapper",placeholder:"simplebar-placeholder",scrollbar:"simplebar-scrollbar",track:"simplebar-track",heightAutoObserverWrapperEl:"simplebar-height-auto-observer-wrapper",heightAutoObserverEl:"simplebar-height-auto-observer",visible:"simplebar-visible",horizontal:"simplebar-horizontal",vertical:"simplebar-vertical",hover:"simplebar-hover",dragging:"simplebar-dragging"},scrollbarMinSize:25,scrollbarMaxSize:0,timeout:1e3},te.instances=new WeakMap,te.initDOMLoadedElements=function(){document.removeEventListener("DOMContentLoaded",this.initDOMLoadedElements),window.removeEventListener("load",this.initDOMLoadedElements),Array.prototype.forEach.call(document.querySelectorAll("[data-simplebar]"),(function(e){"init"===e.getAttribute("data-simplebar")||te.instances.has(e)||new te(e,X(e.attributes))}))},te.removeObserver=function(){this.globalObserver.disconnect()},te.initHtmlApi=function(){this.initDOMLoadedElements=this.initDOMLoadedElements.bind(this),"undefined"!=typeof MutationObserver&&(this.globalObserver=new MutationObserver(te.handleMutations),this.globalObserver.observe(document,{childList:!0,subtree:!0})),"complete"===document.readyState||"loading"!==document.readyState&&!document.documentElement.doScroll?window.setTimeout(this.initDOMLoadedElements):(document.addEventListener("DOMContentLoaded",this.initDOMLoadedElements),window.addEventListener("load",this.initDOMLoadedElements))},te.handleMutations=function(e){e.forEach((function(e){Array.prototype.forEach.call(e.addedNodes,(function(e){1===e.nodeType&&(e.hasAttribute("data-simplebar")?!te.instances.has(e)&&document.documentElement.contains(e)&&new te(e,X(e.attributes)):Array.prototype.forEach.call(e.querySelectorAll("[data-simplebar]"),(function(e){"init"!==e.getAttribute("data-simplebar")&&!te.instances.has(e)&&document.documentElement.contains(e)&&new te(e,X(e.attributes))})))})),Array.prototype.forEach.call(e.removedNodes,(function(e){1===e.nodeType&&("init"===e.getAttribute("data-simplebar")?te.instances.has(e)&&!document.documentElement.contains(e)&&te.instances.get(e).unMount():Array.prototype.forEach.call(e.querySelectorAll('[data-simplebar="init"]'),(function(e){te.instances.has(e)&&!document.documentElement.contains(e)&&te.instances.get(e).unMount()})))}))}))},te.getOptions=X,r()&&te.initHtmlApi();var ne=function(e,t,n){this.name=e,this.version=t,this.os=n,this.type="browser"},ie=function(e){this.version=e,this.type="node",this.name="node",this.os=process.platform},oe=function(e,t,n,i){this.name=e,this.version=t,this.os=n,this.bot=i,this.type="bot-device"},re=function(){this.type="bot",this.bot=!0,this.name="bot",this.version=null,this.os=null},se=function(){this.type="react-native",this.name="react-native",this.version=null,this.os=null},ae=/(nuhk|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/,le=[["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["edge-ios",/EdgiOS\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["silk",/\bSilk\/([0-9._-]+)\b/],["miui",/MiuiBrowser\/([0-9\.]+)$/],["beaker",/BeakerBrowser\/([0-9\.]+)/],["edge-chromium",/EdgA?\/([0-9\.]+)/],["chromium-webview",/(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera-mini",/Opera Mini.*Version\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FBAV\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Gecko\)$/],["searchbot",/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/]],ce=[["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Chrome OS",/CrOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/]];function ue(e){var t=function(e){return""!==e&&le.reduce((function(t,n){var i=n[0],o=n[1];if(t)return t;var r=o.exec(e);return!!r&&[i,r]}),!1)}(e);if(!t)return null;var n=t[0],i=t[1];if("searchbot"===n)return new re;var o=i[1]&&i[1].split(/[._]/).slice(0,3);o?o.length<3&&(o=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var i=Array(e),o=0;for(t=0;t<n;t++)for(var r=arguments[t],s=0,a=r.length;s<a;s++,o++)i[o]=r[s];return i}(o,function(e){for(var t=[],n=0;n<e;n++)t.push("0");return t}(3-o.length))):o=[];var r=o.join("."),s=function(e){for(var t=0,n=ce.length;t<n;t++){var i=ce[t],o=i[0];if(i[1].exec(e))return o}return null}(e),a=ae.exec(e);return a&&a[1]?new oe(n,r,s,a[1]):new ne(n,r,s)}const de={debug:!1,WIKI_SILEX:"https://github.com/silexlabs/Silex/wiki",WIKI_SILEX_CUSTOM_CSS_CLASS:"https://github.com/silexlabs/Silex/wiki/Silex-CSS-editor#custom-css-classes",CROWD_FUNDING:"http://crowdfunding.silex.me/",ISSUES_SILEX:"https://github.com/silexlabs/Silex/issues?state=open",DOWNLOADS_TEMPLATE_SILEX:"https://github.com/silexlabs/Silex/issues?labels=template&state=open",DOWNLOADS_WIDGET_SILEX:"https://github.com/silexlabs/Silex/issues?labels=widget&state=open",ABOUT_SILEX_LABS:"http://www.silexlabs.org/",SUBSCRIBE_SILEX_LABS:"http://eepurl.com/F48q5",SOCIAL_DIASPORA:"https://diasp.org/people/f37438103a9b013250aa2a0000053625",SOCIAL_TWITTER:"http://twitter.com/silexlabs",SOCIAL_FB:"http://www.facebook.com/silexlabs",FORK_CODE:"https://github.com/silexlabs/Silex",CONTRIBUTE:"https://github.com/silexlabs/Silex/wiki/Contribute",singleSiteMode:!1,componentFolders:["./prodotype/components"],shortcuts:[{label:"New File",id:"file.new",key:"n",altKey:!0},{label:"Open File...",id:"file.open",key:"o",ctrlKey:!0},{label:"Save File",id:"file.save",key:"s",ctrlKey:!0},{label:"Save As...",id:"file.saveas",key:"s",ctrlKey:!0,shiftKey:!0},{label:"Publish",id:"file.publish",key:"p",ctrlKey:!0},{label:"Settings...",id:"file.publish.settings",key:"o",altKey:!0},{label:"Move Up",id:"edit.position.up",key:"ArrowUp",modifiers:!1,input:!1},{label:"Move Down",id:"edit.position.down",key:"ArrowDown",modifiers:!1,input:!1},{label:"Move Left",id:"edit.position.left",key:"ArrowLeft",modifiers:!1,input:!1},{label:"Move Right",id:"edit.position.right",key:"ArrowRight",modifiers:!1,input:!1},{label:"Move Up in the DOM",id:"edit.move.up",key:"ArrowUp",altKey:!0,input:!1},{label:"Move Down in the DOM",id:"edit.move.down",key:"ArrowDown",altKey:!0,input:!1},{label:"Move Top",id:"edit.move.to.top",key:"ArrowUp",shiftKey:!0,altKey:!0,input:!1},{label:"Move Bottom",id:"edit.move.to.bottom",key:"ArrowDown",shiftKey:!0,altKey:!0,input:!1},{label:"Copy",id:"edit.copy.selection",key:"c",ctrlKey:!0,input:!1},{label:"Paste",id:"edit.paste.selection",key:"v",ctrlKey:!0,input:!1},{label:"Duplicate",id:"edit.duplicate.selection",key:"D",ctrlKey:!0,input:!1},{label:"Undo",id:"edit.undo",key:"z",ctrlKey:!0,input:!1},{label:"Redo",id:"edit.redo",key:"z",ctrlKey:!0,shiftKey:!0,input:!1},{label:"Delete selection",id:"edit.delete.selection",key:"Delete",input:!1},{label:"Empty selection",id:"edit.empty.selection",key:"Escape",input:!1},{label:"Rename page",id:"edit.rename.page",key:"r",altKey:!0},{label:"Preview",id:"view.file",key:"v",altKey:!0},{label:"Preview in Responsize",id:"view.file.responsize",key:"v",shiftKey:!0,altKey:!0},{label:"Mobile editor",id:"tools.mobile.mode",key:"m",altKey:!0},{label:"Next tab in the property tool",id:"tools.next.property",key:"l",altKey:!0},{label:"Previous tab in the property tool",id:"tools.prev.property",key:"l",shiftKey:!0,altKey:!0},{label:"HTML <head> editor",id:"view.open.htmlHeadEditor",key:"e",altKey:!0},{label:"JS scripts editor",id:"view.open.jsEditor",key:"j",altKey:!0},{label:"CSS styles editor",id:"view.open.cssEditor",key:"d",altKey:!0},{label:"Text box",id:"insert.text",key:"t",altKey:!0},{label:"Image...",id:"insert.image",key:"i",altKey:!0},{label:"Container",id:"insert.container",key:"c",altKey:!0},{label:"HTML box",id:"insert.html",key:"h",altKey:!0},{label:"Section",id:"insert.section",key:"s",altKey:!0},{label:"New page",id:"insert.page",key:"p",altKey:!0}]};var he,pe,fe;!function(e){e[e.NONE=0]="NONE",e[e.WEBSITE=1]="WEBSITE",e[e.SILEX=2]="SILEX"}(he||(he={}));class me{constructor(){throw new Error("this is a static class and it canot be instanciated")}static get isActive(){return!!me.currentDialog&&!document.querySelector(".alerts").classList.contains("closed")}static get currentDialog(){return document.querySelector(`.${me.NOTIFICATION_CSS_CLASS}`)}static close(e=!1,t=null){if(me.currentDialog){document.querySelector(".alerts").classList.add("closed");const n=e?me.cbkOk:me.cbkCancel;return me.currentDialog.remove(),me.cbkCancel=null,me.cbkOk=null,n(),t&&t.preventDefault(),t&&t.stopPropagation(),!1}}static alert(e,t,n,i="ok"){me.close(),me.create(me.getMarkup({labelOk:i,title:e,content:t})),me.cbkCancel=me.cbkOk=()=>n(),me.currentDialog.querySelector(`#${me.NOTIFICATION_CSS_CLASS}_ok`).onclick=e=>me.close(!1,e)}static prompt(e,t,n,i,o,r="ok",s="cancel"){me.close(),me.create(me.getMarkup({labelOk:r,labelCancel:s,defaultValue:n,title:e,content:t,placeholder:i}));const a=me.currentDialog.querySelector(`#${me.NOTIFICATION_CSS_CLASS}_value`);me.cbkOk=()=>{o(!0,a.value)},me.cbkCancel=()=>{o(!1,null)},me.currentDialog.querySelector(`#${me.NOTIFICATION_CSS_CLASS}_ok`).onclick=e=>me.close(!0,e),me.currentDialog.querySelector(`#${me.NOTIFICATION_CSS_CLASS}_cancel`).onclick=e=>me.close(!1,e)}static confirm(e,t,n,i="ok",o="cancel"){me.close(),me.create(me.getMarkup({labelOk:i,labelCancel:o,title:e,content:t})),me.cbkOk=()=>n(!0),me.cbkCancel=()=>n(!1),me.currentDialog.querySelector(`#${me.NOTIFICATION_CSS_CLASS}_ok`).onclick=e=>me.close(!0,e),me.currentDialog.querySelector(`#${me.NOTIFICATION_CSS_CLASS}_cancel`).onclick=e=>me.close(!1,e)}static lightDialog(e,t){const n=document.querySelector(".light-dialog"),i=document.createElement("p");return i.classList.add("light-dialog__content"),i.innerHTML=`\n      ${t?'<div class="light-dialog__close">X</div>':""}\n      ${e}\n    `,n.appendChild(i),setTimeout((()=>i.classList.add("light-dialog__content--open")),100),t&&(i.querySelector(".light-dialog__close").onclick=e=>{t(),i.remove()}),i}static notifySuccess(e){const t=document.querySelector(".alerts-notify"),n=document.createElement("p");n.innerHTML=e,t.appendChild(n);const i=setTimeout((()=>{n.remove()}),me.NOTIFICATION_DURATION_MS);n.onclick=e=>{clearTimeout(i),n.remove()}}static notifyError(e){console.error(e),me.notifySuccess(e)}static setContent(e,t=!1){if(me.currentDialog){const n=me.currentDialog.querySelector(`.${me.NOTIFICATION_CSS_CLASS}_content`);t||(n.innerHTML=""),n.appendChild(e),me.updateFocus()}}static setText(e){if(me.currentDialog){const t=document.createElement("div");t.insertAdjacentHTML("afterbegin",`<p>${e}</p>`),me.setContent(t)}}static addButton(e){me.currentDialog&&(me.currentDialog.querySelector(`.${me.NOTIFICATION_CSS_CLASS}_buttons`).appendChild(e),me.updateFocus())}static setInfoPanel(e){if(me.currentDialog){let t=me.currentDialog.querySelector(`#${me.NOTIFICATION_CSS_CLASS}_info`);t||(t=document.createElement("div"),t.insertAdjacentHTML("afterbegin",`<p class="${me.NOTIFICATION_CSS_CLASS}_info"></p>`),me.setContent(t,!0)),t.style.maxHeight=Math.round(2*window.innerHeight/3)+"px",me.currentDialog.insertBefore(t,me.currentDialog.childNodes[me.currentDialog.childNodes.length-1]),t.innerHTML="",t.appendChild(e)}}static getMarkup(e){return`\n      <section class="${me.NOTIFICATION_CSS_CLASS}">\n        <h2>${e.title}</h2>\n        <p class="${me.NOTIFICATION_CSS_CLASS}_content">\n          ${e.content}\n          ${void 0!==e.defaultValue?`\n              <input\n                autofocus\n                id="${me.NOTIFICATION_CSS_CLASS}_value"\n                ${e.placeholder?`placeholder="${e.placeholder}"`:""}\n                class="block-dialog" type="text" value="${e.defaultValue}"\n              >`:""}\n        </p>\n        <div class="${me.NOTIFICATION_CSS_CLASS}_buttons">\n          ${e.labelCancel?`<input id="${me.NOTIFICATION_CSS_CLASS}_cancel" type="button" value="${e.labelCancel}">`:""}\n          ${e.labelOk?`<input id="${me.NOTIFICATION_CSS_CLASS}_ok" type="button" value="${e.labelOk}">`:""}\n        </div>\n      </section>\n    `}static create(e){const t=document.querySelector(".alerts");t.insertAdjacentHTML("afterbegin",e),t.classList.remove("closed"),me.updateFocus()}static updateFocus(){const e=me.currentDialog.querySelector("[autofocus]");e&&e.focus()}}me.NOTIFICATION_DURATION_MS=3e4,me.NOTIFICATION_CSS_CLASS="notification-dialog";class ge{static getUrlParams(){return window.location.search.substr(1).split("&").reduce(((e,t)=>{const n=t.split("=");return 2===n.length&&(e[n[0]]=n[1]),e}),{})}static updateFileInfo(e,t){if(!e)return null;const n=Object.assign({},e,t);return Object.assign({},n,{url:ge.getBaseUrl()+n.service+"/get/"+n.path})}static getBaseUrl(){return window.location.href}static getRootUrl(e){const t=e||window.location.href,n=t.indexOf("//"),i=t.indexOf("/",n+2);return t.substr(0,i)}static getHost(e){const t=ge.getRootUrl(e);return t.substr(t.indexOf("//")+2)}static isAbsoluteUrl(e){return 0===e.indexOf("http")||0===e.indexOf("//")}static removeUrlKeyword(e){return e.startsWith("url(")&&(e=e.substr(4)),e.endsWith(")")&&(e=e.substr(0,e.length-1)),(e.startsWith("'")||e.startsWith('"'))&&(e=e.substr(1)),(e.endsWith("'")||e.endsWith('"'))&&(e=e.substr(0,e.length-1)),e.startsWith("&quot;")&&(e=e.substr(6)),e.endsWith("&quot;")&&(e=e.substr(0,e.length-6)),e.startsWith("%5C")&&(e=e.substr(3)),e.startsWith("%22")&&(e=e.substr(3)),e.endsWith("%22")&&(e=e.substr(0,e.length-3)),e.endsWith("%5C")&&(e=e.substr(0,e.length-3)),e}static addUrlKeyword(e){return`url('${e}')`}static addCacheControl(e){return(e=ge.removeCacheControl(e)).indexOf("?")>0?e+="&":e+="?",e+(ge.CACHE_CONTROL_PARAM_NAME+"=")+Date.now()}static removeCacheControl(e){if(e.indexOf(ge.CACHE_CONTROL_PARAM_NAME)>0){const t=new RegExp("([?|&|&amp;]"+ge.CACHE_CONTROL_PARAM_NAME+"=[0-9]*[&*]?)","gi");e=e.replace(t,((e,t,n)=>"?"===t.charAt(0)&&"&"===t.charAt(t.length-1)?"?":"&"===t.charAt(t.length-1)||"&"===t.charAt(0)?"&":""))}return e}}function be(e){const t=Ce(Se(e)),n=e.getBoundingClientRect();return{top:n.top+t.y,left:n.left+t.x,bottom:n.bottom+t.y,right:n.right+t.x,width:n.width,height:n.height}}function ye(e){const t={top:1/0,left:1/0,bottom:-1/0,right:-1/0,width:0,height:0};return e.forEach((e=>{const n=Pe(e.metrics);t.top=Math.min(t.top,n.top),t.left=Math.min(t.left,n.left),t.bottom=Math.max(t.bottom,n.top+n.height),t.right=Math.max(t.right,n.left+n.width)})),{...t,width:t.right-t.left,height:t.bottom-t.top}}function ve(e,t){const n=Ce(e),i=Ee(e);return i.innerHeight<t.height?(n.y+i.innerHeight<t.top||n.y>t.bottom)&&(n.y=t.top-0):n.y>t.top?n.y=t.top-0:n.y<t.bottom-i.innerHeight&&(n.y=t.bottom+0-i.innerHeight),i.innerWidth<t.width?(n.x+i.innerWidth<t.left||n.x>t.right)&&(n.x=t.left-0):n.x>t.left?n.x=t.left-0:n.x<t.right-i.innerWidth&&(n.x=t.right+0-i.innerWidth),{x:Math.max(0,n.x),y:Math.max(0,n.y)}}function Ee(e){return e.parentWindow||e.defaultView}function Se(e){return e.ownerDocument}function we(e,t,n,i=!1){const o=Ee(Se(e)).getComputedStyle(e);function r(n,i,r){const s=t[n][i];(parseInt(o.getPropertyValue(n+"-"+i))||0)!==s&&(e.style[r]=s+"px")}if(o.getPropertyValue("position")!==t.position&&(e.style.position=t.position),i){const i=Pe(t);"static"!==t.position&&(e.style.top=i.top+"px",e.style.left=i.left+"px"),e.style.width=i.width+"px",e.style[n?"minHeight":"height"]=i.height+"px"}else"static"!==t.position&&(r("computedStyleRect","top","top"),r("computedStyleRect","left","left")),r("computedStyleRect","width","width"),r("computedStyleRect","height",n?"minHeight":"height");r("margin","top","marginTop"),r("margin","left","marginLeft"),r("margin","bottom","marginBottom"),r("margin","right","marginRight"),r("padding","top","paddingTop"),r("padding","left","paddingLeft"),r("padding","bottom","paddingBottom"),r("padding","right","paddingRight"),r("border","top","borderTopWidth"),r("border","left","borderLeftWidth"),r("border","bottom","borderBottomWidth"),r("border","right","borderRightWidth")}function xe(e){const t=Ee(Se(e)).getComputedStyle(e),n=be(e);return{position:t.getPropertyValue("position"),proportions:n.height/(n.width||1e-12),computedStyleRect:{width:parseInt(t.getPropertyValue("width"))||0,height:parseInt(t.getPropertyValue("height"))||0,left:parseInt(t.getPropertyValue("left"))||0,top:parseInt(t.getPropertyValue("top"))||0,bottom:parseInt(t.getPropertyValue("bottom"))||0,right:parseInt(t.getPropertyValue("right"))||0},border:{left:parseInt(t.getPropertyValue("border-left-width"))||0,top:parseInt(t.getPropertyValue("border-top-width"))||0,right:parseInt(t.getPropertyValue("border-right-width"))||0,bottom:parseInt(t.getPropertyValue("border-bottom-width"))||0},padding:{left:parseInt(t.getPropertyValue("padding-left"))||0,top:parseInt(t.getPropertyValue("padding-top"))||0,right:parseInt(t.getPropertyValue("padding-right"))||0,bottom:parseInt(t.getPropertyValue("padding-bottom"))||0},margin:{left:parseInt(t.getPropertyValue("margin-left"))||0,top:parseInt(t.getPropertyValue("margin-top"))||0,right:parseInt(t.getPropertyValue("margin-right"))||0,bottom:parseInt(t.getPropertyValue("margin-bottom"))||0},clientRect:{top:n.top,left:n.left,bottom:n.bottom,right:n.right,width:n.width,height:n.height}}}function Ce(e){const t=Ee(e);return{x:t.scrollX,y:t.scrollY}}function Te(e,t){Ee(e).scroll(t.x,t.y)}ge.CACHE_CONTROL_PARAM_NAME="silex-cache-control",function(e){e[e.LEFT=0]="LEFT",e[e.RIGHT=1]="RIGHT",e[e.TOP=2]="TOP",e[e.BOTTOM=3]="BOTTOM"}(pe||(pe={})),function(e){e[e.NONE=0]="NONE",e[e.DRAG=1]="DRAG",e[e.RESIZE=2]="RESIZE",e[e.DRAW=3]="DRAW",e[e.HIDE=4]="HIDE"}(fe||(fe={}));const ke="default";function Ie(e){if("left"===e.x&&"top"===e.y)return"nw-resize";if("right"===e.x&&"top"===e.y)return"ne-resize";if("left"===e.x&&"bottom"===e.y)return"sw-resize";if("right"===e.x&&"bottom"===e.y)return"se-resize";if("left"===e.x&&""===e.y)return"w-resize";if("right"===e.x&&""===e.y)return"e-resize";if(""===e.x&&"top"===e.y)return"n-resize";if(""===e.x&&"bottom"===e.y)return"s-resize";throw new Error("direction not found")}function Ae(e,t){return"object"==typeof e?(""!==t.x||""!==t.y)&&[{x:"left",y:"top"},{x:"right",y:"top"},{x:"left",y:"bottom"},{x:"right",y:"bottom"}].reduce(((n,i)=>n||(e[i.x]&&t.x===i.x||""===t.x)&&(e[i.y]&&t.y===i.y||""===t.y)),!1):""!==t.x||""!==t.y}function _e(e,t,n,i){if(i){const o=function(e,t,n,i){const o=i.metrics.clientRect,r=e+n.x-o.left,s=o.width+o.left-(e+n.x),a=t+n.y-o.top,l=o.height+o.top-(t+n.y),c={x:"",y:""};return r<10?c.x="left":s<10&&(c.x="right"),a<10?c.y="top":l<10&&(c.y="bottom"),c}(e,t,n,i);return Ae(i.resizeable,o)?{x:o.x,y:o.y,cursorType:Ie(o)}:i.draggable?{x:"",y:"",cursorType:"move"}:i.selected?{x:"",y:"",cursorType:"pointer"}:{x:"",y:"",cursorType:ke}}return{x:"",y:"",cursorType:ke}}function Oe(e,t){return e.getState().selectables.find((e=>e.el===t))}function Le(e){return e.getState().selectables.filter((e=>e.selected))}function Ne(e,t){let n,i=t;for(;i&&!(n=Oe(e,i));)i=i.parentElement;return n}function De(e,t){const n=Ne(e,t.parentElement);return!!n&&(!(!n.selected||!n.draggable)||De(e,n.el))}function Pe(e){return{top:Math.round(e.clientRect.top+e.margin.top),left:Math.round(e.clientRect.left+e.margin.left),right:Math.round(e.clientRect.right+e.margin.left+e.padding.left+e.padding.right+e.border.left+e.border.right-(e.border.left+e.border.right)),bottom:Math.round(e.clientRect.bottom+e.margin.top+e.padding.top+e.padding.bottom+e.border.top+e.border.bottom-(e.border.top+e.border.bottom)),width:Math.round(e.clientRect.width+e.padding.left+e.padding.right+e.border.left+e.border.right-2*(e.border.left+e.border.right)),height:Math.round(e.clientRect.height+e.border.top+e.border.bottom+e.padding.top+e.padding.bottom-2*(e.border.top+e.border.bottom))}}function Me(e,t,n,i,o){const r=Ee(e),s=(e,t,n)=>Math.min(Math.max(e,t),n),a=s(i,0,r.innerWidth-1),l=s(o,0,r.innerHeight-1),c=t.getState().selectables,u=c.filter((e=>e.selected));return e.elementsFromPoint(a,l).filter((e=>{const t=c.find((t=>t.el===e));return t&&t.isDropZone&&!u.find((t=>t.el===e))}))}function Re(e,t,n,i){return{...e,translation:e.translation?{x:e.translation.x+n,y:e.translation.y+i}:null,metrics:{...e.metrics,clientRect:{...e.metrics.clientRect,top:e.metrics.clientRect.top+i,left:e.metrics.clientRect.left+n,bottom:e.metrics.clientRect.bottom+i,right:e.metrics.clientRect.right+n},computedStyleRect:t?e.metrics.computedStyleRect:{...e.metrics.computedStyleRect,top:e.metrics.computedStyleRect.top+i,left:e.metrics.computedStyleRect.left+n,bottom:e.metrics.computedStyleRect.bottom+i,right:e.metrics.computedStyleRect.right+n}}}}function Be(e,t,n,i={}){return e.addEventListener(t,n,i),()=>e.removeEventListener(t,n,i)}const We="UI_SET_MODE",He=e=>({type:We,mode:e}),je="UI_SET_REFRESHING",ze=e=>({type:je,refreshing:e}),qe="UI_SET_CATCHING_EVENTS",Ue="UI_SET_STICKY",$e="UI_SET_ENABLE_STICKY",Fe="SELECTION_SET",Ge="SELECTION_RESET",Ve="SELECTION_ADD",Ye="SELECTION_REMOVE",Xe=e=>({type:Fe,selectables:e}),Ke=()=>({type:Ge}),Ze=e=>({type:Ve,selectable:e}),Je=e=>({type:Ye,selectable:e});class Qe{constructor(e,t,n){this.win=e,this.store=t,this.hooks=n,this.unsubscribeAll=[],this.unsubscribeAll.push(Be(window,"keydown",(e=>this.onKeyDown(e))),Be(e,"keydown",(e=>this.onKeyDown(e))))}cleanup(){this.unsubscribeAll.forEach((e=>e()))}onKeyDown(e){const t=e.key,n=this.store.getState(),i=e.target;if(n.ui.catchingEvents&&"input"!==i.tagName.toLowerCase()&&"textarea"!==i.tagName.toLowerCase()&&!i.hasAttribute("contenteditable")){switch(t){case"Escape":n.ui.mode!==fe.NONE&&(this.store.dispatch(He(fe.NONE)),this.store.dispatch(Ke()));break;case"Enter":this.hooks.onEdit&&this.hooks.onEdit();break;default:return}e.preventDefault(),e.stopPropagation()}}}const et="MOUSE_SCROLL",tt=e=>({type:et,scrollData:e}),nt="MOUSE_CURSOR",it=e=>({type:nt,cursorData:e}),ot="MOUSE_DATA",rt="SELECTABLE_UPDATE",st="SELECTABLE_RESET",at="SELECTABLE_CREATE",lt="SELECTABLE_DELETE",ct=(e,t=!1)=>({type:rt,selectables:e,preventDispatch:t});var ut;!function(e){e[e.UP=0]="UP",e[e.DOWN=1]="DOWN",e[e.DRAGGING=2]="DRAGGING",e[e.WAITING_DBL_CLICK_DOWN=3]="WAITING_DBL_CLICK_DOWN",e[e.WAITING_DBL_CLICK_DOWN2=4]="WAITING_DBL_CLICK_DOWN2",e[e.WAITING_DBL_CLICK_UP=5]="WAITING_DBL_CLICK_UP"}(ut||(ut={}));class dt{constructor(e,t,n,i){this.winStage=e,this.winOverlay=t,this.store=n,this.hooks=i,this.mouseMode=ut.UP,this.wasMultiSelected=!1,this.unsubscribeAll=[],this.unsubscribeAll.push(Be(this.winOverlay,"scroll",(e=>this.scroll(e)),!0),Be(this.winOverlay.document,"mousedown",(e=>this.down(e)),!0),Be(this.winOverlay.document,"mouseup",(e=>this.up(e)),!0),Be(this.winOverlay.document,"mousemove",(e=>this.move(e)),!0),Be(document,"mouseup",(e=>this.upOut(e)),!0),Be(document,"mousemove",(e=>this.moveOut(e)),!0))}cleanup(){this.unsubscribeAll.forEach((e=>e()))}subscribeMouseEvent(e,t){const n=[Be(this.winOverlay,e,(e=>t(e)),!0),Be(document,e,(e=>t(e)),!0)];return()=>n.forEach((e=>e()))}scroll(e){const t=Ce(this.winOverlay.document);this.store.dispatch(tt(t))}down(e){if(!this.store.getState().ui.catchingEvents)return;try{e.target.setCapture()}catch(e){}e.preventDefault();const t=this.eventToMouseData(e);if(this.mouseMode===ut.WAITING_DBL_CLICK_UP)this.mouseMode=ut.WAITING_DBL_CLICK_DOWN2;else if(this.mouseMode===ut.DRAGGING)this.mouseMode=ut.UP,this.onDrop(t);else{this.mouseMode=ut.WAITING_DBL_CLICK_DOWN,this.firstOnDownMouseData=t;const e=setTimeout((()=>{this.mouseMode===ut.WAITING_DBL_CLICK_DOWN?(this.mouseMode=ut.DOWN,this.firstOnDownMouseData=null,this.onDown(t)):this.mouseMode===ut.WAITING_DBL_CLICK_UP&&(this.mouseMode=ut.DOWN,this.firstOnDownMouseData=null,this.onDown(t),this.mouseMode=ut.UP,this.onUp(t))}),300);this.clearTimeout=()=>{clearTimeout(e),this.clearTimeout=null}}}up(e,t=null){if(!this.store.getState().ui.catchingEvents)return;e.preventDefault();const n=this.eventToMouseData(e,t);this.mouseMode===ut.WAITING_DBL_CLICK_DOWN?this.mouseMode=ut.WAITING_DBL_CLICK_UP:this.mouseMode===ut.WAITING_DBL_CLICK_DOWN2?(this.clearTimeout(),this.mouseMode=ut.UP,this.onDblClick(n)):this.mouseMode===ut.DOWN?(this.mouseMode=ut.UP,this.onUp(n)):this.mouseMode===ut.DRAGGING&&(this.mouseMode=ut.UP,this.onDrop(n))}move(e,t=null){if(!this.store.getState().ui.catchingEvents)return;e.preventDefault();const n=this.eventToMouseData(e,t);this.store.dispatch((e=>({type:ot,mouseData:e}))(n));const i=this.store.getState().selectables.filter((e=>e.hovered!==n.hovered.includes(e.el)));switch(i.length>0&&this.store.dispatch(ct(i.map((e=>({...e,hovered:n.hovered.includes(e.el)}))))),this.mouseMode){case ut.WAITING_DBL_CLICK_UP:this.mouseMode=ut.DOWN,this.onDown(this.firstOnDownMouseData),this.mouseMode=ut.UP,this.onUp(this.firstOnDownMouseData),this.onMove(n);break;case ut.WAITING_DBL_CLICK_DOWN:case ut.WAITING_DBL_CLICK_DOWN2:this.mouseMode=ut.DOWN,this.onDown(this.firstOnDownMouseData);case ut.DOWN:this.mouseMode=ut.DRAGGING,this.onStartDrag(n);break;case ut.DRAGGING:this.onDrag(n);break;default:this.onMove(n)}this.firstOnDownMouseData=null}upOut(e){if(this.mouseMode!==ut.UP){const t=this.winOverlay.frameElement.getBoundingClientRect();this.up(e,t)}}moveOut(e){if(this.mouseMode!==ut.UP){const t=this.winOverlay.frameElement.getBoundingClientRect();this.move(e,t)}}eventToMouseData(e,t=null){const n=e.clientX-(t?t.left:0),i=e.clientY-(t?t.top:0),o=function(e,t,n,i){const o=Ee(e),r=(e,t,n)=>Math.min(Math.max(e,t),n),s=r(n,0,o.innerWidth-1),a=r(i,0,o.innerHeight-1),l=t.getState().selectables;return e.elementsFromPoint(s,a).filter((e=>!!l.find((t=>t.el===e))))}(this.winStage.document,this.store,n,i),r=o?o[0]:null;return{movementX:e.movementX,movementY:e.movementY,mouseX:n,mouseY:i,shiftKey:e.shiftKey,target:r,hovered:o}}onDblClick(e){const{target:t,shiftKey:n}=e,i=Ne(this.store,t);n?this.store.dispatch(Ze(i)):i&&(i.selected||this.store.dispatch(Xe([i]))),this.hooks.onEdit&&this.hooks.onEdit()}onDown(e){const{target:t,shiftKey:n}=e,i=Ne(this.store,t);i&&i.selectable?(this.wasMultiSelected=Le(this.store).length>1&&i.selected,this.wasMultiSelected||n?this.store.dispatch(Ze(i)):this.store.dispatch(Xe([i]))):this.wasMultiSelected=!1}onUp(e){const{target:t,shiftKey:n}=e,i=Ne(this.store,t);i&&i.selectable?n?this.wasMultiSelected&&i.selected&&this.store.dispatch(Je(i)):this.store.dispatch(Xe([i])):n||this.store.dispatch(Ke()),this.wasMultiSelected=!1}onMove(e){const{mouseX:t,mouseY:n,target:i}=e,o=Ne(this.store,i);this.store.dispatch(it(_e(t,n,this.store.getState().mouse.scrollData,o)))}onDrag(e){}onStartDrag(e){const t=Ne(this.store,e.target);if(t){const e=this.store.getState().mouse.cursorData;Ae(t.resizeable,e)?this.store.dispatch(He(fe.RESIZE)):t.draggable?this.store.dispatch(He(fe.DRAG)):this.store.dispatch(He(fe.DRAW))}else this.store.dispatch(He(fe.DRAW))}onDrop(e){this.store.dispatch(He(fe.NONE))}}class ht{constructor(e,t,n,i){this.stageDocument=e,this.overlayDocument=t,this.store=n,this.hooks=i,this.isRefreshing=!1,this.state=[],this.prevState=[],this.unsubscribeAll=[],this.unsubscribeAll.push(n.subscribe(((e,t)=>this.onStateChanged(e,t)),(e=>e.selectables)),n.subscribe(((e,t)=>this.onUiChanged(e,t)),(e=>e.ui)))}onUiChanged(e,t){this.isRefreshing=e.refreshing}cleanup(){this.unsubscribeAll.forEach((e=>e()))}onStateChanged(e=this.state,t=this.prevState){if(this.state=e,!this.isRefreshing){this.prevState=t;const n=(e,n)=>{const i=t.find((e=>n.el===e.el));return!i||JSON.stringify(i[e])!==JSON.stringify(n[e])},i=t.filter((t=>!e.find((e=>e.el===t.el)))),o=e.filter((e=>n("metrics",e)));i.length+o.length>0&&this.onMetrics(o,i);const r=e.filter((e=>n("selected",e)));r.length>0&&this.onSelection(r);const s=e.filter((e=>n("translation",e)));s.length>0&&this.onTranslation(s)}}onMetrics(e,t){e.forEach((e=>{e.preventMetrics||we(e.el,e.metrics,e.useMinHeight)})),this.hooks.onChange&&this.hooks.onChange(e.concat(t))}onSelection(e){this.hooks.onSelect&&this.hooks.onSelect(e)}onTranslation(e){e.forEach((e=>{e.translation?(e.el.style.transform=`translate(${e.translation.x}px, ${e.translation.y}px)`,e.el.style.zIndex="99999999","static"===e.metrics.position&&(e.el.style.top="0",e.el.style.left="0",e.el.style.position="relative")):(e.el.style.transform="",e.el.style.zIndex="",e.el.style.position="")}))}}const pt=new Map;function ft(e){if(!pt.has(e))throw new Error("DOM observer not found for this DOM element");{const{mutationObserver:t,resizeObserver:n}=pt.get(e);n.disconnect(),t.disconnect(),t.takeRecords(),pt.delete(e)}}class mt{constructor(e,t){this.cbk=t,this.isRefreshing=!1,this.state=[],this.prevState=[],this.unsubscribeAll=[],this.unsubscribeAll.push(e.subscribe(((e,t)=>this.onStateChanged(e,t)),(e=>e.selectables)),e.subscribe(((e,t)=>this.onUiChanged(e,t)),(e=>e.ui)))}onUiChanged(e,t){this.isRefreshing=e.refreshing}cleanup(){this.unsubscribeAll.forEach((e=>e())),Array.from(pt.keys()).forEach((e=>ft(e)))}onRemoved(e){ft(e.el)}onAdded(e){!function(e,t){if("undefined"==typeof ResizeObserver)throw new Error("ResizeObserver is not supported by your browser. The drag and drop features will not work properly");pt.has(e)&&ft(e);const n=new ResizeObserver(t);n.observe(e,{});const i=new MutationObserver(t);pt.set(e,{mutationObserver:i,resizeObserver:n})}(e.el,(t=>this.onChanged(e,t)))}onChanged(e,t){this.cbk(e,t)}onStateChanged(e=this.state,t=this.prevState){this.state=e,this.isRefreshing||(this.prevState=t,e.filter((e=>!t.find((t=>t.el===e.el)))).forEach((e=>this.onAdded(e))),t.filter((t=>!e.find((e=>e.el===t.el)))).forEach((e=>this.onRemoved(e))))}}class gt{constructor(e,t,n,i){this.stageDocument=e,this.overlayDocument=t,this.hooks=i,this.unsubscribeAll=[],this.unsubscribeAll.push(n.subscribe(((e,t)=>this.onStateChanged(e,t)),(e=>e.mouse)))}cleanup(){this.unsubscribeAll.forEach((e=>e()))}onStateChanged(e,t){e.scrollData.x===t.scrollData.x&&e.scrollData.y===t.scrollData.y||Te(this.stageDocument,e.scrollData)}}class bt{constructor(e,t,n,i){this.stageDocument=e,this.overlayDocument=t,this.store=n,this.hooks=i,this.debounceScrollPending=!1,this.selection=n.getState().selectables,this.selection=this.selection.filter((e=>e.selected)),this.unsubsribe=n.subscribe(((e,t)=>this.update(e.mouseData)),(e=>e.mouse)),this.unsubsribeScroll=this.store.subscribe(((e,t)=>this.onScroll(e,t)),(e=>e.mouse.scrollData))}update(e){}release(){this.unsubsribeScroll(),this.unsubsribe()}debounceScroll(e){this.debounceScrollPending||setTimeout((()=>{this.debounceScrollPending=!1,this.store.dispatch(tt(this.debounceScrollData))}),100),this.debounceScrollPending=!0,this.debounceScrollData=e}onScroll(e,t){const n={x:e.x-t.x,y:e.y-t.y},i=this.store.getState().mouse.mouseData;this.update({...i,movementX:n.x,movementY:n.y})}}class yt extends bt{constructor(e,t,n,i){super(e,t,n,i),this.cursorData=this.store.getState().mouse.cursorData,this.selection=this.selection.filter((e=>Ae(e.resizeable,this.cursorData))),this.hooks.onStartResize&&this.hooks.onStartResize(this.selection)}update(e){super.update(e),this.selection=this.selection.map((t=>{const n={...t.metrics.clientRect},i={...t.metrics.computedStyleRect};switch(this.cursorData.x){case"":break;case"left":i.width-=e.movementX,n.width-=e.movementX;break;case"right":i.width+=e.movementX,n.width+=e.movementX;break;default:throw new Error("unknown direction "+this.cursorData.x)}if(""!=this.cursorData.y&&(e.shiftKey&&""!=this.cursorData.x?(i.height=i.width*t.metrics.proportions,n.height=n.width*t.metrics.proportions):"top"===this.cursorData.y?(i.height-=e.movementY,n.height-=e.movementY):(i.height+=e.movementY,n.height+=e.movementY)),"left"===this.cursorData.x&&(i.left+=e.movementX,n.left+=e.movementX),"top"===this.cursorData.y&&(i.top+=e.movementY,n.top+=e.movementY),""!==this.cursorData.x){const e=t.el.style.width;t.el.style.width=Math.max(20,i.width)+"px";const o=be(t.el),r=n.width-o.width;i.width-=r,n.width-=r,"left"===this.cursorData.x&&(i.left+=r,n.left+=r),t.el.style.width=e}if(""!==this.cursorData.y){const e=t.useMinHeight?"minHeight":"height",o=t.el.style[e];t.el.style[e]=Math.max(20,i.height)+"px";const r=be(t.el),s=n.height-r.height;i.height-=s,n.height-=s,"top"===this.cursorData.y&&(i.top+=s,n.top+=s),t.el.style[e]=o}return i.right=i.left+i.width,n.right=n.left+n.width,i.bottom=i.top+i.height,n.bottom=n.top+n.height,{...t,metrics:{...t.metrics,clientRect:n,computedStyleRect:i}}})),this.store.dispatch(ct(this.selection));const t=this.store.getState().mouse.scrollData,n={top:e.mouseY+t.y,left:e.mouseX+t.x,bottom:e.mouseY+t.y,right:e.mouseX+t.x,height:0,width:0},i=ve(this.stageDocument,n);i.x===t.x&&i.y===t.y||this.debounceScroll(i),this.hooks.onResize&&this.hooks.onResize(this.selection,n)}release(){super.release();const e=this.store.getState(),t=Ne(this.store,e.mouse.mouseData.target);this.store.dispatch(it(_e(e.mouse.mouseData.mouseX,e.mouse.mouseData.mouseY,e.mouse.scrollData,t))),setTimeout((()=>{this.store.dispatch(ze(!0));const e=this.store.getState().selectables.map((e=>({...e,metrics:xe(e.el)})));this.store.dispatch(ct(e)),this.store.dispatch(ze(!1)),this.hooks.onResizeEnd&&this.hooks.onResizeEnd(this.selection)}),0)}}class vt extends bt{constructor(e,t,n,i){super(e,t,n,i),this.hooks.onStartDraw&&this.hooks.onStartDraw();const o=n.getState(),r=Ce(this.stageDocument);this.initialX=o.mouse.mouseData.mouseX+r.x,this.initialY=o.mouse.mouseData.mouseY+r.y,this.regionMarker=t.createElement("div"),this.regionMarker.classList.add("region-marker"),this.moveRegion({left:-999,top:-999,right:-999,bottom:-999,width:0,height:0}),t.body.appendChild(this.regionMarker)}update(e){super.update(e);const t=Ce(this.stageDocument),n={left:Math.min(this.initialX,e.mouseX+t.x),top:Math.min(this.initialY,e.mouseY+t.y),right:Math.max(this.initialX,e.mouseX+t.x),bottom:Math.max(this.initialY,e.mouseY+t.y),height:Math.abs(this.initialY-(e.mouseY+t.y)),width:Math.abs(this.initialX-(e.mouseX+t.x))};this.moveRegion(n);let i=this.store.getState().selectables.filter((e=>e.selectable&&e.draggable&&e.metrics.clientRect.left<n.right&&e.metrics.clientRect.right>n.left&&e.metrics.clientRect.top<n.bottom&&e.metrics.clientRect.bottom>n.top));this.selection.filter((e=>!i.find((t=>e.el===t.el)))).forEach((e=>{this.store.dispatch(Je(e))})),i.filter((e=>!this.selection.find((t=>e.el===t.el)))).forEach((e=>{this.store.dispatch(Ze(e))})),this.selection=i;const o=this.store.getState().mouse.scrollData,r=ve(this.stageDocument,n);r.x===o.x&&r.y===o.y||this.debounceScroll(r),this.hooks.onDraw&&this.hooks.onDraw(this.selection,n)}release(){super.release(),this.regionMarker.parentNode.removeChild(this.regionMarker),this.hooks.onDrawEnd&&this.hooks.onDrawEnd(),this.selection=[]}moveRegion({left:e,top:t,width:n,height:i}){this.regionMarker.style.width=n+"px",this.regionMarker.style.height=i+"px",this.regionMarker.style.transform=`translate(${e}px, ${t}px)`}}class Et extends bt{constructor(e,t,n,i){super(e,t,n,i),this.selection=this.selection.filter((e=>e.draggable)).filter((e=>!De(n,e.el))),this.hooks.onStartDrag&&this.hooks.onStartDrag(this.selection),this.positionMarker=this.stageDocument.createElement("div"),this.positionMarker.classList.add("position-marker"),this.positionMarker.style.backgroundColor="rgba(0, 0, 0, .5)",this.positionMarker.style.display="inline-block",this.positionMarker.style.border="1px solid rgba(255, 255, 255, .5)",this.positionMarker.style.position="absolute",this.positionMarker.style.minWidth="1px",this.positionMarker.style.minHeight="1px",this.selection=this.selection.map((e=>({...e,preventMetrics:!0,translation:{x:0,y:0}}))),this.store.dispatch(ct(this.selection))}update(e){if(super.update(e),0===this.selection.length)return;this.positionMarker.parentNode&&this.positionMarker.parentNode.removeChild(this.positionMarker),this.initialMouse||(this.initialMouse={x:e.mouseX-e.movementX,y:e.mouseY-e.movementY}),this.initialScroll||(this.initialScroll={...this.store.getState().mouse.scrollData});const t={...this.store.getState().mouse.scrollData},n=t.x-this.initialScroll.x,i=t.y-this.initialScroll.y,{movementX:o,movementY:r}=(()=>{const t=this.selection[0].translation,o=-t.x+(e.mouseX-this.initialMouse.x),r=-t.y+(e.mouseY-this.initialMouse.y);if(e.shiftKey&&this.selection.length>0){const{x:n,y:i}={x:e.mouseX-this.initialMouse.x,y:e.mouseY-this.initialMouse.y},s=Math.atan2(i,n);return Math.abs(Math.sin(s))<Math.abs(Math.cos(s))?{movementX:o,movementY:-t.y}:{movementX:-t.x,movementY:r}}return{movementX:o+n,movementY:r+i}})(),s=ye(this.selection),a=this.selection.some((e=>"static"===e.metrics.position)),l=!this.store.getState().ui.enableSticky||a?{top:null,left:null,bottom:null,right:null}:this.store.getState().selectables.filter((e=>!e.selected&&e.selectable&&"static"!==e.metrics.position)).reduce(((e,t)=>(Math.abs(t.metrics.clientRect.top-(s.top+r))<5&&(e.top=t.metrics.clientRect.top-s.top),Math.abs(t.metrics.clientRect.left-(s.left+o))<5&&(e.left=t.metrics.clientRect.left-s.left),Math.abs(t.metrics.clientRect.bottom-(s.bottom+r))<5&&(e.bottom=t.metrics.clientRect.bottom-s.bottom),Math.abs(t.metrics.clientRect.right-(s.right+o))<5&&(e.right=t.metrics.clientRect.right-s.right),Math.abs(t.metrics.clientRect.bottom-(s.top+r))<5&&(e.top=t.metrics.clientRect.bottom-s.top),Math.abs(t.metrics.clientRect.right-(s.left+o))<5&&(e.left=t.metrics.clientRect.right-s.left),Math.abs(t.metrics.clientRect.top-(s.bottom+r))<5&&(e.bottom=t.metrics.clientRect.top-s.bottom),Math.abs(t.metrics.clientRect.left-(s.right+o))<5&&(e.right=t.metrics.clientRect.left-s.right),e)),{top:null,left:null,bottom:null,right:null}),c=null===l.left?null==l.right?o:l.right:l.left,u=null===l.top?null==l.bottom?r:l.bottom:l.top;this.selection=this.selection.map((e=>Re(e,!1,c,u))),this.selection=this.selection.map((t=>{let n=Me(this.stageDocument,this.store,this.hooks,e.mouseX,e.mouseY).filter((e=>this.hooks.canDrop(t.el,e)))[0];if(n){if("static"===t.metrics.position){let i=this.findNearestPosition(n,e.mouseX,e.mouseY);return this.updateDestinationNonAbsolute(t,i)}return this.updateDestinationAbsolute(t,n)}return t}));const d=this.store.getState().selectables.filter((e=>De(this.store,e.el))).map((e=>Re(e,!0,o,r)));this.store.dispatch(ct(this.selection.concat(d))),this.store.dispatch((e=>({type:Ue,sticky:e}))({top:null!==l.top,left:null!==l.left,bottom:null!==l.bottom,right:null!==l.right}));const h=this.store.getState().mouse.scrollData,p=ve(this.stageDocument,{top:e.mouseY+h.y-30,bottom:e.mouseY+h.y+30,left:e.mouseX+h.x-30,right:e.mouseX+h.x+30,height:60,width:60});p.x===h.x&&p.y===h.y||this.debounceScroll(p),this.hooks.onDrag&&this.hooks.onDrag(this.selection,s)}release(){super.release(),this.initialMouse=null,this.selection=this.selection.map((e=>{if(e.dropZone&&e.dropZone.parent)if(e.dropZone.nextElementSibling){if(e.dropZone.nextElementSibling!==e.el.nextElementSibling&&e.dropZone.nextElementSibling!==e.el)try{e.el.parentNode.removeChild(e.el),e.dropZone.parent.insertBefore(e.el,e.dropZone.nextElementSibling)}catch(e){console.error(e)}}else(e.dropZone.parent!==e.el.parentElement||e.el.nextElementSibling)&&(e.el.parentNode.removeChild(e.el),e.dropZone.parent.appendChild(e.el));let t=e.metrics;if("static"!==e.metrics.position){const n=e.el.style.top,i=e.el.style.left,o=e.el.style.transform,r=e.el.style.position;e.el.style.top=e.metrics.computedStyleRect.top+"px",e.el.style.left=e.metrics.computedStyleRect.left+"px",e.el.style.transform="",e.el.style.position="";const s=be(e.el),a={top:e.metrics.computedStyleRect.top+(e.metrics.clientRect.top-s.top),left:e.metrics.computedStyleRect.left+(e.metrics.clientRect.left-s.left),right:0,bottom:0};e.el.style.top=n,e.el.style.left=i,e.el.style.transform=o,e.el.style.position=r,a.right=a.left+e.metrics.computedStyleRect.width,a.bottom=a.top+e.metrics.computedStyleRect.height,t={...e.metrics,computedStyleRect:{...e.metrics.computedStyleRect,...a}}}return{...e,preventMetrics:!1,translation:null,metrics:t}})),this.positionMarker.parentNode&&this.positionMarker.parentNode.removeChild(this.positionMarker),this.store.dispatch(ct(this.selection),(()=>{this.store.dispatch(ze(!0));const e=this.store.getState().selectables.map((e=>({...e,metrics:xe(e.el)})));this.store.dispatch(ct(e)),this.store.dispatch(ze(!1));const t=ye(this.selection),n=this.store.getState().mouse.scrollData,i=ve(this.stageDocument,t);i.x===n.x&&i.y===n.y||this.debounceScroll(i),this.hooks.onDrop&&this.hooks.onDrop(this.selection)}))}updateDestinationAbsolute(e,t){return null===t?(console.info("no dropZone under the mouse found, how is it poussible!"),e):{...e,dropZone:{...e.dropZone,parent:t}}}updateDestinationNonAbsolute(e,t){return null===t.distance?(console.info("no nearest position found, how is it poussible?"),e):(this.markPosition(t),{...e,dropZone:t})}markPosition(e){e.nextElementSibling?e.nextElementSibling.parentNode.insertBefore(this.positionMarker,e.nextElementSibling):e.parent&&e.parent.appendChild(this.positionMarker);let t=be(this.positionMarker),n=this.positionMarker.previousElementSibling?be(this.positionMarker.previousElementSibling):null,i=this.positionMarker.nextElementSibling?be(this.positionMarker.nextElementSibling):null;(!n||t.top>=n.bottom)&&(!i||t.bottom<=i.top)?(this.positionMarker.style.width=n?n.width+"px":i?i.width+"px":"100%",this.positionMarker.style.height="0"):(this.positionMarker.style.height=n?n.height+"px":i?i.height+"px":"100%",this.positionMarker.style.width="0")}findNearestPosition(e,t,n){let i=this.stageDocument.createElement("div");i.classList.add("phantom");let o={nextElementSibling:null,distance:null,parent:null};for(let r=0;r<e.children.length;r++){let s=e.children[r];e.insertBefore(i,s);let a=this.getDistance(i,t,n);(null===o.distance||o.distance>a)&&(o.nextElementSibling=s,o.parent=e,o.distance=a),e.removeChild(i)}e.appendChild(i);let r=this.getDistance(i,t,n);return(null===o.distance||o.distance>r)&&(o.nextElementSibling=null,o.parent=e,o.distance=r),e.removeChild(i),o.nextElementSibling===this.positionMarker&&(o.nextElementSibling=this.positionMarker.nextElementSibling),o}getDistance(e,t,n){const i=e.getBoundingClientRect(),o=i.left+i.width/2,r=i.top+i.height/2;return Math.sqrt((o-t)*(o-t)+(r-n)*(r-n))}}class St{constructor(e,t,n,i){this.stageDocument=e,this.overlayDocument=t,this.store=n,this.hooks=i,this.unsubscribeAll=[],this.handler=null,this.unsubscribeAll.push(n.subscribe(((e,t)=>this.onUiStateChanged(e,t)),(e=>e.ui)))}cleanup(){this.unsubscribeAll.forEach((e=>e()))}onUiStateChanged(e,t){if(t.mode!==e.mode)switch(this.handler&&(this.handler.release(),this.handler=null),this.overlayDocument.body.classList.remove(e.mode!==fe.DRAG?"dragging-mode":"not-dragging-mode",e.mode!==fe.RESIZE?"resizing-mode":"not-resizing-mode",e.mode!==fe.DRAW?"drawing-mode":"not-drawing-mode"),this.overlayDocument.body.classList.add(e.mode===fe.DRAG?"dragging-mode":"not-dragging-mode",e.mode===fe.RESIZE?"resizing-mode":"not-resizing-mode",e.mode===fe.DRAW?"drawing-mode":"not-drawing-mode"),e.mode){case fe.NONE:break;case fe.DRAG:this.handler=new Et(this.stageDocument,this.overlayDocument,this.store,this.hooks);break;case fe.RESIZE:this.handler=new yt(this.stageDocument,this.overlayDocument,this.store,this.hooks);break;case fe.DRAW:this.handler=new vt(this.stageDocument,this.overlayDocument,this.store,this.hooks)}}}var wt,xt,Ct,Tt,kt=n(7121),It=function(){return Math.random().toString(36).substring(7).split("").join(".")},At={INIT:"@@redux/INIT"+It(),REPLACE:"@@redux/REPLACE"+It(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+It()}};function _t(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function Ot(e,t,n){var i;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(Ot)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,r=t,s=[],a=s,l=!1;function c(){a===s&&(a=s.slice())}function u(){if(l)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return r}function d(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(l)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return c(),a.push(e),function(){if(t){if(l)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,c();var n=a.indexOf(e);a.splice(n,1),s=null}}}function h(e){if(!_t(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(l)throw new Error("Reducers may not dispatch actions.");try{l=!0,r=o(r,e)}finally{l=!1}for(var t=s=a,n=0;n<t.length;n++)(0,t[n])();return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,h({type:At.REPLACE})}function f(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(u())}return n(),{unsubscribe:t(n)}}})[kt.Z]=function(){return this},e}return h({type:At.INIT}),(i={dispatch:h,subscribe:d,getState:u,replaceReducer:p})[kt.Z]=f,i}function Lt(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function Nt(e){for(var t=Object.keys(e),n={},i=0;i<t.length;i++){var o=t[i];"function"==typeof e[o]&&(n[o]=e[o])}var r,s=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:At.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:At.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+At.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){r=e}return function(e,t){if(void 0===e&&(e={}),r)throw r;for(var i=!1,o={},a=0;a<s.length;a++){var l=s[a],c=n[l],u=e[l],d=c(u,t);if(void 0===d){var h=Lt(l,t);throw new Error(h)}o[l]=d,i=i||d!==u}return(i=i||s.length!==Object.keys(e).length)?o:e}}function Dt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Pt(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function Mt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Pt(n,!0).forEach((function(t){Dt(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Pt(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Rt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}class Bt{constructor(){this.store=Bt.createStore()}[Symbol.observable](){return this}static createStore(){return Ot(Nt({selectables:(e,t)=>((e=[],t)=>{switch(t.type){case at:return[...e,t.selectable];case st:return[];case lt:return e.filter((e=>e.id!==t.selectable.id));case rt:return e.map((e=>t.selectables.find((t=>t.id===e.id))||e));default:return e}})(((e=[],t)=>{switch(t.type){case"SELECTION_TOGGLE":return e.map((e=>e===t.selectable?{...e,selected:!e.selected}:e));case Ye:return e.map((e=>e===t.selectable?{...e,selected:!1}:e));case Ge:return e.map((e=>({...e,selected:!1})));case Ve:return e.map((e=>e===t.selectable?{...e,selected:!0}:e));case Fe:return e.map((e=>t.selectables.includes(e)?{...e,selected:!0}:{...e,selected:!1}));default:return e}})(e,t),t),ui:(e,t)=>((e=(()=>({mode:fe.NONE,refreshing:!1,catchingEvents:!0,sticky:{top:null,left:null,bottom:null,right:null},enableSticky:!0}))(),t)=>{switch(t.type){case We:return{...e,mode:t.mode};case je:return{...e,refreshing:t.refreshing};case qe:return{...e,catchingEvents:t.catchingEvents};case Ue:return{...e,sticky:t.sticky};case $e:return{...e,enableSticky:t.enableSticky};default:return e}})(e,t),mouse:(e,t)=>((e={scrollData:{x:0,y:0},cursorData:{x:"",y:"",cursorType:""},mouseData:{movementX:0,movementY:0,mouseX:0,mouseY:0,shiftKey:!1,target:null,hovered:[]}},t)=>{switch(t.type){case et:return{...e,scrollData:t.scrollData};case nt:return{...e,cursorData:t.cursorData};case ot:return{...e,mouseData:t.mouseData};default:return e}})(e,t)}),function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),i=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return i.apply(void 0,arguments)}},r=t.map((function(e){return e(o)}));return Mt({},n,{dispatch:i=Rt.apply(void 0,r)(n.dispatch)})}}}(Bt.preventDispatchDuringRedraw))}static preventDispatchDuringRedraw({getState:e}){return e=>t=>t.preventDispatch?(console.warn("prevent dispatch",t),null):e(t)}subscribe(e,t=(e=>e)){let n=t(this.store.getState());return this.store.subscribe((()=>{let i=t(this.store.getState());if(i!==n){let t=n;n=i,e(n,t)}}))}clone(e){let t;if(t=e instanceof Array?e.slice():e instanceof Object?{...e}:e,e===t)throw"not cloned";return t}dispatch(e,t=null){return this.store.dispatch(e),t&&t(),null}getState(){return this.store.getState()}replaceReducer(){throw new Error("not implemented")}}class Wt{constructor(e,t,n){this.iframe=e,this.overlay=t,this.store=n,this.boxes=[],this.unsubscribeAll=[],this.isRefreshing=!1,this.unsubscribeAll.push(Be(window,"resize",(()=>this.resizeOverlay())),n.subscribe((e=>this.update(e)),(e=>e.selectables)),n.subscribe(((e,t)=>this.onMouseChanged(e,t)),(e=>e.mouse)),n.subscribe(((e,t)=>this.onUiChanged(e,t)),(e=>e.ui))),this.resizeOverlay(),this.overlay.contentDocument.body.style.overflow="auto",e.contentDocument.body.style.overflow="scroll",this.overlay.contentDocument.head.innerHTML="\n      <style>\n        body {\n          overflow: scroll;\n          margin: -5px;\n        }\n\n        body.dragging-mode .box.not-selected.not-aboutToDrop,\n        body.resizing-mode .box.not-selected { display: none; }\n\n        .aboutToDrop, .selected.box, .box.target {\n          border: 1px solid rgba(0, 0, 0, .5);\n        }\n        .box.aboutToDrop:before,\n        .box.selected:before,\n        .box.target:before {\n          content: ' ';\n          position: absolute;\n          z-index: -1;\n          top: 1px;\n          left: 1px;\n          right: 1px;\n          bottom: 1px;\n          border: 1px solid rgba(255, 255, 255, .3);\n        }\n        .not-selectable,\n        .not-selected .handle { display: none; }\n\n        .handle {\n          position: absolute;\n          z-index: 999;\n          border: 1px solid rgba(0, 0, 0, .5);\n          background-color: rgba(255, 255, 255, 1);\n          width: 5px;\n          height: 5px;\n          border-radius: 2.5px;\n        }\n        .handle-nw { top: -4px; left: -4px; }\n        .not-resizeable-nw .handle-nw { display: none; }\n\n        .handle-ne { top: -4px; right: -4px; }\n        .not-resizeable-ne .handle-ne { display: none; }\n\n        .handle-sw { bottom: -4px; left: -4px; }\n        .not-resizeable-sw .handle-sw { display: none; }\n\n        .handle-se { bottom: -4px; right: -4px; }\n        .not-resizeable-se .handle-se { display: none; }\n\n        .region-marker {\n          background-color: rgba(0, 0, 0, .1);\n          border: 1px solid rgba(255, 255, 255, .5);\n          display: flex;\n          position: absolute;\n          left: 0;\n          top: 0;\n          min-width: 1px;\n          min-height: 1px;\n        }\n\n        .stycky-left { border-left-color: red !important; }\n        .stycky-top { border-top-color: red !important; }\n        .stycky-right { border-right-color: red !important; }\n        .stycky-bottom { border-bottom-color: red !important; }\n    "}static async createUi(e,t){return new Promise(((n,i)=>{const o=Se(e),r=o.createElement("iframe");o.body.appendChild(r),"complete"===r.contentDocument.readyState?n(new Wt(e,r,t)):r.contentWindow.onload=()=>{n(new Wt(e,r,t))}}))}resizeOverlay(){this.resize()}cleanup(){this.unsubscribeAll.forEach((e=>e())),this.overlay.parentElement.removeChild(this.overlay),this.overlay=null}resize(){const e=xe(this.iframe),t=this.iframe.contentWindow.getComputedStyle(this.iframe).getPropertyValue("z-index");e.position="absolute",we(this.overlay,e,!1,!0),this.overlay.style.backgroundColor="transparent",this.overlay.style.zIndex=((parseInt(t)||0)+1).toString(),this.overlay.style.border="none"}onUiChanged(e,t){this.isRefreshing=e.refreshing,e.catchingEvents===t.catchingEvents&&e.mode===t.mode||(this.overlay.style.pointerEvents=e.catchingEvents?"":"none",e.mode===fe.HIDE?(this.overlay.style.top="-999999px",this.overlay.style.left="-999999px",this.overlay.style.width="0",this.overlay.style.height="0"):this.resizeOverlay())}onMouseChanged(e,t){if((e.scrollData.x!==t.scrollData.x||e.scrollData.y!==t.scrollData.y)&&(Te(this.overlay.contentDocument,e.scrollData),this.store.getState().ui.mode!==fe.HIDE)){Te(this.iframe.contentDocument,e.scrollData);const t=Ce(this.iframe.contentDocument);e.scrollData.x===t.x&&e.scrollData.y===t.y||Te(this.overlay.contentDocument,t)}e.cursorData.cursorType!==t.cursorData.cursorType&&(this.overlay.contentDocument.body.style.cursor=e.cursorData.cursorType)}update(e){if(!this.isRefreshing){const{scrollWidth:t,scrollHeight:n}=this.iframe.contentWindow.document.scrollingElement;this.overlay.contentDocument.body.style.width=t+"px",this.overlay.contentDocument.body.style.height=n+"px",this.boxes.filter((t=>!e.find((e=>t.selectable.el===e.el)))).forEach((e=>e.ui.parentElement.removeChild(e.ui))),this.boxes=this.boxes.filter((t=>e.find((e=>t.selectable.el===e.el)))),this.boxes=this.boxes.concat(e.filter((e=>!this.boxes.find((t=>t.selectable.el===e.el)))).map((e=>({selectable:e,ui:this.overlay.contentDocument.body.appendChild(this.createBoxUi())}))));const i=this.store.getState().ui.mode===fe.DRAG?e.filter((e=>e.dropZone&&e.dropZone.parent)).map((e=>e.dropZone.parent)):[];this.boxes.map((t=>this.updateBox(t,e.find((e=>e.el===t.selectable.el)),i)))}}createBoxUi(){const e=this.overlay.contentDocument.createElement("div");return e.innerHTML="\n      <div class='handle handle-nw'></div>\n      <div class='handle handle-ne'></div>\n      <div class='handle handle-sw'></div>\n      <div class='handle handle-se'></div>\n    ",e}updateBox(e,t,n){const i=t.selected?this.store.getState().ui.sticky:{top:null,left:null,bottom:null,right:null},o=!!n.find((e=>e===t.el)),r=this.store.getState().mouse.mouseData.target===e.selectable.el;return e.selectable=t,we(e.ui,{...e.selectable.metrics,position:"absolute",padding:{top:0,left:0,bottom:0,right:0},margin:{top:0,left:0,bottom:0,right:0},border:{top:1,left:1,bottom:1,right:1}},!1,!0),e.ui.classList.remove(e.selectable.selected?"not-selected":"selected",e.selectable.selectable?"not-selectable":"selectable",e.selectable.draggable?"not-draggable":"draggable",e.selectable.hovered?"not-hover":"hover",r?"not-target":"target",e.selectable.resizeable.top||e.selectable.resizeable.left?"not-resizeable-nw":"resizeable-nw",e.selectable.resizeable.top||e.selectable.resizeable.right?"not-resizeable-ne":"resizeable-ne",e.selectable.resizeable.bottom||e.selectable.resizeable.left?"not-resizeable-sw":"resizeable-sw",e.selectable.resizeable.bottom||e.selectable.resizeable.right?"not-resizeable-se":"resizeable-se",e.selectable.isDropZone?"not-isDropZone":"isDropZone",i.left?"not-stycky-left":"stycky-left",i.top?"not-stycky-top":"stycky-top",i.right?"not-stycky-right":"stycky-right",i.bottom?"not-stycky-bottom":"stycky-bottom",o?"not-aboutToDrop":"aboutToDrop"),e.ui.classList.add("box",e.selectable.selected?"selected":"not-selected",e.selectable.selectable?"selectable":"not-selectable",e.selectable.draggable?"draggable":"not-draggable",e.selectable.hovered?"hover":"not-hover",r?"target":"not-target",e.selectable.resizeable.top&&e.selectable.resizeable.left?"resizeable-nw":"not-resizeable-nw",e.selectable.resizeable.top&&e.selectable.resizeable.right?"resizeable-ne":"not-resizeable-ne",e.selectable.resizeable.bottom&&e.selectable.resizeable.left?"resizeable-sw":"not-resizeable-sw",e.selectable.resizeable.bottom&&e.selectable.resizeable.right?"resizeable-se":"not-resizeable-se",e.selectable.isDropZone?"isDropZone":"not-isDropZone",i.left?"stycky-left":"not-stycky-left",i.top?"stycky-top":"not-stycky-top",i.right?"stycky-right":"not-stycky-right",i.bottom?"stycky-bottom":"not-stycky-bottom",o?"aboutToDrop":"not-aboutToDrop"),e}hideUi(e){this.overlay.contentDocument.body.style.display=e?"none":""}}class Ht{constructor(e,t,n={}){var i;this.unsubscribeAll=[],this.waitingListeners=[],window.Stage=Ht,this.iframe=e,this.contentWindow=this.iframe.contentWindow,this.contentDocument=this.iframe.contentDocument,this.hooks={...n,getId:n.getId||(e=>{if(e.hasAttribute("data-stage-id"))return e.getAttribute("data-stage-id");const t=Math.round(999999*Math.random()).toString();return e.setAttribute("data-stage-id",t),t}),isSelectable:n.isSelectable||(e=>e.classList.contains("selectable")),isDraggable:n.isDraggable||(e=>e.classList.contains("draggable")),isDropZone:n.isDropZone||(e=>e.classList.contains("droppable")),isResizeable:n.isResizeable||(e=>e.classList.contains("resizeable")),useMinHeight:n.useMinHeight||(e=>!0),canDrop:n.canDrop||((e,t)=>!0)},(i=this.contentWindow).document.elementsFromPoint||(i.document.elementsFromPoint=function(e,t){return Array.from(i.document.body.querySelectorAll("*")).filter((function(n){var i=n.getBoundingClientRect();return i.left<=e&&e<=i.right&&i.top<=t&&t<=i.bottom}))}),this.store=new Bt,Wt.createUi(e,this.store).then((e=>{this.ui=e,this.selectablesObserver=new ht(this.contentDocument,this.ui.overlay.contentDocument,this.store,this.hooks),this.domObserver=new mt(this.store,((e,t)=>this.domObserverCallback(e,t))),this.uiObserver=new St(this.contentDocument,this.ui.overlay.contentDocument,this.store,this.hooks),this.mouseObserver=new gt(this.contentDocument,this.ui.overlay.contentDocument,this.store,this.hooks),this.mouse=new dt(this.contentWindow,this.ui.overlay.contentWindow,this.store,this.hooks);const n=new Qe(this.ui.overlay.contentWindow,this.store,this.hooks);this.unsubscribeAll.push((()=>this.selectablesObserver.cleanup()),(()=>this.domObserver.cleanup()),(()=>this.uiObserver.cleanup()),(()=>this.mouseObserver.cleanup()),(()=>this.mouse.cleanup()),(()=>n.cleanup()),Be(window,"resize",(()=>this.updateMetrics()))),this.reset(t),this.waitingListeners.forEach((e=>e())),this.waitingListeners=[]}))}domObserverCallback(e,t){this.updateMetrics(t.map((e=>e.target)).concat(e.el))}updateMetrics(e=null){const t=e?e.map((e=>this.getState(e))).filter((e=>!!e)):this.store.getState().selectables,n=this.store.getState().selectables.filter((e=>this.getParents(e.el).some((e=>t.some((t=>t.el===e)))))),i=[...new Set(t.concat(n))];if(i.length>0){const e=this.store.getState().ui.refreshing;e||this.store.dispatch(ze(!0)),this.store.dispatch(ct(i.map((e=>({...e,metrics:xe(e.el)}))))),e||this.store.dispatch(ze(!1))}}getParents(e){return e?this.getParents(e.parentElement).concat(e.parentElement?[e.parentElement]:[]):[]}startDrag(){const e=ye(this.getSelection());this.mouse.mouseMode=ut.DRAGGING,this.store.dispatch(He(fe.DRAG)),this.uiObserver.handler.initialMouse={x:e.left+e.width/2-this.iframe.contentWindow.scrollX,y:e.top+e.height/2-this.iframe.contentWindow.scrollY}}cleanup(){this.unsubscribeAll.forEach((e=>e())),this.ui.cleanup(),this.ui=null}get catchingEvents(){return this.store.getState().ui.catchingEvents}set catchingEvents(e){this.store.dispatch({type:qe,catchingEvents:e})}get visible(){return this.store.getState().ui.mode!==fe.HIDE}set visible(e){this.store.dispatch(He(e?fe.NONE:fe.HIDE)),this.setScroll({x:this.iframe.contentWindow.scrollX,y:this.iframe.contentWindow.scrollY})}get enableSticky(){return this.store.getState().ui.enableSticky}set enableSticky(e){this.store.dispatch({type:$e,enableSticky:e})}resizeWindow(){this.ui.resizeOverlay()}subscribeMouseEvent(e,t){let n;return this.mouse?this.mouse.subscribeMouseEvent(e,t):(this.waitingListeners.push((()=>{n=this.subscribeMouseEvent(e,t)})),()=>n())}hideUi(e){this.ui.hideUi(e)}reset(e){const t=this.store.getState().ui.refreshing;t||this.store.dispatch(ze(!0)),this.store.dispatch({type:st}),Array.from(e).forEach((e=>this.addElement(e,!1))),t||this.store.dispatch(ze(!1)),this.ui.update(this.store.getState().selectables),this.domObserver.onStateChanged()}getSelection(){return Le(this.store)}setSelection(e){this.store.dispatch(Xe(e.map((e=>this.getState(e)))))}getStateById(e){return this.store.getState().selectables.find((t=>t.id===e))}getState(e){return Oe(this.store,e)}setState(e,t){const n=this.getState(e);this.store.dispatch(ct([{...n,...t}]))}addElement(e,t=!0){const n={id:this.hooks.getId(e),el:e,selected:!1,hovered:!1,selectable:this.hooks.isSelectable(e),draggable:this.hooks.isDraggable(e),resizeable:this.getElementResizeable(e),isDropZone:this.hooks.isDropZone(e),useMinHeight:this.hooks.useMinHeight(e),metrics:xe(e)},i=this.store.getState().ui.refreshing;t&&(i||this.store.dispatch(ze(!0)),this.domObserver.onAdded(n)),this.store.dispatch({type:at,selectable:n}),t&&(i||this.store.dispatch(ze(!1)))}getElementResizeable(e){const t=this.hooks.isResizeable(e);return"object"==typeof t?t:{top:t,left:t,bottom:t,right:t}}removeElement(e){var t;this.store.dispatch((t=this.store.getState().selectables.find((t=>t.id===e)),{type:lt,selectable:t}))}getDropZone(e,t,n=null){const i=Me(this.contentDocument,this.store,this.hooks,e,t);return n?i.filter((e=>this.hooks.canDrop(n,e)))[0]:i[0]}getBoundingBox(e){const t=this.store.getState();return ye(e.map((e=>t.selectables.find((t=>t.id===this.hooks.getId(e))))))}getSelectionBox(){return ye(Le(this.store))}show(e){const t=this.store.getState(),n=ye(e.map((e=>t.selectables.find((t=>t.id===this.hooks.getId(e)))))),i=t.mouse.scrollData,o=ve(this.contentDocument,n);o.x===i.x&&o.y===i.y||this.store.dispatch(tt(o))}center(e){const t=this.store.getState(),n=ye(e.map((e=>t.selectables.find((t=>t.id===this.hooks.getId(e))))).filter((e=>!!e))),i=t.mouse.scrollData,o=this.contentWindow.innerWidth,r=this.contentWindow.innerHeight,s={x:Math.max(0,Math.round(n.left+n.width/2-o/2)),y:Math.max(0,Math.round(n.top+n.height/2-r/2))};s.x===i.x&&s.y===i.y||this.store.dispatch(tt(s))}setScroll(e){const t=this.store.getState().mouse.scrollData;e.x===t.x&&e.y===t.y||this.store.dispatch(tt(e))}getScroll(){return this.store.getState().mouse.scrollData}}class jt{}let zt,qt;function Ut(){zt||(zt=document.createElement("input"),zt.style.left="-1000px",zt.style.position="absolute",document.body.appendChild(zt)),setTimeout((()=>{zt.focus(),zt.blur(),document.getSelection().removeAllRanges()}),0)}jt.PAGE_NAME_PREFIX="#!",jt.PAGE_ID_PREFIX="page-",jt.JSON_STYLE_TAG_CLASS_NAME="silex-json-styles",jt.WEBSITE_CONTEXT_RUNTIME_CLASS_NAME="silex-runtime",jt.WEBSITE_CONTEXT_EDITOR_CLASS_NAME="silex-editor",jt.WEBSITE_CONTEXT_PUBLISHED_CLASS_NAME="silex-published",jt.PAGED_CLASS_NAME="paged-element",jt.PAGEABLE_PLUGIN_READY_CLASS_NAME="pageable-plugin-created",jt.PAGED_HIDDEN_CLASS_NAME="paged-element-hidden",jt.PAGES_CONTAINER_CLASS_NAME="silex-pages",jt.PAGE_PREVENT_DELETE="data-prevent-delete",jt.PAGE_PREVENT_MOVE="data-prevent-delete",jt.PAGE_PREVENT_RENAME="data-prevent-rename",jt.PAGE_PREVENT_PROPERTIES="data-prevent-properties",jt.PAGED_VISIBLE_CLASS_NAME="paged-element-visible",jt.PAGE_LINK_ACTIVE_CLASS_NAME="page-link-active",jt.TYPE_PAGE="page-element",jt.TYPE_ATTR="data-silex-type",jt.ELEMENT_ID_ATTR_NAME="data-silex-id",jt.STATIC_ASSET_ATTR="data-silex-static",jt.ATTR_REMOVE_PUBLISH="data-silex-remove-publish",jt.ELEMENT_CONTENT_CLASS_NAME="silex-element-content",jt.WEBSITE_WIDTH_CLASS_NAME="website-width",jt.LINK_ATTR="href",jt.STAGE_COMPONENT_SELECTED_CLASS_NAME="selected",jt.STAGE_COMPONENT_NOT_SELECTED_CLASS_NAME="not-selected",jt.SELECTED_CLASS_NAME="silex-selected",jt.RESIZING_CLASS_NAME="silex-resizing",jt.DRAGGING_CLASS_NAME="silex-dragging",jt.HIDE_ON_MOBILE="hide-on-mobile",jt.HIDE_ON_DESKTOP="hide-on-desktop",jt.EDITABLE_CLASS_NAME="editable-style",jt.PREVENT_RESIZABLE_CLASS_NAME="prevent-resizable",jt.PREVENT_RESIZABLE_TOP_CLASS_NAME="prevent-resizable-top",jt.PREVENT_RESIZABLE_LEFT_CLASS_NAME="prevent-resizable-left",jt.PREVENT_RESIZABLE_BOTTOM_CLASS_NAME="prevent-resizable-bottom",jt.PREVENT_RESIZABLE_RIGHT_CLASS_NAME="prevent-resizable-right",jt.PREVENT_SELECTABLE_CLASS_NAME="prevent-selectable",jt.PREVENT_DRAGGABLE_CLASS_NAME="prevent-draggable",jt.PREVENT_DROPPABLE_CLASS_NAME="prevent-droppable",jt.SILEX_USE_HEIGHT_NOT_MINHEIGHT="silex-use-height-not-minheight",jt.SILEX_STYLE_ELEMENT_CSS_CLASS="silex-style",jt.SILEX_SCRIPT_ELEMENT_CSS_CLASS="silex-script",jt.PRODOTYPE_DEPENDENCY_ATTR="data-dependency",jt.CUSTOM_FONTS_CSS_CLASS="silex-custom-font",jt.ENABLE_MOBILE_CSS_CLASS="enable-mobile",jt.MOBILE_MODE_CSS_CLASS="mobile-mode",jt.LOADING_ELEMENT_CSS_CLASS="loading-image",jt.LOADING_SITE_CSS_CLASS="loading-website",jt.LOADING_SILEX_CSS_CLASS="loading-pending",jt.MOBILE_BREAKPOINT=480,jt.MOBILE_MEDIA_QUERY=`only screen and (max-width: ${jt.MOBILE_BREAKPOINT}px)`,jt.SILEX_CURRENT_PAGE_ID="current-page-style",jt.SILEX_TEMP_TAGS_CSS_CLASS="silex-temp-tag",jt.RISZE_HANDLE_CSS_CLASS="ui-resizable-handle",jt.INLINE_STYLE_TAG_CLASS_NAME="silex-inline-styles",jt.HEAD_TAG_START="\x3c!-- Silex HEAD tag do not remove --\x3e",jt.HEAD_TAG_STOP="\x3c!-- End of Silex HEAD tag do not remove --\x3e",jt.COMPONENT_CLASS_NAME="silex-component",jt.STYLE_CLASS_NAME="silex-prodotype-style",jt.BODY_STYLE_NAME="All style",jt.BODY_STYLE_CSS_CLASS="all-style",jt.EMPTY_STYLE_CLASS_NAME="empty-style-class-name",jt.EMPTY_STYLE_DISPLAY_NAME="",jt.COMPONENT_TYPE="component",jt.STYLE_TYPE="style",jt.STYLE_VISIBILITY=["desktop","mobile"],jt.SILEX_CLASS_NAMES=[jt.WEBSITE_WIDTH_CLASS_NAME],jt.SILEX_TEMP_CLASS_NAMES=[jt.PAGEABLE_PLUGIN_READY_CLASS_NAME,jt.PAGED_HIDDEN_CLASS_NAME,jt.PAGED_VISIBLE_CLASS_NAME],jt.SILEX_CLASS_NAMES_TO_REMOVE_AT_PUBLISH=[],jt.ELEMENTS_TO_REMOVE_AT_PUBLISH=[".prodotype-preview","["+jt.ATTR_REMOVE_PUBLISH+"]"],function(e){e.CONTAINER="container-element",e.SECTION="section-element",e.IMAGE="image-element",e.TEXT="text-element",e.HTML="html-element"}(wt||(wt={})),function(e){e.UP="UP",e.DOWN="DOWN",e.LEFT="LEFT",e.RIGHT="RIGHT"}(xt||(xt={})),function(e){e.UP="UP",e.DOWN="DOWN",e.TOP="TOP",e.BOTTOM="BOTTOM"}(Ct||(Ct={})),function(e){e.PAGE="LinkTypePage",e.URL="LinkTypeExternal"}(Tt||(Tt={}));class $t{constructor(e){if(this.isOpen=!1,e.name&&(this.name=e.name,$t.dialogs.set(this.name,this)),!e.element)throw new Error('Modal dialog options missing a "element" field');if(this.element=e.element,!e.onOpen)throw new Error('Modal dialog options missing a "onOpen" field');if(this.onOpen=e.onOpen,!e.onClose)throw new Error('Modal dialog options missing a "onClose" field');this.onClose=e.onClose,this.element.classList.add($t.MODAL_DIALOG_CLASS_NAME),this.element.classList.add($t.HIDE_DIALOG_CLASS_NAME);const t=this.element.querySelector(".close-btn");t&&(t.onclick=e=>this.close()),document.addEventListener("keydown",(e=>{this.isOpen&&"Escape"===e.key&&(this.close(),e.preventDefault(),e.stopPropagation())}))}static open(e,t=null){$t.dialogs.has(e)?$t.dialogs.get(e).open(t):console.error("could not open dialog",e,$t.dialogs)}static close(){$t.currentDialog?$t.currentDialog.close():console.error("could not close dialog, there is no dialog opened")}open(e){this.isOpen?console.warn("this dialog is already opened",this.name?this.name:""):(this.isOpen=!0,$t.currentDialog&&$t.currentDialog.close(),$t.currentDialog=this,this.element.classList.remove($t.HIDE_DIALOG_CLASS_NAME),this.onOpen(e))}close(){this.isOpen?(this.isOpen=!1,$t.currentDialog=null,this.onClose(),Ut(),this.element.classList.add($t.HIDE_DIALOG_CLASS_NAME)):console.warn("dialog is already closed",this.name?this.name:"")}}function Ft(){return qt=qt||{fileExplorer:document.querySelector("#silex-file-explorer"),contextMenu:document.querySelector(".silex-context-menu"),menu:document.querySelector(".silex-menu"),breadCrumbs:document.querySelector(".silex-bread-crumbs"),pageTool:document.querySelector(".silex-page-tool"),htmlEditor:document.querySelector(".silex-html-editor"),cssEditor:document.querySelector(".silex-css-editor"),jsEditor:document.querySelector(".silex-js-editor"),settingsDialog:document.querySelector(".silex-settings-dialog"),dashboard:document.querySelector(".silex-dashboard"),propertyTool:document.querySelector(".silex-property-tool"),textFormatBar:document.querySelector(".silex-text-format-bar"),workspace:document.querySelector(".silex-workspace"),verticalSplitter:document.querySelector(".vertical-splitter")},qt}$t.dialogs=new Map,$t.HIDE_DIALOG_CLASS_NAME="silex-hide-dialog",$t.MODAL_DIALOG_CLASS_NAME="silex-modal-dialog";class Gt{constructor(){this.ce=null}static getInstance(){return Gt.instance=Gt.instance||new Gt,Gt.instance}ready(e){const t=Ft();t.fileExplorer.contentWindow.ce?(this.ce=t.fileExplorer.contentWindow.ce,e()):(null==this.cbks&&(this.cbks=[],t.fileExplorer.addEventListener("load",(e=>{this.ce=t.fileExplorer.contentWindow.ce,this.cbks.forEach((e=>e())),this.cbks=[]}))),this.cbks.push(e))}write(e,t,n,i,o){const r=new XMLHttpRequest;r.onload=()=>{if(200===r.status)i();else{const e=new Event("error"),t=this.getErrorMessage(r);o&&o(e,t,r.status)}};const s=`/website/ce/${e.service}/put/${e.path}`;r.open("PUT",s),r.setRequestHeader("Content-Type","text/plain; charset=utf-8"),r.send(JSON.stringify({html:t,data:n}))}getErrorMessage(e){let t="";try{const n=JSON.parse(e.responseText);n.message&&(t=n.message)}catch(e){}if(""===t)if(""!==e.responseText)t=e.responseText;else switch(e.status){case 404:t="File not found.";break;case 401:t="You are not connected to the cloud service you are trying to use.";break;default:t="Unknown error with HTTP status "+e.status}return""===t?null:t}loadWebsite(e,t,n){const i="/website"+e,o=new XMLHttpRequest;o.addEventListener("load",(e=>{if(200===o.status){const e=JSON.parse(o.responseText);e.message&&me.alert("Website updated",e.message,(()=>{})),t(e.html,e.data)}else{const e=new Event("error"),t=this.getErrorMessage(o);n(e,t,o.status)}})),o.addEventListener("error",(t=>{console.error("could not load website",e,"from",i,t),n&&n(t,"Network error, please check your internet connection or try again later.",o.status)})),o.open("GET",i),o.send()}getServices(e,t){this.ce.getServices().then((t=>{e(t)})).catch((n=>{console.error("Error: could not get the list of services",n),t?t(n,"Error: could not get the list of services"):e([])}))}}class Vt{constructor(){this.ce=null;const e=Ft().fileExplorer;Gt.getInstance().ready((()=>{this.ce=Gt.getInstance().ce})),this.modalDialog=new $t({name:"File explorer",element:e,onOpen:e=>{},onClose:()=>{}})}static get IMAGE_EXTENSIONS(){return[".jpg",".jpeg",".png",".gif",".svg"]}static get HTML_EXTENSIONS(){return[".html",".zip"]}static getInstance(){return Vt.instance=Vt.instance||new Vt,Vt.instance}addAbsPath(e){if(e){const t=e.service?`/ce/${e.service}/get/${e.path}`:e.absPath;return{...e,absPath:t}}}async openFile(e){this.open();const t=await this.ce.openFile(e);if(t){if(t.urls&&t.urls.big&&t.urls.small){const e=await this.promptAttributionAndGetSize(t.attribution,t.urls);return this.close(),{...t,absPath:e}}return this.close(),this.addAbsPath(t)}return this.close(),null}async promptAttributionAndGetSize(e,t){return new Promise(((n,i)=>{const o=e?`\n        <h3>About this image and the author</h3>\n        <p>\n          ${e.message}\n        </p><br/>\n        <code>\n          ${e.content}\n        </code>\n        <button class="copy-btn">Copy</button>\n      `:"",r=`\n        <h3>Image size</h3>\n        <p>You need to choose an image size to continue</p>\n        <ul>\n          <li>Open the <a target="_blank" href="${t.big}">big version</a> in a new tab</li>\n          <li>Or the <a target="_blank" href="${t.small}">small version</a></li>\n        </ul>\n      `,s=document.createElement("div");s.innerHTML=o+r,s.querySelector(".copy-btn").onclick=()=>this.copy(e.content),me.confirm("Insert image","",(e=>{n(e?t.big:t.small)}),"Big size","Small size"),me.setContent(s,!1)}))}copy(e){const t=document.createElement("div");document.body.appendChild(t);try{t.innerHTML=e;const n=document.createRange();n.selectNode(t),window.getSelection().addRange(n),document.execCommand("copy")?me.notifySuccess("Attribution copied to clipboard"):(me.notifyError("Attribution has not been copied to clipboard"),console.error("Could not copy to clipboard",e))}catch(t){me.notifyError("Attribution has not been copied to clipboard"),console.error("Could not copy to clipboard",t,e)}document.body.removeChild(t)}async openFiles(e){this.open();const t=await this.ce.openFiles(e),n=this.addAbsPath(t);return this.close(),n}async openFolder(){this.open();const e=await this.ce.openFolder(),t=this.addAbsPath(e);return this.close(),t}async saveAs(e,t){this.open();const n=await this.ce.saveAs(e,t),i=this.addAbsPath(n);return this.close(),i}open(){this.modalDialog.open()}close(){this.modalDialog.close()}}var Yt,Xt,Kt,Zt;!function(e){e.INITIALIZE="ELEMENT_INITIALISE",e.CREATE="ELEMENT_CREATE",e.DELETE="ELEMENT_DELETE",e.UPDATE="ELEMENT_UPDATE"}(Yt||(Yt={})),function(e){e.INITIALIZE="PAGE_INITIALIZE",e.CREATE="PAGE_CREATE",e.DELETE="PAGE_DELETE",e.UPDATE="PAGE_UPDATE",e.MOVE="PAGE_MOVE"}(Xt||(Xt={})),function(e){e.INITIALIZE="SITE_INITIALIZE",e.UPDATE="SITE_UPDATE"}(Kt||(Kt={})),function(e){e.INITIALIZE="UI_INITIALIZE",e.UPDATE="UI_UPDATE"}(Zt||(Zt={}));var Jt=n(1090);const Qt=Symbol("crudId key");function en(e){const{actionEnum:t,reducer:n}=e;return(e=[],i)=>{switch(i.type in Object.keys(t)&&function(e){if(e.filter((e=>!e[Qt])).length)throw new Error("The items need to have a key. The items you provide to update or deleted need to be retrieved from the store")}(i.items),i.type){case t.INITIALIZE:return i.items;case t.CREATE:return i.items.length?n(e.concat(i.items),i):e;case t.DELETE:return i.items.length?n(e.filter((e=>!i.items.find((t=>t[Qt]===e[Qt])))),i):e;case t.UPDATE:return 0===i.items.length?e:n(e.map((e=>i.items.find((t=>t[Qt]===e[Qt]))||e)),i);default:return n(e,i)}}}function tn(e){return e.map((e=>({...e,[Qt]:Symbol()})))}function nn(e){return e.map((e=>{const{[Qt]:t,...n}=e;return n}))}function on({onAdd:e,onDelete:t,onUpdate:n}){return(i,o)=>{const r=o.filter((e=>!i||!i.find((t=>t[Qt]===e[Qt]))));if(r.length&&e(r),i){const e=i.filter((e=>!o.find((t=>t[Qt]===e[Qt]))));e.length&&t(e);const r=o.map((e=>({from:i.find((t=>t[Qt]===e[Qt])),to:e}))).filter((({from:e,to:t})=>!!e&&e!==t));r.length&&n(r)}}}const rn=(e,t=Tn.dispatch)=>t({type:Zt.INITIALIZE,data:e}),sn=(e,t=Tn.dispatch)=>t({type:Zt.UPDATE,data:e}),an=()=>Tn.getState().present.ui,ln=(e,t=Tn.subscribe)=>_n("ui",e,t);function cn(e,t){const{changeActions:n,resetActions:i}=t;return(t,o)=>{const r=e(t,o);return i.includes(o.type)?(hn(r.present),un(r)):n.includes(o.type)&&r!==t?un(r):r}}function un(e){const t=fn(e.present);return t===e.present.ui.dirty?e:{...e,present:{...e.present,ui:{...e.present.ui,dirty:t}}}}let dn={elements:null,pages:null,site:null};function hn(e=On()){const{elements:t,pages:n,site:i}=e;dn={elements:t,pages:n,site:i}}function pn(e=On()){hn(e),sn({...an(),dirty:!1})}function fn(e=On()){return e.elements!==dn.elements||e.pages!==dn.pages||e.site!==dn.site}function mn(){Tn.dispatch(Jt.zF.clearHistory())}function gn(){Tn.dispatch(Jt.zF.undo())}function bn(){Tn.dispatch(Jt.zF.redo())}function yn(){return Tn.getState().past.length>0}function vn(){return Tn.getState().future.length>0}function En(e,t){const{resetActions:n}=t;return(t,i)=>{const o=e(t,i);return n.includes(i.type)?function(e){return{...e,past:[],future:[]}}(o):o}}const Sn=[Yt.INITIALIZE,Xt.INITIALIZE,Kt.INITIALIZE],wn=[...Object.values(Yt).filter((e=>e!==Yt.INITIALIZE)),...Object.values(Xt).filter((e=>e!==Xt.INITIALIZE)),...Object.values(Kt).filter((e=>e!==Kt.INITIALIZE))],xn=Nt({pages:en({actionEnum:Xt,reducer:(e=[],t)=>{if(t.type===Xt.MOVE){const n=e.findIndex((e=>e===t.item)),i=[...e.slice(0,n),...e.slice(n+1)];return[...i.slice(0,t.idx),t.item,...i.slice(t.idx)]}return e},label:"Pages"}),elements:en({actionEnum:Yt,reducer:(e=[],t)=>(t.type,e),label:"Elements"}),site:(e={description:"",enableMobile:!0,isTemplate:!1,title:"",publicationPath:null,websiteUrl:"",faviconPath:"",thumbnailSocialPath:"",descriptionSocial:"",titleSocial:"",lang:"",width:-1,headStyle:"",headScript:"",headUser:"",hostingProvider:"",twitterSocial:"",dataSources:{},fonts:[],styles:{},file:null,prodotypeDependencies:{},data:{}},t)=>{switch(t.type){case Kt.INITIALIZE:return{...t.data};case Kt.UPDATE:return{...e,...t.data};default:return e}},ui:(e={loading:he.SILEX,dirty:!1,mobileEditor:!1,currentPageId:null,dialogs:[{id:"design",type:"properties",visible:!0},{id:"style",type:"properties",visible:!1},{id:"params",type:"properties",visible:!1}],clipboard:null,components:{}},t)=>{switch(t.type){case Zt.INITIALIZE:return{...t.data};case Zt.UPDATE:return{...e,...t.data};default:return e}}});let Cn=0;const Tn=Ot(cn(En((0,Jt.ZP)(xn,{filter:(0,Jt.an)(wn),groupBy:()=>{const e=Math.floor(Date.now()/1e3),t=e-Cn;return Cn=e,t}}),{resetActions:Sn}),{changeActions:wn,resetActions:Sn}));let kn=Tn.getState().present,In=null;function An(e,t,n=Tn.subscribe){return n((()=>{const n=Tn.getState();In&&n.present[e]===In[e]||t(In?In[e]:null,n.present[e])}))}function _n(e,t,n=Tn.subscribe){return n((()=>{const n=Tn.getState();In&&n.present[e]===In[e]||t(In?In[e]:null,n.present[e])}))}Tn.subscribe((()=>{In=kn,kn=Tn.getState().present}));const On=()=>Tn.getState().present,Ln=e=>tn(e),Nn=e=>nn(e),Dn=(e,t=Tn.dispatch)=>t({type:Yt.INITIALIZE,items:e}),Pn=(e,t=Tn.dispatch)=>t({type:Yt.CREATE,items:e}),Mn=(e,t=Tn.dispatch)=>t({type:Yt.DELETE,items:e}),Rn=(e,t=Tn.dispatch)=>t({type:Yt.UPDATE,items:e}),Bn=()=>Tn.getState().present.elements,Wn=(e,t=Tn.subscribe)=>An("elements",e,t);function Hn(e,t,...n){return[...e.slice(0,t),...n,...e.slice(t)]}const jn=e=>e.reduce(((e,t)=>e.concat(t)),[]);function zn(e,t,n){const i={...n};return"static"===n.position&&(delete i.left,delete i.top),(e.type===wt.SECTION||t)&&(delete i.width,delete i.left,delete i.top),e.type===wt.SECTION&&delete i.height,i}function qn(e,t,n){return{...t,mobile:e?{...t.mobile,...n}:t.mobile,desktop:e?t.desktop:{...t.desktop,...n}}}function Un(e,t,n=""){return Object.keys(e).filter((t=>!!e[t])).map((t=>({key:t,val:e[t]}))).reduce(((e,{key:i,val:o})=>e+(t&&"height"===i?n+"min-height: "+o+"; ":`${n}${i}: ${o}; `)),"")}function $n(e){if(0!==e.indexOf("rgb"))return null;const t=(e=(e=0!==e.indexOf("rgba")?e.replace("rgb",""):e.replace("rgba","")).replace(" ","")).substring(1,e.length-1).split(",");return t.length<4&&t.push("1"),[parseInt(t[0],10),parseInt(t[1],10),parseInt(t[2],10),255*parseFloat(t[3])]}function Fn(e,t){return function(e,t){return e.querySelector(`[${jt.ELEMENT_ID_ATTR_NAME}="${t}"]`)}(e,t.id)}function Gn(e){return e.getAttribute(jt.ELEMENT_ID_ATTR_NAME)}function Vn(e,t,n){const i=Xn(e),o=function(e,t,n){for(let i=0;i<e.cssRules.length;i++){const o=e.cssRules[i];if(!1===n&&o.selectorText==="."+t||o.media&&o.cssRules&&o.cssRules[0]&&o.cssRules[0].selectorText==="."+t)return{rule:o,parent:e,index:i}}return null}(i,t,n);o&&i.deleteRule(o.index)}function Yn(e,t,n){const i=t.id,o=n?t.style.mobile:t.style.desktop,r=Xn(e);Vn(e,t.id,n);const s=Un(o,t.useMinHeight);if(s.length){const e=`.${i} {${s}}`;n?r.insertRule(Jn(e),r.cssRules.length):r.insertRule(e,0)}}function Xn(e){let t=e.querySelector("."+jt.INLINE_STYLE_TAG_CLASS_NAME);t||(t=e.createElement("style"),t.classList.add(jt.INLINE_STYLE_TAG_CLASS_NAME),e.head.appendChild(t));for(const n of e.styleSheets){const e=n;if(e.ownerNode&&e.ownerNode===t||e===t.sheet)return e}return console.error("no stylesheet found"),null}function Kn(e){return e.querySelector(":scope > ."+jt.ELEMENT_CONTENT_CLASS_NAME)||e}function Zn(e){let t=Kn(e).innerHTML;return t=function(e){return e.replace(/type="text\/notjavascript"/gi,'type="text/javascript"')}(t),t}function Jn(e){return"@media "+jt.MOBILE_MEDIA_QUERY+"{"+e+"}"}function Qn(e,t){return e.decorate(t.templateName,t.data,t.dataSources)}const ei=(e,t=Bn())=>t.find((t=>t.id===e))||null,ti=(e,t,n=Bn())=>n.find((n=>t===Fn(e,n))),ni=(e,t=Bn())=>e.children.map((e=>ei(e,t))),ii=(e,t=Bn())=>e.children.map((e=>ei(e,t))).filter((e=>!!e)).concat(e.children.reduce(((e,n)=>{const i=ei(n,t);return i?e.concat(ii(i,t)):e}),[])),oi=(e,t=Bn())=>t.find((t=>t.children.includes(e.id))),ri=(e,t=Bn())=>{const n=oi(e,t);return n?[n,...ri(n,t)]:[]},si=(e,t=Bn())=>!oi(e,t),ai=(e=Bn())=>e.find((t=>si(t,e))),li=(e,t=Bn())=>e.isSectionContent?oi(e,t):e,ci=(e=Bn())=>e.filter((e=>e.selected)),ui=(e=Bn())=>e.filter((e=>e.selected)).map((t=>li(t,e)));function di(e,t=Bn()){const n=oi(e,t);return n?n.pageNames.length?n:di(n,t):null}const hi=(e,t=Tn.dispatch)=>t({type:Kt.INITIALIZE,data:e}),pi=(e,t=Tn.dispatch)=>t({type:Kt.UPDATE,data:e}),fi=()=>Tn.getState().present.site,mi=(e,t=Tn.subscribe)=>_n("site",e,t);function gi(e){return jt.STYLE_VISIBILITY.map((t=>({visibility:t,data:e.styles[t]}))).filter((e=>!!e.data)).map((e=>{const t=[];for(const n in e.data)t.push({visibility:e.visibility,pseudoClass:n,data:e.data[n]});return t})).reduce(((e,t)=>e.concat(t)),[])}let bi,yi,vi,Ei,Si=!1;function wi(){vi=Ft().propertyTool.querySelector(".prodotype-style-editor .prodotype-container"),yi=new window.Prodotype(vi,"./prodotype/styles"),ki(de.componentFolders)}function xi(){return bi||wi(),bi}function Ci(){return yi||wi(),yi}async function Ti(e=_i()){const t=(await Promise.all(e.map((e=>Qn(xi(),{templateName:e.data.component.templateName,data:e.data.component.data,dataSources:fi().dataSources}).then((t=>[e,t])).catch((e=>(console.error("could not update component:",e),null))))))).filter((e=>!!e));Rn(t.filter((([e,t])=>e.innerHtml!==t)).map((([e,t])=>({...e,innerHtml:t}))))}function ki(e){Ei=Ft().propertyTool.querySelector(".prodotype-component-editor");const t=new window.Prodotype(Ei,e);bi||(bi=t),t.ready((e=>{e?console.error(e):(bi=t,Si=!0,sn({...an(),components:Ii(jt.COMPONENT_TYPE)}))}))}function Ii(e){const t=e===jt.COMPONENT_TYPE?xi():Ci();return t?t.componentsDef:{}}function Ai(e){return!!e.data.component&&!!e.data.component.templateName}function _i(e=Bn()){return e.filter((e=>Ai(e)))}function Oi(e,t){const n=Ii(jt.COMPONENT_TYPE)[t];if(n){const i=xi().createName(t,Bn().filter((e=>Ai(e))).map((e=>e.data.component))),o=Ni(t)||[],r=void 0===n.useMinHeight?e.useMinHeight:n.useMinHeight,s=n.initialCss||{};return n.initialCssContentContainer&&console.error("not implemented",n.initialCssContentContainer),Qn(xi(),{templateName:t,data:{},dataSources:fi().dataSources}).then((n=>({...e,classList:e.classList.concat(o),data:{...e.data,component:{name:i,templateName:t,data:{}}},innerHtml:n,useMinHeight:r,style:{...e.style,desktop:{...e.style.desktop,...s}}})))}console.error("Component definition not found in prodotype data")}function Li(e){return Ai(e)?Ni(e.data.component.templateName):[]}function Ni(e){const t=Ii(jt.COMPONENT_TYPE)[e];let n=[jt.COMPONENT_CLASS_NAME+"-"+e];if(t)switch(typeof t.initialCssClass){case"undefined":break;case"string":n=n.concat(t.initialCssClass.split(" "));break;default:n=n.concat(t.initialCssClass)}else console.error(`Error: component's definition not found in prodotype templates, with template name "${e}".`);return n}function Di(e=bi,t=Bn(),n=Tn.dispatch){const i=t.filter((e=>Ai(e))).map((e=>e.data.component)),o=e.getDependencies(i),r=Object.keys(o).reduce(((e,t)=>{const n=o[t].filter(((e,n)=>!o[t].find(((t,i)=>n>i&&Pi(e,t)))));return e[t]=e[t]||[],e[t]=e[t].concat(n),e}),{}),s=fi().prodotypeDependencies,a=Object.keys(s),l=Object.keys(r);a.length===l.length&&a.every((e=>{const t=s[e],n=r[e];return!!n&&n.length===t.length&&t.every((e=>n.find((t=>Pi(e,t)))))}))||pi({...fi(),prodotypeDependencies:r},n)}function Pi(e,t){return Object.keys(e).every((n=>e[n]===t[n]))&&Object.keys(t).every((n=>e[n]===t[n]))}function Mi(){Si&&(Ei.classList.add("hide-panel"),xi().edit())}function Ri(e){Si&&(xi().edit(e.data,e.dataSources,e.templateName,e.events),Ei.classList.remove("hide-panel"))}function Bi(e){Si&&Ci().edit(e.data,e.dataSources,e.templateName,e.events)}function Wi(e){const t=document.createDocumentFragment();return Array.from(e.children).forEach((e=>{e.classList.contains("editable-style")&&t.appendChild(e.cloneNode(!0))})),t}function Hi(e,t){return t===jt.STYLE_VISIBILITY[0]?e:Jn(e)}function ji(e,t,n,i,o,r){const s=o||{};s.className=t,s.pseudoClass=n;const a=fi().styles[t]||{className:t,templateName:"text",displayName:r,styles:{}};a.styles[i]||(a.styles[i]={}),a.styles[i][n]=s;const l=e.head;let c=l.querySelector(`[data-style-id="${t}"]`);c||(c=e.createElement("style"),c.className=jt.STYLE_CLASS_NAME,c.setAttribute("data-style-id",t),l.appendChild(c));const u=gi(a);u.length>0&&Promise.all(u.map((e=>Qn(Ci(),{templateName:"text",data:e.data,dataSources:fi().dataSources}).then((t=>Hi(t,e.visibility)))))).then((e=>{c.innerHTML=e.join("")}))}const zi=e=>tn(e),qi=e=>nn(e),Ui=(e,t=Tn.dispatch)=>t({type:Xt.INITIALIZE,items:e}),$i=(e,t=Tn.dispatch)=>t({type:Xt.CREATE,items:e}),Fi=(e,t=Tn.dispatch)=>t({type:Xt.DELETE,items:e}),Gi=(e,t=Tn.dispatch)=>t({type:Xt.UPDATE,items:e}),Vi=({page:e,idx:t},n=Tn.dispatch)=>n({type:Xt.MOVE,item:e,idx:t}),Yi=()=>Tn.getState().present.pages,Xi=(e,t=Tn.subscribe)=>An("pages",e,t),Ki=["href","rel","target","type","title","download"],Zi={href:"",target:"",title:"",rel:"",type:"",download:""};let Ji;function Qi(e){return Ji=Ji||new to,Ji.open(e.data,e.cbk)}function eo(e){return e.startsWith(jt.PAGE_NAME_PREFIX)&&e.split("#").length<=2?Tt.PAGE:Tt.URL}class to{constructor(){}open(e,t){const n=Object.assign({},Zi,e||{});me.prompt('\n      Link editor <a class="link-editor-help-button fa fa-question-circle" target="_blank" href="https://github.com/silexlabs/Silex/wiki/Editor-UI#link-editor"> Help</a>\n    ',"unused","unused","unused",((n,i)=>{if(n){const e=Ki.reduce(((e,t)=>{const n=o.querySelector("."+t);return n?e[t]=n.value:console.error("could not get data from for attribute",t),e}),{}),n=o.querySelector("#link-editor-external").checked,i=o.querySelector(".page").value,r={href:n?e.href:i,linkType:n?Tt.URL:Tt.PAGE};""!==e.target&&(r.target=e.target),""!==e.rel&&(r.rel=e.rel),""!==e.title&&(r.title=e.title),""!==e.type&&(r.type=e.type),""!==e.download&&(r.download=e.download),t(r)}else t(e)}));const i=document.createElement("fragment");i.innerHTML='\n      <button class="alertify-button alertify-button-cancel alertify-button-remove">remove link</button>\n    ',i.querySelector(".alertify-button-remove").onclick=e=>{me.close(),t(null)},me.addButton(i);const o=document.createElement("div");o.insertAdjacentHTML("afterbegin",this.getDialogHtml({linkType:eo(n.href),linkData:n})),Array.from(o.querySelectorAll(".link-editor-tab-label")).forEach((e=>{e.onclick=t=>{Array.from(o.querySelectorAll(".link-editor-tab-label.checked")).forEach((e=>e.classList.remove("checked"))),e.classList.add("checked")}})),me.setContent(o)}getDialogHtml({linkType:e,linkData:t}){return`\n      <section class="link-editor">\n        <div class="labels">\n          <label for="link-editor-external" title="External Link" class="link-editor-tab-label first-button fa fa-lg fa-link${e===Tt.URL?" checked ":""}"></label>\n          <label for="link-editor-internal" title="Link to a page" class="link-editor-tab-label last-button fa fa-lg fa-file${e===Tt.PAGE?" checked ":""}"></label>\n          <div class="space"></div>\n        </div>\n        <div class="link-editor-body">\n        <input autocomplete="nope" id="link-editor-external" class="link-editor-radio" type="radio" name="link-editor-tab-group"${e===Tt.URL?" checked ":""}/>\n        <div class="link-editor-tab link-editor-tab-external">\n          <div class="link-editor-tab-container">\n            <label for="link-editor-href">External link</label>\n            <div class="flex">\n              <input autocomplete="nope" spellcheck="false" id="link-editor-href" class="big alertify-text href tabbed" type="url" value="${e===Tt.URL?t.href:""}">\n              <select autocomplete="nope" id="link-editor-target" class="alertify-text target">\n                <option${""===t.target?" selected ":""} value=""></option>\n                <option${"_self"===t.target?" selected ":""} value="_self">_self</option>\n                <option${"_blank"===t.target?" selected ":""} value="_blank">_blank</option>\n                <option${"_parent"===t.target?" selected ":""} value="_parent">_parent</option>\n                <option${"_top"===t.target?" selected ":""} value="_top">_top</option>\n              </select>\n            </div>\n          </div>\n        </div>\n        <input autocomplete="nope" id="link-editor-internal" class="link-editor-radio" type="radio" name="link-editor-tab-group"${e===Tt.PAGE?" checked ":""}/>\n        <div class="link-editor-tab link-editor-tab-internal">\n          <div class="link-editor-tab-container">\n            <label for="link-editor-page">Page</label>\n            <select autocomplete="nope" class="tabbed alertify-text page big" id="link-editor-page">\n              <option value=""${e===Tt.URL?" selected ":""}></option>\n              ${Yi().map((n=>`<option value="${jt.PAGE_NAME_PREFIX+n.id}"${e===Tt.PAGE&&jt.PAGE_NAME_PREFIX+n.id===t.href?" selected ":""} >\n                ${n.displayName}\n              </option>`))}\n            </select>\n          </div>\n        </div>\n        <div class="link-editor-tab-container">\n          <div class="link-editor-2col">\n            <label for="link-editor-title">Title</label>\n            <input autocomplete="nope" id="link-editor-title" class="alertify-text title big" type="text" value="${t.title}">\n          </div>\n        </div>\n        <hr>\n        <div class="link-editor-advanced-container">\n          <input autocomplete="nope" id="link-editor-show-advanced" type="checkbox">\n          <label for="link-editor-show-advanced">Advanced params</label>\n          <div class="link-editor-advanced">\n            <label for="link-editor-rel">The "rel" attribute. Describes the relationship between the current document and the destination.</label>\n            <input autocomplete="nope" id="link-editor-rel" class="alertify-text rel" type="text" value="${t.rel}">\n            <label for="link-editor-type">The "type" attribute. Specifies the MIME type of the linked resource.</label>\n            <input autocomplete="nope" id="link-editor-type" class="alertify-text type" type="text" value="${t.type}">\n            <label for="link-editor-download">The "download" attribute. Indicates that the link is to be used for downloading a resource (such as a file). The author can specify a default file name by providing a value.</label>\n            <input autocomplete="nope" id="link-editor-download" class="alertify-text download" type="text" value="${t.download}">\n          </div>\n        </div>\n        </div>\n      </section>\n    `}}const no=100;async function io({type:e,parent:t,isSectionContent:n,componentName:i}){const[o]=Ln([oo({id:ao(),type:e,isSectionContent:n,isBody:!1})]),r={...t,children:t.children.concat(o.id)};return i?[{...await Oi(o,i),selected:!0},r]:[{...o,selected:!0},r]}function oo({id:e,type:t,isSectionContent:n,isBody:i}){return{id:e,tagName:t===wt.SECTION?"SECTION":"DIV",type:t,alt:null,title:null,isSectionContent:n,visibility:{desktop:!0,mobile:!0},style:{desktop:JSON.parse(JSON.stringify({width:no+"px",height:no+"px","background-color":t===wt.HTML||t===wt.CONTAINER?"rgb(255, 255, 255)":void 0,...ro({type:t,isSectionContent:n,isBody:i})})),mobile:{}},data:{component:null},children:[],pageNames:[],classList:[],attr:{},link:null,enableEdit:t!==wt.SECTION&&t!==wt.CONTAINER,enableDrag:!n,enableDrop:t===wt.SECTION||t===wt.CONTAINER,enableResize:t===wt.SECTION?{top:!1,bottom:!1,left:!1,right:!1}:{top:!0,bottom:!0,left:!0,right:!0},selected:!1,useMinHeight:t!==wt.IMAGE,innerHtml:t===wt.TEXT?"New text box":t===wt.HTML?"<p>New <strong>HTML</strong> box</p>":""}}function ro({type:e,isSectionContent:t,isBody:n}){return Object.assign({position:"absolute"},e===wt.SECTION?{position:"static",top:void 0,left:void 0,height:void 0,width:void 0}:t?{position:"relative",top:void 0,left:void 0,width:void 0,"margin-left":"auto","margin-right":"auto"}:n?{position:"static"}:{})}let so=0;function ao(){return"silex-id-"+function(){let e;do{e=Date.now().toString()+"-"+so++}while(ei(e));return e}()}function lo(e,t,n){return n?void 0!==e.style.mobile[t]?e.style.mobile[t]:"left"!==t&&"top"!==t||e.style.mobile.display&&"static"!==e.style.mobile.display?e.style.desktop[t]:void 0:e.style.desktop[t]}function co(e,t){return e.isSectionContent&&!t?{top:null,left:null,width:fi().width+"px",height:lo(e,"height",t)}:{top:lo(e,"top",t),left:lo(e,"left",t),width:lo(e,"width",t),height:lo(e,"height",t)}}function uo(e){return e.reduce(((e,t)=>{const n={top:parseInt(t.top||"0"),left:parseInt(t.left||"0"),width:parseInt(t.width||"0"),height:parseInt(t.height||"0"),bottom:parseInt(t.top||"0")+parseInt(t.height||"0"),right:parseInt(t.left||"0")+parseInt(t.width||"0")},i={top:Math.min(e.top,n.top),left:Math.min(e.left,n.left),bottom:Math.max(e.bottom,n.bottom),right:Math.max(e.right,n.right)};return{...i,width:i.right-i.left,height:i.bottom-i.top}}),{top:1/0,left:1/0,bottom:-1/0,right:-1/0,width:-1/0,height:-1/0})}function ho(e,t){if(e)return ai();const n=t.contentDocument,i=t.getBoundingClientRect(),o=Math.round(i.width/2),r=Math.round(i.height/2);return n.elementsFromPoint(o,r).map((e=>Bn().find((t=>Fn(n,t)===e)))).filter((e=>!!e&&e.enableDrop)).shift()}function po({stageSize:e,parentSize:t,elementSize:n,offset:i=0}){const o=Math.round(e.height/2-n.height/2-t.top)+i,r=Math.round(e.width/2-n.width/2-t.left)+i;return{top:Math.max(0,Math.min(o,t.height-n.height)),left:Math.max(0,Math.min(r,t.width-n.width))}}function fo(e){if(Ai(e))return`${e.data.component.templateName}`;if(e.isSectionContent)return"Section Container";switch(e.type){case wt.TEXT:return"Text";case wt.IMAGE:return"Image";case wt.CONTAINER:return"Container";case wt.HTML:return"Html";case wt.SECTION:return"Section"}}function mo(){const e=Bn().map((e=>({desktop:Object.keys(e.style.desktop).length?e.style.desktop:null,mobile:Object.keys(e.style.mobile).length?e.style.mobile:null,useMinHeight:e.useMinHeight,id:e.id}))).reduce(((e,{mobile:t,desktop:n,useMinHeight:i,id:o})=>({desktop:e.desktop+(n?`\n.${o} {\n${Un(n,i,"\n    ")}\n}\n`:""),mobile:e.mobile+(t?`\n.${o} {\n${Un(t,i,"\n    ")}\n}\n`:"")})),{desktop:"",mobile:""});return`${e.desktop}\n\n${Jn(e.mobile)}\n`}function go(e,t){return!ri(e).concat(e).find((e=>e.pageNames.length>0&&!e.pageNames.includes(t)))}function bo(e,t,n){e.preventDefault(),Qi({data:t,cbk:n})}function yo(e,t){e.preventDefault(),Vt.getInstance().openFile().then((e=>{e&&t([e])})).catch((e=>{me.notifyError("Error: I could not select the file. <br /><br />"+(e.message||""))}))}function vo(e){const t=e.parentElement.childNodes.length;for(let n=0;n<t;n++)if(e.parentElement.childNodes[n]===e)return n;return-1}const Eo=(e=Bn(),t=Tn.dispatch)=>{So([ai(e)],e,t)},So=(e,t=Bn(),n=Tn.dispatch)=>{Rn(t.filter((t=>t.selected!==e.map((e=>e.id)).includes(t.id))).map((e=>({...e,selected:!e.selected}))),n)},wo=(e,t,n=Bn(),i=Tn.dispatch,o=!1)=>{const{currentPageId:r}=an(),s=(e,t)=>t.findIndex((t=>t===e.id)),a=(e,i)=>{let o=s(e,i.children),a=null;do{o=t===Ct.UP?o-1:t===Ct.DOWN?o+1:t===Ct.TOP?0:i.children.length-1,a=ei(i.children[o],n)}while(a&&a.pageNames.length&&!a.pageNames.includes(r));return o},l=e.map((e=>({el:e,parent:oi(e,n)}))).filter((({el:e,parent:t})=>(t||console.warn("No parent, are you trying to move the root element?",{el:e,parent:t}),!!e&&!!t))).map((({el:e,parent:t})=>({el:e,parent:t,idx:a(e,t)}))).sort(((e,n)=>(n.idx-e.idx)*(t===Ct.UP||t===Ct.TOP?-1:1))).reduce(((e,{el:t,parent:n,idx:i})=>{const o=e.has(n)?e.get(n):{children:n.children,parent:n,beforeMe:0,errored:!1},r=s(t,o.children),a=i;return e.set(n,{parent:o.parent,children:a!==r?Hn(o.children.filter(((e,t)=>t!==r)),a,t.id):o.children,errored:o.errored||a<0||a>=o.parent.children.length,beforeMe:o.beforeMe+1}),e}),new Map),c=Array.from(l.values()).filter((e=>!e.errored&&JSON.stringify(e.children)!==JSON.stringify(e.parent.children))).map((e=>({...e.parent,children:e.children})));c.length&&Rn(c,i)},xo=(e,t,n=Bn(),i=Tn.dispatch)=>{Rn([{...e,visibility:{...e.visibility,desktop:t}}],i)},Co=(e,t,n,i=an().mobileEditor,o=Tn.dispatch)=>{const r={};r[e]=t,To(r,n,i,o)},To=(e,t,n=an().mobileEditor,i=Tn.dispatch)=>{Rn(t.map((t=>({...t,style:qn(n,t.style,e)}))),i)};function ko(e,t=Bn(),n=Tn.dispatch){Rn(ci(t).map((t=>({...t,attr:e}))),n)}function Io(e,t=Bn(),n=Tn.dispatch){Rn(ci(t).map((t=>({...t,classList:[...new Set(e.split(" ").filter((e=>""!==e)))]}))),n)}async function Ao({type:e,parent:t,style:n,componentName:i},o=Tn.dispatch){const[r,s]=await io({type:e,parent:t,componentName:i,isSectionContent:!1}),{currentPageId:a}=an(),l={...r,pageNames:t.pageNames.length||di(t)?[]:[a]},c=await(async()=>{if(e===wt.SECTION){if(!si(t))throw new Error("Sections can only be added to the body");const[e,n]=await io({type:wt.CONTAINER,parent:l,componentName:null,isSectionContent:!0}),i={...e,classList:e.classList.concat([jt.ELEMENT_CONTENT_CLASS_NAME,jt.WEBSITE_WIDTH_CLASS_NAME,jt.PREVENT_DRAGGABLE_CLASS_NAME])};return Pn([n,i],o),ei(n.id,Bn())}return Pn([l],o),ei(l.id,Bn())})();return Rn(ci(Bn()).filter((e=>e!==t&&e!==c)).map((e=>({...e,selected:!1}))).concat([{...c,selected:!0,style:{mobile:{...c.style.mobile,...n.mobile},desktop:{...c.style.desktop,...n.desktop}}},{...s,selected:!1}]),o),[ei(l.id,Bn()),ei(s.id,Bn())]}function _o(e=ci()){const t=ai(),n=e.filter((e=>e!==t));n.length<=0?me.alert("Delete elements","Error: Please select an element to delete.",(()=>{})):me.confirm("Delete elements",`I am about to <strong>delete ${n.length} element(s)</strong>, are you sure?`,(e=>{e&&(Oo(n),Eo())}),"delete","cancel")}function Oo(e,t=Bn(),n=Tn.dispatch){const i=e.map((e=>li(e,t))),o=i.concat(i.reduce(((e,n)=>e.concat(ii(n,t))),[]));Rn(t.filter((e=>!o.includes(e))).filter((e=>e.children.some((e=>!!o.find((t=>t.id===e)))))).map((e=>({...e,children:e.children.filter((e=>!o.find((t=>t.id===e))))}))),n),Mn(o,n)}function Lo(e,t,n=Bn(),i=Tn.dispatch){Rn(e.map((e=>li(e,n))).map((e=>({...e,pageNames:e.pageNames.concat([t.id])}))),i)}function No(e,t,n=Bn(),i=Tn.dispatch){Rn(e.map((e=>li(e))).map((e=>({...e,pageNames:e.pageNames.filter((e=>e!==t.id))}))),i)}function Do(e,t=Tn.dispatch){Rn(e.map((e=>({...e,pageNames:[]}))),t)}function Po(e,t,n=Tn.dispatch){Rn(e.map((e=>({...e,link:t}))),n)}function Mo(e,t=Tn.dispatch){Rn(e.map((e=>({...e,link:null}))),t)}function Ro(e,t=ui()){const n=an().mobileEditor?"mobile":"desktop";wo(t.filter((e=>"static"===e.style[n].position)),e),wo(t.filter((e=>"static"!==e.style[n].position)),function(e){switch(e){case Ct.UP:return Ct.DOWN;case Ct.DOWN:return Ct.UP;case Ct.TOP:return Ct.BOTTOM;case Ct.BOTTOM:return Ct.TOP}}(e))}function Bo(e){if(e.inc||e.dec){const t=parseInt(e.value),n=e.multiply?10:e.divide?1:5;return t+(e.inc?n:-n)+"px"}return e.value}function Wo(e,{altKey:t,ctrlKey:n,shiftKey:i}){if(t)return;const o=an().mobileEditor?"mobile":"desktop";Rn(ui().filter((e=>"static"!==e.style[o].position)).map((t=>({...t,style:{...t.style,[o]:{...t.style[o],top:Bo({value:t.style[o].top,inc:e===xt.DOWN,dec:e===xt.UP,multiply:n,divide:i}),left:Bo({value:t.style[o].left,inc:e===xt.RIGHT,dec:e===xt.LEFT,multiply:n,divide:i})}}})))),Ro(function(e){switch(e){case xt.UP:return Ct.UP;case xt.DOWN:return Ct.DOWN;case xt.LEFT:return Ct.TOP;case xt.RIGHT:return Ct.BOTTOM}}(e),ui().filter((e=>"static"===e.style[o].position)))}function Ho(){Ro(Ct.UP)}function jo(){Ro(Ct.DOWN)}function zo(){Ro(Ct.TOP)}function qo(){Ro(Ct.BOTTOM)}function Uo(e,t){Rn([{...e,innerHtml:`<img src="${t}" />`}]);const n=Fn(Yo(),e).querySelector("img");n.addEventListener("load",(()=>{const t=ei(e.id);Rn([{...t,style:{...t.style,desktop:{...t.style.desktop,width:n.naturalWidth+"px",height:n.naturalHeight+"px"}}}])}))}let $o;function Fo(){$o=$o||new Ko}function Go(e,t,n){return Fo(),$o.setHtml(e,t,n)}function Vo(){return Fo(),$o.getSiteWindow()}function Yo(){return Fo(),$o.getSiteDocument()}function Xo(){return Fo(),$o.iframe}class Ko{constructor(){this.iframe=document.createElement("iframe"),this.iframe.id="silex-stage-iframe",this.iframe.className="silex-stage-iframe notranslate",this.iframe.src="about:blank",document.querySelector(".silex-stage").appendChild(this.iframe);const e=this.getSiteDocument();e.open(),e.write(""),e.close()}getSiteWindow(){return this.iframe.contentWindow}getSiteDocument(){return this.iframe.contentDocument}setHtml(e,t,n){const i=Yo();ma&&ma.cleanup(),i.open(),i.write(""),i.close(),i.open(),i.write(e),i.close(),this.contentChanged(t)}contentChanged(e){const t=Yo(),n=Vo();var i;null!==t.body&&null!==n&&null!==n.jQuery?(e&&e(),Ti(),i=this.iframe,ma||(ma=new ba),ma.init(i),Eo()):setTimeout((()=>{this.contentChanged(e)}))}getHtml(){const e=this.getHtmlGenerator();let t=null;do{t=e.next()}while(!t.done);return t.value}getHtmlAsync(e){const t=this.getHtmlGenerator();this.getHtmlNextStep(e,t)}getHtmlNextStep(e,t){const n=t.next();n.done?setTimeout((()=>e(n.value)),0):setTimeout((()=>this.getHtmlNextStep(e,t)),0)}*getHtmlGenerator(){const e=mo();yield;const t=Yo().cloneNode(!0);var n;yield,t.querySelector("."+jt.INLINE_STYLE_TAG_CLASS_NAME).innerHTML=e,yield,n=t,Array.from(n.querySelectorAll(".wysihtml-editor")).forEach((e=>{e.classList.remove("wysihtml-sandbox"),e.removeAttribute("contenteditable")})),yield;let i=t.documentElement.outerHTML;return yield,i="<!DOCTYPE html>"+i,i}}function Zo(){const e=Qo(ci().map((e=>li(e))));sn({...an(),clipboard:e})}function Jo(){const e=ci().map((e=>li(e)));if(e.length){const t=[],n=[];e.forEach((e=>{const i=er(e);t.push(...i),n.push(...i.filter((e=>e.selected)))})),or({parent:oi(e[0]),rootElements:n,allElements:t})}}function Qo(e,t=Bn()){const n=ai(t),i=jn(e.filter((e=>e!==n)).map((e=>li(e,t))).filter((n=>!e.includes(oi(n,t))&&1===e.filter((e=>e===n)).length)).map((e=>er(e,null,t))));return[i,i.filter((e=>e.selected))]}function er(e,t=null,n=Bn()){return tr(e,t,n).map((e=>{const t=e;return delete t.parentId,t}))}function tr(e,t,n){if(e){const i=ao(),o=jn(e.children.map((e=>tr(ei(e,n),i,n)))),r=o.filter((e=>e.parentId===i));return[{...Nn([e])[0],id:i,parentId:t,selected:null===t,children:r.map((e=>e.id))}].concat(o)}throw new Error("Element could not be cloned because it could not be found")}function nr(){return!!an().clipboard}function ir(){const[e,t]=an().clipboard,n=ho(!1,Xo()),{currentPageId:i}=an();or({parent:n,rootElements:t,allElements:e,pageNames:!n||di(n)?[]:[i]});const o=Qo(t);sn({...an(),clipboard:o})}function or({parent:e,rootElements:t,allElements:n,pageNames:i=null},o=Bn(),r=Tn.dispatch){if(n.length>0){const s=o.filter((e=>e.selected)).map((e=>({...e,selected:!1}))),a=Xo().getBoundingClientRect(),l=Fn(Yo(),e).getBoundingClientRect();let c=0;Pn(Ln(n.map((e=>{const n=t.includes(e),{left:o,top:r}=po({stageSize:a,parentSize:l,elementSize:{width:parseInt(e.style.desktop.width),height:parseInt(e.style.desktop.height)},offset:c});return n&&(c+=20),{...e,pageNames:i||e.pageNames,style:{...e.style,desktop:n&&"static"!==e.style.desktop.position?{...e.style.desktop,top:r+"px",left:o+"px"}:e.style.desktop}}}))),r);const u=ai(o),d=t.filter((e=>e.type!==wt.SECTION)).map((e=>e.id)),h=t.filter((e=>e.type===wt.SECTION)).map((e=>e.id));Rn((d.length?[{...e,children:e.children.concat(d)}]:[]).concat(h.length?{...u,children:u.children.concat(h)}:[]).concat(s.length?s:[]),r),console.info("could be dragged")}}const rr=(e,t=Yi())=>t.find((t=>t.id===e)),sr=(e=an(),t=Yi())=>rr(e.currentPageId,t);class ar{constructor(e,t){this.element=e,this.lockOnChange=!1;const n=window.monaco;if(n){this.editor=n.editor.create(e.querySelector(".ace-editor"),{value:"",language:t,theme:"vs-dark"}),this.editor.onDidChangeModelContent((e=>{this.lockOnChange||this.contentChanged()}));const i=e.querySelector(".dock-btn");i&&i.addEventListener("click",(()=>{ar.isDocked=!ar.isDocked,this.dockPanel(ar.isDocked),this.setOptions(),this.editor.render(),this.editor.layout(),this.editor.focus()}),!1),this.modalDialog=new $t({name:`${t} Editor`,element:e,onOpen:e=>{this.setOptions(),this.editor.render(),this.editor.layout(),this.editor.focus()},onClose:()=>{}})}else me.alert("Error","The monaco editor did not load. This is required by Silex, please try reloading the page or build Silex again.",(()=>{}))}dockPanel(e){const{cssEditor:t,jsEditor:n,htmlEditor:i}=Ft(),o=va();e?(document.body.classList.add("dock-editors"),o.addRight(t),o.addRight(n),o.addRight(i)):(document.body.classList.remove("dock-editors"),o.remove(t),o.remove(n),o.remove(i))}setOptions(){this.editor.updateOptions({lineNumbers:ar.isDocked?"off":"on",minimap:{enabled:!ar.isDocked}})}open(){this.modalDialog.open()}close(){this.modalDialog.close()}setReadOnly(e){this.editor.updateOptions({readOnly:e})}getValue(){return this.editor.getValue()}setValue(e){this.setReadOnly(!1),e!==this.getValue()&&(this.lockOnChange=!0,this.editor.setValue(e),this.lockOnChange=!1)}setError(e){this.setReadOnly(!0),this.lockOnChange=!0,this.editor.setValue(e),this.lockOnChange=!1}contentChanged(){throw new Error("to be overridden in sub classes")}}let lr;function cr(){return lr.open()}class ur extends ar{constructor(e){super(e,"html"),mi((()=>{this.redraw()})),Wn(((e,t)=>{this.redraw()}))}forSelection({htmlBox:e,body:t,error:n}){const i=ci();if(1===i.length){const o=Fn(Yo(),i[0]);i[0].type===wt.HTML?e(i[0]):o&&"body"===o.tagName.toLowerCase()?t():n()}else n()}redraw(){const e=fi().headUser;this.forSelection({htmlBox:e=>this.setValue(e.innerHtml),body:()=>this.setValue(e),error:()=>this.setError("-select an HTML box-")})}contentChanged(){this.forSelection({htmlBox:e=>Rn([{...e,innerHtml:this.getValue()}]),body:()=>pi({...fi(),headUser:this.getValue()}),error:()=>{}})}}class dr{constructor(e){this.nextId=0,this.shortcuts=new Map,this.attach(e)}static isInput(e){return!e.tagName||"INPUT"===e.tagName.toUpperCase()||"TEXTAREA"===e.tagName.toUpperCase()||"true"===e.getAttribute("contenteditable")}attach(e){const t=e=>this.handleKeyDown(e);return e.addEventListener("keydown",t),()=>{e.removeEventListener("keydown",t)}}addShortcut(e,t){const n=e.key.toLowerCase();if(!t||!n)throw new Error("Can not add shortcut, callback and key are required");this.shortcuts.has(n)||this.shortcuts.set(n,[]);const i=this.nextId++;return this.shortcuts.get(n).push({s:e,cbk:t,id:i}),()=>{const e=this.shortcuts.get(n),t=e.findIndex((e=>e.id===i));t>=0&&e.splice(t,1)}}handleKeyDown(e){if(!e.defaultPrevented)if(me.isActive)"Enter"===e.key&&me.close(!0,e),"Escape"===e.key&&me.close(!1,e);else{const t=this.getShortcutsFromEvent(e);t.length>0&&(t.forEach((t=>{e.defaultPrevented||t.cbk(e)})),e.preventDefault())}}getShortcutsFromEvent(e){const t=e.key.toLowerCase();if(!this.shortcuts.has(t))return[];const n=e.ctrlKey||e.metaKey;return this.shortcuts.get(t).filter((t=>(!1===t.s.modifiers||(t.s.shiftKey||!1)===e.shiftKey&&(t.s.altKey||!1)===e.altKey&&(t.s.ctrlKey||!1)===n)&&(!1!==t.s.input||!dr.isInput(e.target))))}}const hr=(e,t=an(),n=Tn.dispatch)=>sn({...t,currentPageId:e.id},n),pr=(e,t=an(),n=Tn.dispatch)=>sn({...t,dialogs:t.dialogs.concat(e)},n),fr=(e,t=an(),n=Tn.dispatch)=>sn({...t,dialogs:t.dialogs.filter((t=>t.id!==e.id||t.type!==e.type))},n),mr=(e,t=an(),n=Tn.dispatch)=>sn({...t,dialogs:t.dialogs.map((t=>t.type===e.type&&t.visible!==(t.id===e.id)?{...t,visible:t.id===e.id}:t))},n);function gr(){return Er(null).then((({id:e,displayName:t})=>{const n=Yi().find((t=>t.id===e));n?(hr(n),me.notifyError("Page not created: page already exists")):$i(zi([{id:e,displayName:t,link:{linkType:Tt.PAGE,href:jt.PAGE_NAME_PREFIX+e},canDelete:!0,canRename:!0,canMove:!0,canProperties:!0}]))})).catch((e=>{}))}function br(e=sr()){Er(e).then((({id:t,displayName:n})=>{e.canRename?Gi([{...e,id:t,displayName:n,link:{linkType:Tt.PAGE,href:jt.PAGE_NAME_PREFIX+t}}]):me.alert("Error","I can not rename this page because <strong>it is a protected page</strong>.",(()=>{}))})).catch((e=>{}))}function yr(e=sr()){me.confirm("Delete page",`I am about to <strong>delete the page "${e.displayName}"</strong>, are you sure?`,(t=>{var n;t&&(n=e,Yi().length<2?me.alert("Error","I can not delete this page because <strong>it is the only page</strong>.",(()=>{})):n.canDelete?Fi([n]):me.alert("Error","I can not delete this page because <strong>it is a protected page</strong>.",(()=>{})))}),"delete","cancel")}function vr(e,t){Vi({page:e,idx:t})}function Er(e=null){return new Promise(((t,n)=>{const i=document.createElement("div");i.innerHTML=`\n      Page Name\n      <input\n        autofocus\n        id="page-property-name"\n        class="block-dialog"\n        placeholder="Your page name here"\n        value="${e?e.displayName:""}"\n        ${!e||e.canRename?"":"disabled"}\n        />\n    `;const o=i.querySelector("#page-property-name");me.confirm(e?"Page Properties":"New page","",(e=>{const i=o.value;if(e&&i&&i.length>0){const e=jt.PAGE_ID_PREFIX+i.replace(/\W+/g,"-").toLowerCase();t({id:e,displayName:i})}else n("Canceled")})),me.setContent(i)}))}let Sr;class wr extends ar{constructor(e){super(e,"css"),mi(((e,t)=>{t.headStyle!==this.getValue()&&this.setValue(t.headStyle)}))}contentChanged(){pi({...fi(),headStyle:this.getValue()})}}class xr{static getInstance(){return xr.instance=xr.instance||new xr,xr.instance}publish(e,t,n){this.callServer("/tasks/publish",JSON.stringify(e),"POST",(e=>t(e)),n)}publishState(e,t){this.callServer("/tasks/publishState","","GET",e,t)}hosting(e,t){this.callServer("/hosting/","","GET",e,t)}authorize(e,t,n){this.callServer(e.authorizeUrl,"","POST",t,n)}vhosts(e,t,n){this.callServer(e.vhostsUrl,"","GET",t,n)}domain(e,t,n){this.callServer(e.domainUrl,"","GET",t,n)}updateDomain(e,t,n,i){this.callServer(e.domainUrl,JSON.stringify({domain:t}),"POST",n,i)}removeDomain(e,t,n,i){this.callServer(e.domainUrl,JSON.stringify({domain:t}),"DELETE",n,i)}callServer(e,t,n,i,o){const r=new XMLHttpRequest;r.addEventListener("load",(e=>{let t=r.responseText,n=null;try{n=JSON.parse(r.responseText),t=n.message}catch(e){}200===r.status?i(n||r.responseText):(console.error("Error while trying to connect with back end",t),o&&o(n?n.message:t))})),r.addEventListener("error",(e=>{console.error("could not load website",e),o&&o("Network error, please check your internet connection or try again later.")})),r.open(n,e),r.setRequestHeader("Content-Type","application/json"),r.send(t)}}function Cr(){const e=window.localStorage.getItem("silex:recent-files");return e?JSON.parse(e):[]}function Tr(e){const t=[e,...Cr().filter(((t,n)=>t.absPath!==e.absPath&&n<5))];window.localStorage.setItem("silex:recent-files",JSON.stringify(t))}const kr=xr.getInstance();function Ir(e){sn({...an(),loading:e?he.SILEX:he.NONE})}function Ar(){Ir(!1),me.close()}function _r(e,t,n){return new Promise(((i,o)=>{e||0===t.providers.length?i({file:null,publicationPath:null,provider:null}):!0===t.skipHostingSelection?i(Or(t.providers[0])):i(function(e,t){return new Promise(((n,i)=>{me.prompt("Publication","unused","unused","unused",(t=>{if(t){const t=r.selectedIndex,i=e[t];n(Or(i))}else n(null)}),"next","cancel");const o=document.createElement("div");o.insertAdjacentHTML("afterbegin",`\n      <p>Choose the hosting provider you love!\n      (<a href="https://github.com/silexlabs/Silex/wiki/Publishing-and-Releasing-Your-Website#hosting-providers" target="_blank" title="About hosting providers" class="help-btn">\n          <span class="label">more info here</span>\n      </a>)</p>\n      <br />\n      <select class="providers">\n        ${e.map((e=>`<option value="${e.name}">${e.displayName}</option>`))}\n      </select>\n      <br />\n    `),me.setContent(o);const r=o.querySelector(".providers");t&&(r.value=t)}))}(t.providers,n))}))}function Or(e){return new Promise(((t,n)=>{pi({...fi(),hostingProvider:e.name}),e.skipFolderSelection?t(Lr(e)):Vt.getInstance().openFolder().then((n=>{pi({...fi(),publicationPath:n}),t(Lr(e))}))}))}function Lr(e){return new Promise(((t,n)=>{e.isLoggedIn?t(Nr(e)):(Ir(!0),kr.authorize(e,(n=>{Ir(!1),me.confirm("Publication",`\n          Please&nbsp;<a href="${n}" target="_blank">click here and login to ${e.displayName}.</a>, then click "next".\n        `,(()=>{t(Nr(e))}),"next","cancel")}),(e=>n(e))))}))}function Nr(e){return new Promise(((t,n)=>{e.vhostsUrl?(Ir(!0),kr.vhosts(e,(n=>{if(Ir(!1),0===n.length)me.alert("Publication",`Please click here to\n            <a href="${e.dashboardUrl}" target="_blank">\n              ${e.pleaseCreateAVhost}\n            </a>\n          `,(()=>{t(Nr(e))}),"Check again");else if(!0===e.skipVhostSelection)t(Dr(e,n[0]));else{me.prompt("Publication","unused","unused","unused",(i=>{if(i){const i=o.selectedIndex,r=n[i];t(Dr(e,r))}}),"next","cancel");const i=document.createElement("div");i.insertAdjacentHTML("afterbegin",`\n              <p>Choose the website you are working on</p>\n              <select class="vhosts">\n                ${n.map((e=>`<option value="${e.name}">${e.name}</option>`))}\n              </select>\n              <br />\n            `),me.setContent(i);const o=i.querySelector(".vhosts"),r=fi().publicationPath;r&&(o.value=r.folder)}}),(e=>n(e)))):t({file:fi().file,publicationPath:fi().publicationPath,provider:e})}))}function Dr(e,t){return new Promise(((n,i)=>{pi({...fi(),websiteUrl:t.url}),!0===t.skipDomainSelection?n({file:fi().file,publicationPath:t.publicationPath,provider:e}):(Ir(!0),kr.domain(t,(o=>{const r=o.domain;o.url&&pi({...fi(),websiteUrl:o.url}),Ir(!1);const s=r||"";me.prompt("Publication","\n          <h3>Optional: provide your domain name<h3>\n          <p>Choose the domain you want associated with this website. Leave blank and you will be provided with a generic domain.</p>\n        "+(e.buyDomainUrl?`\n          <p>You can also <a target="_blank" href="${e.buyDomainUrl}">buy a domain name here.</a></p>\n        `:""),s,"[Optional] your-domain.com",((o,r)=>{const a=i=>{i.url&&pi({...fi(),websiteUrl:i.url}),Ir(!1),me.notifySuccess("Domain updated"),n({file:fi().file,publicationPath:t.publicationPath,provider:e})};o?r!==s?(Ir(!0),""!==r?kr.updateDomain(t,r,(e=>a(e)),(e=>i(e))):kr.removeDomain(t,r,(e=>a(e)),(e=>i(e)))):n({file:fi().file,publicationPath:t.publicationPath,provider:e}):n(null)}),"next","cancel")}),(e=>i(e))))}))}let Pr;class Mr extends ar{constructor(e){super(e,"javascript"),mi(((e,t)=>{t.headScript!==this.getValue()&&this.setValue(t.headScript)}))}contentChanged(){pi({...fi(),headScript:this.getValue()})}}function Rr({site:e,pages:t,elements:n},i=Tn.dispatch){hi(e,i),Ui(t,i),Dn(n,i)}const Br="silex-caping",Wr=function(){try{const e=window.localStorage.getItem(Br),t=e?parseInt(e,10)+1:1;return window.localStorage.setItem(Br,t.toString()),t}catch(e){return-1}}();function Hr(){return Wr}function jr(e,t,n,i){try{!window.localStorage.getItem(n)&&Wr>e&&setTimeout((()=>{window.localStorage.getItem(n)||(window.localStorage.setItem(n,"done"),console.log("done"),i())}),1e3*t)}catch(e){}}class zr{constructor(e){this.element=e,this.init()}init(){this.element.classList.add("tip-of-the-day"),this.element.classList.add("loading");const e=Hr(),t=new XMLHttpRequest;t.open("GET","https://api.github.com/repos/silexlabs/Silex/issues?labels=tip-of-the-day"),t.send(),t.addEventListener("error",(e=>{(this.element.querySelector(".container")||this.element).innerHTML="It looks like you are offline. I could not load data from github issues",this.element.classList.remove("loading")})),t.addEventListener("load",(n=>{const i=JSON.parse(t.responseText),o=i[i.length-e%i.length-1];if(o){const e=document.createElement("div");e.innerHTML=o.body;const t=e.querySelector("a"),n=document.createElement("a");n.target="_blank",n.title=o.title,n.innerHTML="<h3>"+o.title+"</h3><p>"+this.strip(o.body)+"</p>",null!=t&&(n.href=t.href),(this.element.querySelector(".container")||this.element).appendChild(n)}this.element.classList.remove("loading")}))}strip(e){const t=document.createElement("DIV");return t.innerHTML=e,t.textContent||t.innerText||""}}let qr,Ur;class $r{constructor(e){if(this.element=e,this.readyCbk=null,this.errorCbk=null,this.selected=null,this.state="",this.modalDialog=new $t({name:"Dashboard",element:e,onOpen:e=>this.redraw(),onClose:()=>{}}),de.singleSiteMode)return;const t=(e,t,n,i,o)=>{const r=`/get/${n}`,s=new XMLHttpRequest;s.addEventListener("error",(t=>{e.innerHTML="It looks like you are offline. I could not load data from github issues",i()})),s.addEventListener("load",(o=>{const r=JSON.parse(s.responseText);this.renderTemplateList(e,t,n,r),i()})),s.open("GET",r),s.send()};this.element.querySelector(".body").onclick=e=>{const t=e.target,n=t.getAttribute("data-editable")||t.parentElement.getAttribute("data-editable"),i=t.getAttribute("data-file-info")||t.parentElement.getAttribute("data-file-info");if(n||i)return this.selected={fileInfo:JSON.parse(i),url:n},this.modalDialog.close(),e.preventDefault(),!1};const n=e=>{if(e.length>0){const i=e.pop(),o=this.element.querySelector(i.selector);o?t(o,i.className,i.repo,(()=>n(e))):n(e)}else this.state="ready",this.readyCbk&&this.readyCbk(),this.readyCbk=null,this.errorCbk=null};n([{selector:".general-pane ul",repo:"silex-templates",className:"silex-templates"},{selector:".general-pane ul",repo:"silex-blank-templates",className:"silex-blank-templates"}]),this.element.querySelector(".clear-btn").onclick=e=>{window.localStorage.removeItem("silex:recent-files"),this.redraw()},this.element.querySelector(".more-btn").onclick=e=>{this.modalDialog.close(),ys(null,null,(()=>this.modalDialog.open()))};const i=this.element.querySelector(".tip-of-the-day");i&&new zr(i)}openDialog(e){de.singleSiteMode?e.ready&&e.ready():("ready"===this.state?e.ready&&e.ready():"error"===this.state?e.error&&e.error():(this.readyCbk=e.ready,this.errorCbk=e.error),this.selected=null,this.modalDialog.onClose=()=>{this.selected?this.selected.fileInfo?e.openFileInfo(this.selected.fileInfo):e.openTemplate(this.selected.url):e.openTemplate(null)},this.modalDialog.open())}renderTemplateList(e,t,n,i){Array.isArray(i)&&i.map((e=>{const i=document.createElement("li");i.classList.add("rendered-item",t);const o=document.createElement("div"),r=`/libs/templates/${n}/${e}`;o.classList.add("thumbnail"),o.style.backgroundImage=`url(${r}/screenshot.png)`,o.setAttribute("data-editable",`${r}/editable.html`),o.setAttribute("data-is-template","true"),i.appendChild(o);const s=document.createElement("div");s.classList.add("ui"),i.appendChild(s);const a=document.createElement("h3");a.innerHTML=e,a.setAttribute("data-editable",`${r}/editable.html`),a.setAttribute("data-is-template","true"),s.appendChild(a);const l=document.createElement("a");l.classList.add("fa","fa-external-link"),l.innerHTML="Preview",l.setAttribute("data-action","preview"),l.target="_blank",l.href=`${r}/index.html`,s.appendChild(l);const c=document.createElement("a");c.classList.add("fa","fa-info"),c.innerHTML="Info",c.target="_blank",c.href=`https://github.com/silexlabs/${n}/blob/gh-pages/${e}/README.md`,c.setAttribute("data-action","info"),s.appendChild(c);const u=document.createElement("a");return u.classList.add("fa","fa-pencil"),u.innerHTML="Select",u.setAttribute("data-editable",`/libs/templates/${n}/${e}/editable.html`),u.setAttribute("data-is-template","true"),s.appendChild(u),i})).forEach((t=>e.appendChild(t)))}redraw(){const e=Cr(),t=this.element.querySelector(".open-pane");e.length>0?t.classList.remove("emty-list"):t.classList.add("emty-list");const n=t.querySelector("ul.list");n.innerHTML="",e.map((e=>{try{const t=document.createElement("li");t.setAttribute("data-file-info",JSON.stringify(e)),t.classList.add("list-item");const n=document.createElement("span");n.setAttribute("data-file-info",JSON.stringify(e));const i=(()=>{switch(e.service){case"github":return["fa","fa-github"];case"dropbox":return["fa","fa-dropbox"];case"webdav":return["fa","fa-cloud-download"];case"ftp":case"sftp":return["fa","fa-server"];case"fs":return["fa","fa-hdd-o"];default:return["fa","fa-cloud"]}})();n.classList.add(...i),t.appendChild(n);const o=document.createElement("span");return o.setAttribute("data-file-info",JSON.stringify(e)),o.innerHTML=e.folder+"<strong>"+(e.name.startsWith("/")?"":"/")+e.name+"</strong>/",t.appendChild(o),t}catch(e){console.error("Catched error: ",e)}return null})).filter((e=>!!e)).forEach((e=>n.appendChild(e)))}}function Fr(){Yr(!1)}function Gr(){Yr(!0)}function Vr(e){if(Ur&&!Ur.closed){if(e)Ur.close(),Ur=window.open(e),Ur.focus();else try{"about:blank"!==Ur.location.href&&Ur.location.reload(!0)}catch(e){Ur.frames[1].location.reload(!0)}Ur.focus()}else e&&(Ur=window.open(e),Ur.focus())}function Yr(e){const t=()=>{fs(fi().file,(()=>{}),(e=>{}))};fi().file&&!fi().isTemplate?((()=>{const t=sr();Vr(e?"./responsize/?url="+window.location.origin+fi().file.absPath+t.link.href:window.location.origin+fi().file.absPath+t.link.href)})(),fn()&&t()):me.alert("Preview website","You need to save the website before I can show a preview",(()=>{t()}))}function Xr(e,t){const n=e.document.body;e.jQuery&&e.jQuery(n).pageable&&e.jQuery(n).pageable({currentPage:t.id})}function Kr(e,t){let n="";return t.forEach((t=>{let i=e;for(const e in t){const n=t[e];i=i.replace(new RegExp("{{"+e+"}}","g"),n)}n+=i})),n}function Zr(e,t){if("body"===e.tagName.toLowerCase())throw new Error("Forbidden to change tag name of body");const n=e.ownerDocument.createElement(t);for(e.getAttributeNames().forEach((t=>n.setAttribute(t,e.getAttribute(t))));e.firstChild;)n.appendChild(e.firstChild);return e.parentNode.replaceChild(n,e),n}function Jr(e,t){let n=e.querySelector("."+jt.JSON_STYLE_TAG_CLASS_NAME);n||(n=e.createElement("script"),n.classList.add(jt.JSON_STYLE_TAG_CLASS_NAME)),n.setAttribute(jt.STATIC_ASSET_ATTR,""),n.innerHTML="\n    window.silex = window.silex || {}\n    window.silex.data = "+JSON.stringify({site:{width:t.site.width},pages:t.pages}),n.type="text/javascript",e.head.insertBefore(n,e.head.firstChild)}const Qr=e=>(t,n=Bn())=>{const i=e.document,o=[];t.forEach((e=>{const t=oi(e,n),r=t?Fn(i,t):i.body;if(function({doc:e,id:t,type:n,parent:i,isSectionContent:o}){let r=null;switch(n){case wt.CONTAINER:r=function(e){const t=e.createElement("div");return t.setAttribute(jt.TYPE_ATTR,wt.CONTAINER),t}(e);break;case wt.SECTION:r=function(e){const t=e.createElement("div");return t.setAttribute(jt.TYPE_ATTR,wt.CONTAINER),t}(e);break;case wt.TEXT:r=function(e){const t=function(e,t){const n=e.createElement("div");n.setAttribute(jt.TYPE_ATTR,t);const i=e.createElement("div");return n.appendChild(i),i.classList.add(jt.ELEMENT_CONTENT_CLASS_NAME),n}(e,wt.TEXT),n=Kn(t);return n.innerHTML="<p>New text box</p>",n.classList.add("normal"),t}(e);break;case wt.HTML:r=function(e){const t=e.createElement("div");t.setAttribute(jt.TYPE_ATTR,wt.HTML);const n=e.createElement("div");return n.innerHTML="<p>New HTML box</p>",t.appendChild(n),n.classList.add(jt.ELEMENT_CONTENT_CLASS_NAME),t}(e);break;case wt.IMAGE:r=function(e){const t=e.createElement("div");return t.setAttribute(jt.TYPE_ATTR,wt.IMAGE),t}(e);break;default:throw new Error("unknown type: "+n)}if(r.classList.add(jt.EDITABLE_CLASS_NAME),r.classList.add(n.toString()),r.setAttribute(jt.ELEMENT_ID_ATTR_NAME,t),r.classList.add(t),i){if(n===wt.SECTION&&i!==e.body)throw new Error("Section can only be added to the body");i.appendChild(r)}else console.info("element not yet created in the dom")}({doc:i,id:e.id,type:e.type,parent:r,isSectionContent:e.isSectionContent}),t&&!r)console.warn("no parent element yet but will come soon hopefully");else{const t=oo({id:e.id,type:e.type,isSectionContent:e.isSectionContent,isBody:!1});o.push({from:t,to:e})}})),o.length&&(ts(e)(o,n),setTimeout((()=>{o.find((({to:e})=>Ai(e)))&&Di()})))},es=e=>t=>{const n=e.document;t.map((e=>(Vn(n,e.id,!0),Vn(n,e.id,!1),Fn(n,e)))).forEach((e=>{!function(e){e.remove()}(e)})),setTimeout((()=>{t.find((e=>Ai(e)))&&Di()}),0)},ts=e=>(t,n=Bn())=>{const i=e.document;t.forEach((({from:t,to:o})=>{const r=Fn(i,o);if(o.pageNames!==t.pageNames){const e=Yi();(function(e,t,n){!function(e,t){e.forEach((e=>{t.classList.remove(e)})),t.classList.remove(jt.PAGED_CLASS_NAME),t.classList.remove(jt.PAGED_VISIBLE_CLASS_NAME),t.classList.remove(jt.PAGED_HIDDEN_CLASS_NAME)}(e.map((e=>e.id)),t),n.forEach((e=>{e?(t.classList.add(e.id),t.classList.add(jt.PAGED_CLASS_NAME)):console.error("This page does not exist anymore")}))})(e,r,o.pageNames.map((t=>e.find((e=>e.id===t))))),Xr(Vo(),sr())}var s,a;if(o.children!==t.children&&function(e,t){t.forEach((t=>{e.appendChild(t)}))}(r,o.children.map((e=>ei(e,n))).filter((e=>!!e)).map((e=>Fn(i,e))).filter((e=>!!e))),o.link!==t.link&&(s=r,(a=o.link)?s.setAttribute(jt.LINK_ATTR,a.href):s.removeAttribute(jt.LINK_ATTR)),o.attr!==t.attr){const e=t.attr||{};Object.entries(e).forEach((([e,t])=>{try{r.removeAttribute(e)}catch(n){console.error("could not remove HTML attr",{name:e,val:t,domEl:r})}}));const n=o.attr||{};Object.entries(n).forEach((([e,t])=>{try{r.setAttribute(e,t||"")}catch(n){console.error("could not add HTML attr",{name:e,val:t,domEl:r})}}))}if(o.classList!==t.classList&&(t.classList.forEach((e=>r.classList.remove(e))),r.classList.add(...o.classList)),o.visibility.desktop!==t.visibility.desktop&&(o.visibility.desktop?function(e){e.classList.remove(jt.HIDE_ON_DESKTOP)}(r):function(e){e.classList.add(jt.HIDE_ON_DESKTOP)}(r)),o.visibility.mobile!==t.visibility.mobile&&(o.visibility.mobile?function(e){e.classList.remove(jt.HIDE_ON_MOBILE)}(r):function(e){e.classList.add(jt.HIDE_ON_MOBILE)}(r)),o.link?"A"!==r.tagName&&(Zr(r,"A"),sa()):o.tagName.toUpperCase()!==r.tagName.toUpperCase()&&Zr(r,o.tagName),o.alt!==t.alt){const e=r.querySelector("img");e?e.alt=o.alt:console.error("could not set alt attribute as no image element was found")}o.title!==t.title&&(r.title=o.title),o.innerHtml!==t.innerHtml&&function(e,t){Kn(e).innerHTML=function(e){return e.replace(/<script.*class="silex-script".*?>/gi,'<script type="text/notjavascript" class="silex-script">')}(t)}(r,o.innerHtml),o.style!==t.style&&(Yn(i,o,!0),Yn(i,o,!1)),!Ai(o)||t.style.mobile.width===o.style.mobile.width&&t.style.mobile.height===o.style.mobile.height&&t.style.desktop.width===o.style.desktop.width&&t.style.desktop.height===o.style.desktop.height&&o.innerHtml===t.innerHtml||function(e,t){const n=t.querySelectorAll("script");for(const t of n)e.eval(t.innerText)}(e,r)})),Jr(i,On())};function ns(e){Jr(Yo(),On())}function is(e,t=!1,n=Bn(),i=Tn.dispatch){function o(e){e.forEach((e=>{Mn([e],i)}))}e.forEach((r=>{const s=n.filter((e=>e.pageNames.includes(r.id))),a=s.filter((e=>1===e.pageNames.length));a.length>0&&(t?o(a):me.confirm("Delete elements",`\n          ${a.length} elements were only visible on this page (${r.id}).\n          <br /><ul>\n            <li>Do you want me to <strong>delete these elements?</strong><br /></li>\n            <li>or keep them and <strong>make them visible on all pages?</strong></li>\n          </ul>\n        `,(e=>{e&&o(a)}),"delete","keep")),setTimeout((()=>{Rn(s.map((e=>({...e,pageNames:e.pageNames.filter((e=>e!==r.id))}))),i),Rn(e.reduce(((e,t)=>e.concat(Bn().filter((e=>!!e.link&&e.link.linkType===Tt.PAGE&&e.link.href===t.link.href)).map((e=>({from:e,to:{...e,link:null}}))))),[]))}),0)})),Jr(Yo(),On())}const os=(e,t)=>!!e.link&&e.link.linkType===Tt.PAGE&&e.link.href===t.link.href,rs=(e,t)=>!!e.pageNames.length&&e.pageNames.includes(t.id);function ss(e,t=Bn(),n=Tn.dispatch){e.forEach((({from:e,to:i})=>{e&&e.id===i.id&&e.link===i.link||(setTimeout((()=>{const o=t.filter((t=>rs(t,e)||os(t,e))).map((t=>({...t,link:os(t,e)?i.link:t.link,pageNames:rs(t,e)?t.pageNames.map((t=>t===e.id?i.id:t)):t.pageNames}))),r=[],s=Yo();Array.from(s.querySelectorAll(`[href="${e.link.href}"], [href^="${e.link.href}#"]`)).forEach((t=>{t.setAttribute("href",t.getAttribute("href").replace(e.link.href,i.link.href)),r.push(t)})),[...new Set(r)].forEach((e=>{const[n,i]=function(e,t,n){let i=t;do{const t=ti(e,i,n);if(t)return[t,i];i=i.parentElement}while(i);return[null,null]}(s,e,t);if(n&&(n.type===wt.HTML||n.type===wt.TEXT)){const e=o.find((e=>e.id===n.id));e?e.innerHtml=Zn(i):o.push({...n,innerHtml:Zn(i)})}})),o.length&&Rn(o,n)}),0),e.id===an().currentPageId&&sn({...an(),currentPageId:i.id}))})),Jr(Yo(),On())}function as(e,t,n,i="property"){let o=e.querySelector(`meta[${i}="${t}"], meta[name="${t}"]`);!o&&n&&""!==n?(o=e.createElement("meta"),o.setAttribute(i,t),o.content=n,e.head.appendChild(o)):n&&""!==n?(o.setAttribute("content",n),o.removeAttribute("name"),o.setAttribute(i,t)):o&&o.parentElement.removeChild(o)}var ls=n(1528);function cs(e,t){const n=Yo();if(e&&e.headStyle===t.headStyle||function(e,t){let n=e.head.querySelector("."+jt.SILEX_STYLE_ELEMENT_CSS_CLASS);n||(n=e.createElement("style"),n.className=jt.SILEX_STYLE_ELEMENT_CSS_CLASS,e.head.appendChild(n)),n.innerHTML=t}(n,t.headStyle),e&&e.headScript===t.headScript||function(e,t){let n=e.head.querySelector("."+jt.SILEX_SCRIPT_ELEMENT_CSS_CLASS);n||(n=e.createElement("script"),n.type="text/javascript",n.className=jt.SILEX_SCRIPT_ELEMENT_CSS_CLASS,e.head.appendChild(n)),n.innerHTML=t}(n,t.headScript),e&&e.title===t.title||function(e,t){let n=e.head.querySelector("title");n||(n=e.createElement("title"),e.head.appendChild(n)),n.innerHTML=t||""}(n,t.title),e&&e.description===t.description||function(e,t){as(e,"description",t)}(n,t.description),e&&e.enableMobile===t.enableMobile||function(e,t){if(null===e.body)return;let n=e.querySelector("meta[name=viewport]");!0===t?(e.body.classList.add(jt.ENABLE_MOBILE_CSS_CLASS),n||(n=e.createElement("meta"),n.name="viewport",n.content="width=device-width, initial-scale=1",e.head.appendChild(n))):(e.body.classList.remove(jt.ENABLE_MOBILE_CSS_CLASS),n&&e.head.removeChild(n))}(n,t.enableMobile),e&&e.faviconPath===t.faviconPath||function(e,t){let n=e.head.querySelector('link[rel="shortcut icon"]');n?t||n.parentElement.removeChild(n):t&&(n=e.createElement("link"),n.setAttribute("href",t),n.setAttribute("rel","shortcut icon"),e.head.appendChild(n)),t&&n.setAttribute("href",t)}(n,t.faviconPath),e&&e.thumbnailSocialPath===t.thumbnailSocialPath||function(e,t){as(e,"twitter:card",t?"summary":""),as(e,"twitter:image",t),as(e,"og:image",t)}(n,t.thumbnailSocialPath),e&&e.descriptionSocial===t.descriptionSocial||function(e,t){as(e,"twitter:card",t?"summary":""),as(e,"twitter:description",t),as(e,"og:description",t)}(n,t.descriptionSocial),e&&e.titleSocial===t.titleSocial||function(e,t){as(e,"twitter:card",t?"summary_large_image":"","name"),as(e,"og:type",t?"website":""),as(e,"twitter:title",t),as(e,"og:title",t)}(n,t.titleSocial),e&&e.lang===t.lang||function(e,t){e.querySelector("html").lang=t||""}(n,t.lang),e&&e.twitterSocial===t.twitterSocial||function(e,t){as(e,"twitter:card",t?"summary":""),as(e,"twitter:site",t)}(n,t.twitterSocial),e&&e.dataSources===t.dataSources||async function(e,t){try{const t={...e};(await Promise.all(Object.keys(t).map((async e=>{const n=t[e];{const t=await fetch(n.href),i=await t.json(),o=ls.get(i,n.root),r=ls.get(o,"0");return n.data=i,n.structure={},r&&Object.keys(r).forEach((e=>{return n.structure[e]=(t=r[e],Array.isArray(t)?"array":typeof t);var t})),{name:e,dataSource:n}}})))).reduce(((e,t)=>e[t.name]=t.dataSource),{})}catch(e){console.error("could not load data sources",e),me.alert("Error",`There was an error loading the data sources: ${e}`,(()=>{throw e}))}}(t.dataSources),e&&e.fonts===t.fonts||function(e,t){Array.from(e.head.querySelectorAll(`link.${jt.CUSTOM_FONTS_CSS_CLASS}`)).forEach((e=>{e.remove()})),t.forEach((t=>{const n=e.createElement("link");n.href=t.href,n.rel="stylesheet",n.className=jt.CUSTOM_FONTS_CSS_CLASS,e.head.appendChild(n)}))}(n,t.fonts),e&&e.width===t.width||function(e,t){let n=e.head.querySelector(".silex-style-settings");n||(n=e.createElement("style"),n.className="silex-style-settings",e.head.appendChild(n)),n.innerHTML=`\n  .${jt.WEBSITE_WIDTH_CLASS_NAME} {\n    width: ${t}px;\n  }\n  @media (min-width: ${jt.MOBILE_BREAKPOINT+1}px) {\n    .silex-editor {\n      min-width: ${t+200}px;\n    }\n  }\n`}(n,t.width),!e||e.prodotypeDependencies!==t.prodotypeDependencies){const e=Yo().head;Array.from(e.querySelectorAll("[data-dependency]")).forEach((e=>e.remove())),Object.keys(t.prodotypeDependencies).forEach((i=>{t.prodotypeDependencies[i].forEach((t=>{const o=n.createElement(i);o.setAttribute("data-dependency",""),Object.keys(t).forEach((e=>{o.setAttribute(e,t[e])})),e.appendChild(o)}))}))}if(!e||e.styles!==t.styles){const e=Yo().head;Array.from(e.querySelectorAll("[data-style-id]")).forEach((e=>e.remove())),Object.keys(t.styles).forEach((e=>{const n=t.styles[e];Object.keys(n.styles).forEach((t=>{const i=n.styles[t];Object.keys(i).forEach((o=>{const r=i[o];ji(Yo(),e,o,t,r,n.displayName)}))}))}))}Jr(n,On())}function us(e,t){switch(t.mobileEditor?(document.body.classList.add(jt.MOBILE_MODE_CSS_CLASS),fi().enableMobile||me.alert("Mobile editor warning",'\n        Warning: you are entering the mobile editor, but your website is not configured to support it,\n        so you need to open the menu "File", then "Settings" and "Enable mobile version".\n      ',(()=>{}))):document.body.classList.remove(jt.MOBILE_MODE_CSS_CLASS),t.loading){case he.SILEX:document.body.classList.add(jt.LOADING_SILEX_CSS_CLASS);break;case he.WEBSITE:Xo().classList.add(jt.LOADING_SITE_CSS_CLASS);break;default:Xo().classList.remove(jt.LOADING_SITE_CSS_CLASS),document.body.classList.remove(jt.LOADING_SILEX_CSS_CLASS)}e&&e.currentPageId!==t.currentPageId&&(Xr(Vo(),sr()),setTimeout((()=>{const e=ci(),n=e.filter((e=>!!e.pageNames.length&&!e.pageNames.includes(t.currentPageId))).map((e=>({...e,selected:!1})));Rn(n.concat(n.length===e.length?[{...ai(),selected:!0}]:[]))}),0))}let ds=!0;function hs(){ds=!1}function ps(e){return(...t)=>{if(!ds)return e(...t)}}function fs(e,t,n){if(e&&!fi().isTemplate)ms(e,t,n);else{if(de.singleSiteMode)throw new Error('Website has no name and can not "save as" in single site mode');Vt.getInstance().saveAs("editable.html",Vt.HTML_EXTENSIONS).then((e=>{null!=e&&ms(e,t,n)})).catch((e=>{n&&n(e)}))}}function ms(e,t,n){let i=(Fo(),$o.getHtml());i.indexOf("url('&quot;")>-1&&(console.warn("I have found HTML entities in some urls, there is probably an error in the save process."),i=i.replace(/url\('&quot;()(.+?)\1&quot;'\)/gi,((e,t,n)=>"url('"+n+"')"))),pi({...fi(),file:e}),function(e,t,i,o,r){Tr(e),Gt.getInstance().write(e,t,i,(()=>{pi({...fi(),isTemplate:!1}),o&&o()}),((e,t)=>{me.alert("Save website","Error: I did not manage to save the file. \n"+(t||e.message||""),(()=>{n&&n(e)}))}))}(e,i,On(),(()=>{me.notifySuccess("File is saved."),Vr(),pn(),t&&t()}))}function gs(e,t){Ts(e,((e,n)=>t&&t()),((n,i,o)=>{console.error("Could not open recent file",n,i,o),t&&t(),403===o?me.confirm("Open recent file",`Could not open this recent file, you probably need to connect to ${e.service} again.`,(n=>{me.alert("Open recent file",`\n              I am trying to connect you to ${e.service} again,\n              please accept the connection in the popup I have just opened then <strong>please wait</strong>.\n              `,(()=>{})),Gt.getInstance().ce.auth(e.service).then((i=>{me.close(),n&&gs(e,t)}))})):me.confirm("Open recent file",`Could not open this recent file. ${i}`,(e=>{}))}))}function bs(e,t){var n;n={openFileInfo:n=>{n||ws()?n&&gs(n,e):Cs(e,t)},openTemplate:n=>{n||ws()?n&&xs(n,e,((e,n)=>vs(e,n,t,!0))):Cs(e,t)},ready:()=>{e&&e()},error:e=>{console.error("loading templates error"),vs(e,"Loading templates error",t)}},qr=qr||new $r(Ft().dashboard),qr.openDialog(n)}function ys(e,t,n){de.singleSiteMode||Vt.getInstance().openFile(Vt.HTML_EXTENSIONS).then((i=>{i?Ts(i,((t,n)=>{me.notifySuccess((fi().title||"Untitled website")+" opened."),e&&e(i)}),((e,n)=>{me.alert("Open file","Error: I did not manage to open this file. \n"+(n||e.message||""),(()=>{t&&t(e)}))})):n&&n()})).catch((e=>{t&&t(e)}))}function vs(e,t,n,i=!0){console.error("opening template error",e),me.alert("Open file","An error occured. "+t,(()=>{})),n&&n(e),i&&!ws()&&Cs()}function Es(e){console.error("Error: I did not manage to publish the file.",e),me.alert("Publication",`<strong>An error occured.</strong><p>I did not manage to publish the website. ${e}</p><p><a href="${de.ISSUES_SILEX}" target="_blank">Get help in Silex forums.</a></p>`,(()=>{}))}function Ss(){me.isActive?console.warn("Publish canceled because a modal dialog is opened already."):async function(){return new Promise(((e,t)=>{Ir(!0),kr.hosting((t=>{Ir(!1);const n=fi(),i=n.hostingProvider,o=n.publicationPath;if(i&&o){const n=t.providers.find((e=>e.name===i)),r=n?n.displayName||n.name:o.service;me.confirm("Publication",`\n          I am about to publish your website to <strong>${r}</strong>, in the folder ${o.path||"/"}.\n        `,(n=>{n&&e(_r(n,t,i))}),"Continue","Cancel");const s=document.createElement("button");s.innerHTML="Edit",s.onclick=()=>{me.close(),e(_r(!1,t,i))},me.addButton(s)}else e(_r(!1,t,i))}),(e=>t(e)))})).catch((e=>{throw Ir(!1),e}))}().then((e=>{e&&function(e,t){de.singleSiteMode&&e.file&&(e.publicationPath={...e.publicationPath,path:e.file.path.split("/").slice(0,-1).join("/")});const n=e.publicationPath,i=e.provider,o=fi().file,r=fi().isTemplate;n&&pi({...fi(),publicationPath:n});const s=fi().publicationPath;if(s)if(!o||r)t(null,"The file must be saved before I can publish it.",null);else if(i)t(null,null,{file:o,publicationPath:s,provider:i});else{const e=fi().hostingProvider;if(!e)throw new Error("I need a hosting provider name for this website. And none is configured.");xr.getInstance().hosting((n=>{const i=n.providers.find((t=>t.name===e));if(!i)throw me.alert("Publication",`\n                <p>Unknown provider ${e}.</p>\n                <p>Is it configured on this servier? Here are the hosting providers I know:\n                ${n.providers.map((e=>e.name)).join(", ")}</p>\n              `,(()=>{})),new Error(`\n                Unknown provider ${e}.\n                Is it configured on this servier? Here are the hosting providers I know: <ul>${n.providers.map((e=>"<li>"+e.name+"</li>")).join("")}</ul>\n              `);t(null,null,{file:o,publicationPath:s,provider:i})}))}else t(null,"I did not publish your website. I did nothing because I do not know where to publish your site.",null)}(e,((e,t,n)=>{var i;e?(Ar(),Es(e)):t?(Ar(),me.alert("Publication",t,(()=>{}))):(i=n,new Promise(((e,t)=>{const n=i.publicationPath,o=i.provider;let r=-1;me.alert("Publication","<strong>I am about to publish your site. This may take several minutes.</strong>",(()=>{r>0&&clearInterval(r)}),"Close"),r=-1,Ir(!0),kr.publish(i,(()=>{Ir(!1),r=window.setInterval((()=>{kr.publishState((t=>{let i=`<strong>${t.message}</strong>`;!0===t.stop?(clearInterval(r),i+=`\n                <p>Here is a link to <a target="_blanck" href="${fi().websiteUrl||n.absPath+"/index.html"}">your published website here</a>.\n                ${o&&o.afterPublishMessage?o.afterPublishMessage:""}</p>\n              `,e(i)):me.setText(i)}),(e=>{clearInterval(r),t(e)}))}),1e3)}),(e=>t(e)))}))).then((e=>{Ar(),me.alert("Publication",e,(()=>{}))})).catch((e=>{Ar(),Es(e)}))}))})).catch((e=>Es(e)))}function ws(){const e=Yo();return!!e.body&&e.body.childNodes.length>0}function xs(e,t=null,n=null){Is({site:{file:null,isTemplate:!0},path:e,cbk:t,errCbk:n})}function Cs(e,t){xs("/libs/templates/silex-blank-templates/blank/editable.html",e,((e,n)=>vs(e,n,t,!1)))}function Ts(e,t,n){fn()?me.confirm("Close current website",`You have unsaved modifications, are you sure you want to open the website "${e.name}" ?`,(i=>{i&&ks(e,t,n)}),"Continue","Abort"):ks(e,t,n)}function ks(e,t,n){Is({site:{file:e,isTemplate:!1},path:e.absPath,cbk:(n,i)=>{Tr(e),t&&t(n,i)},errCbk:n})}function Is({site:e,path:t,cbk:n,errCbk:i}){sn({...an(),loading:he.WEBSITE}),Gt.getInstance().loadWebsite(t,((t,i)=>{Go(t,(()=>{Sr=Sr||new wr(Ft().cssEditor),Pr=Pr||new Mr(Ft().jsEditor),lr=lr||new ur(Ft().htmlEditor),ds=!0;const o={site:{...i.site,file:e.file},pages:zi(i.pages),elements:Ln(i.elements)};Rr(o),hr(o.pages[0]),hs(),sn({...an(),loading:he.NONE}),setTimeout((()=>{pn(),mn()}),1e3),n&&n(t,i)}))}),i)}function As(e,t,n=an()){var i;return!0===(null===(i=n.dialogs.find((n=>n.id===e&&n.type===t)))||void 0===i?void 0:i.visible)}function _s(e=null,t=an()){return t.dialogs.filter((t=>t.visible&&(null===e||t.type===e)))}function Os(e,t){an().dialogs.filter((e=>e.type===t)).forEach((t=>Ns(e,t))),ln(((n,i)=>{n.dialogs.filter((e=>e.type===t)).filter((e=>!i.dialogs.find((t=>t.type===e.type&&t.id===e.id)))).forEach((t=>function(e,t){const n=Ps(e,t);if(n){const e=Ls.get(t.id);Ls.delete(t.id),n.removeEventListener("click",e),n.remove()}}(e,t))),i.dialogs.filter((e=>e.type===t)).filter((e=>!n.dialogs.find((t=>t.type===e.type&&t.id===e.id)))).forEach((t=>Ns(e,t)));const o=_s(t,n),r=_s(t,i).filter((e=>!o.find((t=>t.id===e.id&&t.type===e.type))));r.length&&Ds(e,r[0])}))}const Ls=new Map;function Ns(e,t){const n=Ps(e,t)||function(e,t){var n,i,o,r;const s=document.createElement((null===(n=t.data)||void 0===n?void 0:n.tag)||"div");return s.classList.add(t.id,"tab"),s.classList.add(...(null===(o=null===(i=t.data)||void 0===i?void 0:i.className)||void 0===o?void 0:o.split(" "))||"no-dialog-class"),s.innerHTML=(null===(r=t.data)||void 0===r?void 0:r.displayName)||"",e.appendChild(s),s}(e,t),i=()=>mr(t);n.addEventListener("click",i),Ls.set(t.id,i),t.visible&&Ds(e,t)}function Ds(e,t){const n=Ps(e,t);Array.from(e.querySelectorAll(".tab")).forEach((e=>e.classList.remove("on"))),n.classList.add("on")}function Ps(e,t){return e.querySelector("."+t.id)}const Ms=[{displayName:"General",id:"general-pane"},{displayName:"Social Networks",id:"social-pane"},{displayName:"Publish settings",id:"publish-pane"},{displayName:"Fonts",id:"fonts-pane"},{displayName:"Data sources",id:"data-sources-pane"}];let Rs;function Bs(e,t){return Rs=Rs||new Ws(Ft().settingsDialog),Rs.open(e,t)}class Ws{constructor(e){this.element=e,this.mobileCheckbox=null,this.onClose=null,this.unsub=null,ln((()=>{const[t]=_s("settings"),n=e.querySelector(".right-pane");Array.from(n.querySelectorAll(".on")).forEach((e=>e.classList.remove("on")));const i=n.querySelector("."+t.id);i?i.classList.add("on"):console.warn("Error in settings dialog: no pane found with ID")}));const t=an();sn({...t,dialogs:t.dialogs.concat(Ms.map((({displayName:e,id:t},n)=>({id:t,type:"settings",visible:0===n,data:{displayName:e,tag:"li"}}))))}),Os(e.querySelector(".left-pane ul"),"settings"),this.modalDialog=new $t({name:"Settings dialog",element:e,onOpen:e=>{if(this.onClose=e.cbk,e.pane){const t=an();sn({...t,dialogs:t.dialogs.filter((({type:e})=>"settings"===e)).map((t=>({...t,visible:t.id===e.pane})))})}this.unsub=mi((()=>this.redraw())),this.redraw()},onClose:()=>{this.unsub&&this.unsub(),this.onClose&&this.onClose()}}),this.bindTextField(".general-pane .input-title",(e=>pi({...fi(),title:e}))),this.bindTextField(".general-pane .input-lang",(e=>pi({...fi(),lang:e}))),this.bindTextField(".general-pane .input-site-width",(e=>pi({...fi(),width:e?parseInt(e):null}))),this.bindTextField(".social-pane .input-title",(e=>pi({...fi(),titleSocial:e}))),this.bindTextField(".general-pane .input-description",(e=>pi({...fi(),description:e}))),this.bindTextField(".social-pane .input-description",(e=>pi({...fi(),descriptionSocial:e}))),this.bindTextField(".social-pane .input-twitter",(e=>pi({...fi(),twitterSocial:e}))),this.bindTextField(".general-pane .input-favicon-path",(e=>pi({...fi(),faviconPath:e}))),this.bindTextField(".social-pane .input-image-path",(e=>pi({...fi(),thumbnailSocialPath:e}))),this.bindTextField(".publish-pane .input-publication-path",(e=>this.updatePublicationPath({path:e}))),this.bindTextField(".publish-pane .input-publication-service",(e=>this.updatePublicationPath({service:e}))),this.bindTextField(".publish-pane .input-website-url",(e=>{""===e&&(e=null),pi({...fi(),websiteUrl:e})})),this.bindBrowseButton(".general-pane .browse-favicon-path",(()=>{Vt.getInstance().openFile(Vt.IMAGE_EXTENSIONS).then((e=>{e&&(pi({...fi(),faviconPath:e.absPath}),this.open())})).catch((e=>{me.notifyError("Error: I could not select the favicon. <br /><br />"+(e.message||""))}))})),this.bindBrowseButton(".publish-pane .browse-publication-path",(()=>{Vt.getInstance().openFolder().then((e=>{e&&(pi({...fi(),publicationPath:e}),this.open())})).catch((e=>{me.notifyError("Error: I could not select the publication path. <br /><br />"+(e.message||""))}))})),this.mobileCheckbox=this.element.querySelector(".mobile-check"),this.mobileCheckbox.addEventListener("click",(()=>{pi({...fi(),enableMobile:this.mobileCheckbox.checked})}),!1),Gt.getInstance().ready((()=>{Gt.getInstance().getServices((e=>{const t=this.element.querySelector(".publish-pane .input-publication-service");t.innerHTML="",e.forEach((e=>{const n=document.createElement("option");n.value=e.name,n.innerHTML=e.displayName||e.name,t.appendChild(n)}))}))})),this.element.querySelector(".pane.data-sources-pane .add-data-source-btn").onclick=e=>this.addDataSource(),this.element.querySelector(".pane.data-sources-pane .reload-data-sources-btn").onclick=e=>pi({...fi(),dataSources:{...fi().dataSources}}),this.dataSourcesList=this.element.querySelector(".data-sources-list"),this.dataSourcesList.onclick=e=>{const t=e.target;if(t.classList.contains("del-btn")){const e=t.getAttribute("data-idx"),n=fi(),i={...n.dataSources};delete i[e],pi({...n,dataSources:i})}else if(t.classList.contains("edit-btn")){const e=t.getAttribute("data-idx"),n=fi();this.editDataSource(e,n.dataSources[e],((t,i)=>{const o={...n.dataSources};o[t]=i,t!==e&&delete o[e],pi({...n,dataSources:o})}))}},this.element.querySelector(".pane.fonts-pane .add-font-btn").onclick=e=>this.addFont(),this.fontList=this.element.querySelector(".fonts-list"),this.fontList.onclick=e=>{const t=e.target;if(t.classList.contains("del-btn")){const e=parseInt(t.getAttribute("data-idx"),10),n=fi().fonts.slice();n.splice(e,1),pi({...fi(),fonts:n})}else if(t.classList.contains("edit-btn")){const e=parseInt(t.getAttribute("data-idx"),10),n=fi().fonts;this.editFont(n[e],(t=>{const i=n.slice();i[e]=t,pi({...fi(),fonts:i})}))}}}openPane(e){this.element.classList.add(e+"-visible"),this.element.querySelector(`#settings-${e}`).checked=!0}bindTextField(e,t){const n=this.element.querySelector(e);if(!n)throw new Error("Settings panel error: could not find the element to bind.");n.onkeyup=e=>{t(n.value)}}bindBrowseButton(e,t){const n=this.element.querySelector(e);if(!n)throw new Error("Settings panel error: could not find the element to bind.");n.addEventListener("click",(()=>{t()}),!1)}setInputValue(e,t){const n=this.element.querySelector(e);t?t!==n.value&&(n.value=t):""!==n.value&&(n.value="")}setPublicationPath(e){null!=e?(this.setInputValue(".publish-pane .input-publication-service",e.service),this.setInputValue(".publish-pane .input-publication-path",e.path),this.element.classList.remove("publication-path-not-set")):(this.setInputValue(".publish-pane .input-publication-service",""),this.setInputValue(".publish-pane .input-publication-path",""),this.element.classList.add("publication-path-not-set"))}open(e,t){this.modalDialog.open({cbk:e,pane:t})}redraw(){const e=fi();this.fontList.innerHTML=this.getFontList(fi().fonts),this.dataSourcesList.innerHTML=this.getDataSourcesList(e.dataSources),this.setPublicationPath(e.publicationPath),this.mobileCheckbox.checked=e.enableMobile,this.setInputValue(".general-pane .input-favicon-path",e.faviconPath),this.setInputValue(".publish-pane .input-website-url",e.websiteUrl),this.setInputValue(".general-pane .input-site-width",e.width.toString()),this.setInputValue(".general-pane .input-title",e.title),this.setInputValue(".general-pane .input-lang",e.lang),this.setInputValue(".general-pane .input-description",e.description),this.setInputValue(".social-pane .input-twitter",e.twitterSocial),this.setInputValue(".social-pane .input-description",e.descriptionSocial),this.setInputValue(".social-pane .input-title",e.titleSocial),this.setInputValue(".social-pane .input-image-path",e.thumbnailSocialPath)}getDataSourcesList(e){return"<ul>"+Object.keys(e).map(((t,n)=>{const i=e[t],o=document.createElement("p");return o.textContent=i.data?JSON.stringify(i.data):"",`<li>\n        <div class="ui">\n          <button class="edit-btn fa fa-pencil" title="Edit this data source" data-idx="${t}"></button>\n          <button class="del-btn" title="Remove this data source" data-idx="${t}"></button>\n        </div>\n        <div class="content">\n          <h3>${t} &nbsp<small>(${i.data?Object.keys(i.data).length+" elements":"loading data..."})</small></h3>\n          <p>${i.href}</p>\n          <pre>${o.innerHTML}</pre>\n        </div>\n      </li>`})).join("")+"</ul>"}addDataSource(){this.editDataSource("My photos",{href:"https://jsonplaceholder.typicode.com/photos",root:""},((e,t)=>{const n={...fi().dataSources};n[e]?(console.warn("This data source already exists in this website"),me.alert("Error","This data source already exists in this website",(()=>{}))):(n[e]=t,pi({...fi(),dataSources:n}))}))}editDataSource(e,t,n){me.prompt("Edit Data Source","What is the URL of your data source?",t.href,"https://jsonplaceholder.typicode.com/photos",((i,o)=>{i&&me.prompt("Edit Data Source","What is the name of your data source?",e,"My photos",((e,i)=>{e&&me.prompt("Edit Data Source","What is the root of your data source?",t.root,"",((e,t)=>{e&&n(i,{href:o,root:t})}))}))}))}getFontList(e){return"<ul>"+e.map(((e,t)=>`<li>\n        <div class="ui">\n          <button class="edit-btn fa fa-pencil" title="Edit this font" data-idx="${t}"></button>\n          <button class="del-btn" title="Remove this font" data-idx="${t}"></button>\n        </div>\n        <div class="content">\n          <iframe src="data:text/html,${encodeURIComponent(`\n        <link href="${e.href}" rel="stylesheet">\n        <style>\n          body {\n            width: 100%;\n            font-family: ${e.family};\n            color: white;\n            text-overflow: ellipsis;\n            overflow: hidden;\n            white-space: nowrap;\n          }\n        </style>\n        <span style="font-size:14px;">${e.family}</span> -&nbsp;\n        <span style="font-size:28px;">${e.family}</span> -&nbsp;\n        <span style="font-size:56px;">${e.family}</span>\n      `)}"></iframe>\n        </div>\n      </li>`)).join("")+"</ul>"}addFont(){this.editFont({href:"https://fonts.googleapis.com/css?family=Roboto",family:"'Roboto', sans-serif"},(e=>{const t=fi().fonts;t.find((t=>t.href===e.href&&t.family===e.family))?console.warn("This font is already embedded in this website"):pi({...fi(),fonts:t.concat(e)})}))}editFont(e,t){me.prompt("Edit font","What is the CSS stylesheet for your font, e.g. https://fonts.googleapis.com/css?family=Roboto",e.href,"https://fonts.googleapis.com/css?family=Roboto",((n,i)=>{n&&me.prompt("Edit font","What is the name of your font, e.g. 'Roboto', sans-serif",e.family,"'Roboto', sans-serif",((e,n)=>{e&&t({family:n,href:i})}))}))}close(){this.modalDialog.close()}updatePublicationPath(e){const t=fi().publicationPath,n=ge.updateFileInfo(t,e);pi({...fi(),publicationPath:n})}}const Hs=Ft().menu,js=new dr(document);let zs=!1;function qs(){zs||(de.shortcuts.forEach((e=>{js.addShortcut(e,(t=>Xs(e.id,t)))})),ln(((e,t)=>{if(e.components!==t.components){const e=Hs.querySelector(".add-menu-container");Array.from(e.querySelectorAll(".component-item,.component-category")).forEach((e=>e.remove()));const t=an().components,n={};for(const e in t){const i=t[e];!0!==i.isPrivate&&(n[i.category]?n[i.category].push(Gs(i,e)):n[i.category]=[Gs(i,e)])}for(const t in n){const i=document.createElement("div");i.classList.add("label","component-category"),i.innerHTML=t,e.appendChild(i),n[t].forEach((t=>e.appendChild(t)))}}})),Hs.onclick=e=>{const t=e.target.getAttribute("data-menu-action")||e.target.parentElement.getAttribute("data-menu-action"),n=e.target.getAttribute("data-comp-id")||e.target.parentElement.getAttribute("data-comp-id");Xs(t,e,n),!e.target.parentElement||e.target.parentElement.classList.contains("menu-container")||e.target.parentElement.classList.contains("silex-menu")||Us.forEach((e=>{document.body.classList.remove(e)}))}),zs=!0,mi((()=>Ys())),Xi((()=>Ys())),Wn((()=>Ys())),ln((()=>Ys()))}const Us=["page-tool-visible","about-menu-visible","file-menu-visible","code-menu-visible","add-menu-visible"];function $s(e){Us.forEach((t=>{e===t?document.body.classList.toggle(t):document.body.classList.remove(t)}))}function Fs(e,t){return qs(),js.addShortcut(e,t)}function Gs(e,t){const n=e.faIconClass||"prodotype-icon",i=e.baseElement||"html",o=document.createElement("div");return o.classList.add("sub-menu-item","component-item"),o.title=`${e.name}`,o.setAttribute("data-menu-action","insert."+i),o.setAttribute("data-comp-id",t),o.innerHTML=`<span class="icon fa-inverse ${n}"></span>\n  ${e.name}\n  `,o}async function Vs(e,t){if(e===wt.SECTION){const[n,i]=await Ao({type:e,parent:ai(),componentName:t,style:{mobile:{},desktop:{}}});return[n,i]}{const n=Xo(),i=n.getBoundingClientRect(),o=ho(!1,n),r=Fn(Yo(),o).getBoundingClientRect(),{left:s,top:a}=po({stageSize:i,parentSize:r,elementSize:{width:no,height:no}}),[l,c]=await Ao({type:e,parent:o,componentName:t,style:{mobile:{},desktop:{top:a+"px",left:s+"px"}}});return[l,c]}}function Ys(){yn()?Hs.querySelector(".undo").classList.remove("off"):Hs.querySelector(".undo").classList.add("off"),vn()?Hs.querySelector(".redo").classList.remove("off"):Hs.querySelector(".redo").classList.add("off")}function Xs(e,t,n){const i=t;switch(e){case"show.pages":$s("page-tool-visible");break;case"show.about.menu":$s("about-menu-visible");break;case"show.file.menu":$s("file-menu-visible");break;case"show.code.menu":$s("code-menu-visible");break;case"show.add.menu":$s("add-menu-visible");break;case"file.new":bs();break;case"file.saveas":fs();break;case"file.publish.settings":Bs();break;case"file.fonts":Bs(null,"fonts-pane");break;case"file.publish":Ss();break;case"file.save":fs(fi().file);break;case"file.open":ys();break;case"view.file":Fr();break;case"view.file.responsize":Gr();break;case"view.open.fileExplorer":Vt.getInstance().openFile();break;case"view.open.cssEditor":Sr.open();break;case"view.open.jsEditor":Pr.open();break;case"view.open.htmlHeadEditor":Eo(),cr();break;case"tools.mobile.mode":{const e=an();sn({...e,mobileEditor:!e.mobileEditor});break}case"tools.mobile.mode.on":sn({...an(),mobileEditor:!0});break;case"tools.mobile.mode.off":sn({...an(),mobileEditor:!1});break;case"tools.next.property":{const e=an().dialogs.filter((e=>"properties"===e.type)),t=e.findIndex((e=>e.visible)),n=e[(t+1)%e.length];mr(n);break}case"tools.prev.property":{const e=an().dialogs.filter((e=>"properties"===e.type)),t=e.findIndex((e=>e.visible)),n=e[(t-1+e.length)%e.length];mr(n);break}case"insert.page":gr();break;case"insert.text":Vs(wt.TEXT,n);break;case"insert.section":Vs(wt.SECTION,n);break;case"insert.html":Vs(wt.HTML,n);break;case"insert.image":!async function(e){try{const t=await Vt.getInstance().openFile(Vt.IMAGE_EXTENSIONS);if(t){const[n]=await Vs(wt.IMAGE,e);Uo(n,t.absPath)}}catch(e){me.notifyError("Error: I did not manage to load the image. \n"+(e.message||""))}}(n);break;case"insert.container":Vs(wt.CONTAINER,n);break;case"edit.delete.selection":_o();break;case"edit.empty.selection":Eo();break;case"edit.copy.selection":Zo();break;case"edit.paste.selection":ir();break;case"edit.duplicate.selection":Jo();break;case"edit.undo":gn();break;case"edit.redo":bn();break;case"edit.position.left":Wo(xt.LEFT,i);break;case"edit.position.right":Wo(xt.RIGHT,i);break;case"edit.position.up":Wo(xt.UP,i);break;case"edit.position.down":Wo(xt.DOWN,i);break;case"edit.move.up":Ho();break;case"edit.move.down":jo();break;case"edit.move.to.top":zo();break;case"edit.move.to.bottom":qo();break;case"edit.delete.page":yr();break;case"edit.rename.page":br();break;case"help.wiki":window.open(de.WIKI_SILEX);break;case"help.crowdfunding":window.open(de.CROWD_FUNDING);break;case"help.issues":window.open(de.ISSUES_SILEX);break;case"help.downloads.widget":window.open(de.DOWNLOADS_WIDGET_SILEX);break;case"help.downloads.template":window.open(de.DOWNLOADS_TEMPLATE_SILEX);break;case"help.aboutSilexLabs":window.open(de.ABOUT_SILEX_LABS);break;case"help.newsLetter":window.open(de.SUBSCRIBE_SILEX_LABS);break;case"help.diaspora":window.open(de.SOCIAL_DIASPORA);break;case"help.twitter":window.open(de.SOCIAL_TWITTER);break;case"help.facebook":window.open(de.SOCIAL_FB);break;case"help.forkMe":window.open(de.FORK_CODE);break;case"help.contribute":window.open(de.CONTRIBUTE);break;default:console.warn("menu type not found",e)}}let Ks,Zs,Js=window.wysihtml;class Qs{constructor(e){this.element=e,this.currentTextBox=null,this.wysihtmlEditor=null,this.onStopEditCbks=[],this.toolbar=this.element.querySelector("#wysihtml5-toolbar")}getLink(){if(this.element.querySelector(".create-link").classList.contains("wysihtml-command-active")){const e=Ki.reduce(((e,t)=>{const n=this.element.querySelector(".get-"+t);return n?e[t]=n.value:console.error("could not get data from link editor for attribute",t),e}),{});return e.linkType=eo(e.href),e}return null}onScroll(e){this.attachToTextBox(Fn(Yo(),this.currentTextBox),this.element)}attachToTextBox(e,t){const n=e.getBoundingClientRect(),i=Xo().getBoundingClientRect(),o=i.height+i.top-n.top,r=Math.max(o-n.height+35,Math.min(i.height-20,o)),s=n.left+35;t.style.bottom=r+"px",t.style.left=s+"px"}stopEditing(){if(la(!1),this.wysihtmlEditor){this.onStopEditCbks.forEach((e=>e())),this.onStopEditCbks=[],this.element.querySelector(".image-details").style.display="none",this.wysihtmlEditor.focus(!0),this.wysihtmlEditor.destroy(),this.wysihtmlEditor=null;const e=this.toolbar.parentElement,t=this.toolbar.cloneNode(!0);Array.from(t.querySelectorAll(".wysihtml-command-active")).forEach((e=>e.classList.remove("wysihtml-command-active"))),e.insertBefore(t,this.toolbar),e.removeChild(this.toolbar),this.toolbar=t,Ut();const n=Fn(Yo(),this.currentTextBox),i=Kn(n);i.removeAttribute("contenteditable"),i.classList.remove("wysihtml-sandbox","wysihtml-editor"),n.classList.remove("text-editor-focus"),n.removeAttribute("data-allow-silex-shortcuts"),Rn([{...this.currentTextBox,innerHtml:Zn(n)}]),this.currentTextBox=null}this.element.classList.remove("text-editor-editing")}startEditing(e,t=null,n=null){const i=ci();if(1===i.length){const o=i[0];if(o!==this.currentTextBox){this.stopEditing(),la(!0),this.currentTextBox=o;const i=Fn(Yo(),this.currentTextBox);this.attachToTextBox(i,this.element);const r=Kn(i),s={toolbar:this.toolbar,handleTables:!1,useLineBreaks:!1,classes:{"wysiwyg-float-left":1,"wysiwyg-float-right":1},parserRules:{tags:{b:{},strong:{rename_tag:"b"},i:{},br:{},p:{},h1:{},h2:{},h3:{},h4:{},h5:{},h6:{},ul:{},u:{},ol:{},li:{},a:{check_attributes:{href:"any",download:"href",target:"any",title:"any",type:"any"}},img:{check_attributes:{src:"src",alt:"alt",title:"any",width:"any",height:"any",class:"any"}},font:{rename_tag:"span",add_class:{size:"size_font"}}}}};this.wysihtmlEditor=new Js.Editor(r,s),this.wysihtmlEditor.on("paste",(e=>this.onPaste(e.clipboardData.getData("text")))),i.classList.add("text-editor-focus"),i.setAttribute("data-allow-silex-shortcuts","true"),this.element.classList.add("text-editor-editing");const a=Yo(),l=Vo(),c=e=>this.onScroll(e),u=()=>this.onBlur(i),d=ri(this.currentTextBox);new Array(this.currentTextBox,...d).map((e=>Fn(Yo(),e))).forEach((e=>{e.hasAttribute("href")&&(e.setAttribute("data-tmp-href",e.getAttribute("href")),e.removeAttribute("href"),e.onclick=e=>e.preventDefault(),this.onStopEditCbks.push((()=>{e.setAttribute("href",e.getAttribute("data-tmp-href")),e.removeAttribute("data-tmp-href")})))})),this.onStopEditCbks.push(function(e){return qs(),js.attach(e)}(a),Fs({label:"Edit link",key:"k",ctrlKey:!0},(e=>this.openLinkEditor(e))),Fs({label:"Exit text editor",key:"Escape"},(e=>this.stopEditing())),(()=>l.removeEventListener("scroll",c)),(()=>i.removeEventListener("blur",u)),(()=>this.wysihtmlEditor.off("blur")),(()=>this.wysihtmlEditor.off("load")),(()=>this.wysihtmlEditor.off("paste"))),l.addEventListener("scroll",c),i.addEventListener("blur",u),this.wysihtmlEditor.on("blur",(e=>this.onBlur(i))),this.wysihtmlEditor.on("load",(()=>{this.element.querySelector(".insert-image").onmousedown=t=>{const n=this.wysihtmlEditor.composer.selection.getBookmark();e.openFile(Vt.IMAGE_EXTENSIONS).then((t=>{this.startEditing(e,n,(()=>{t&&this.wysihtmlEditor.composer.commands.exec("insertImage",{src:t.absPath,alt:""})}))})).catch((t=>{me.notifyError("Error: I did not manage to load the image. \n"+(t.message||"")),this.startEditing(e,n)}))};const o=this.element.querySelector(".image-details"),r=o.querySelector("#auto-submit-image");function s(e){setTimeout((()=>{r.click(),o.style.display="",e.target.focus()}),100)}o.querySelector(".float").onchange=e=>s(e),o.querySelector(".float").onblur=e=>this.onBlur(i),o.querySelector(".src").onkeydown=e=>s(e),o.querySelector(".alt").onkeydown=e=>s(e),o.querySelector(".alt").onblur=e=>this.onBlur(i),this.element.querySelector(".create-link").onclick=e=>this.openLinkEditor(e),this.focus(t),n&&n()}))}else n&&n()}else console.error("Error, can not edit selection with format pane",i)}onPaste(e){e.match(/[^\x00-\xFF]/)&&me.confirm("Paste warning","Warning: you have pasted text. There are strange characters in the text you pasted. These are unicode chars, which may behave differently depending on the site visitor browser. I can clear these chars for you or leave them as is.",(e=>{if(e){const e=Kn(Fn(Yo(),this.currentTextBox)),t=e.innerHTML.replace(/[^\x00-\xFF]/g,"");e.innerHTML=t}}),"Cleanup","Paste as is")}onBlur(e){setTimeout((()=>{me.isActive||document.activeElement===e||document.activeElement.classList.contains("keep-text-format-bar-open")||this.stopEditing()}),0)}focus(e){this.wysihtmlEditor&&(this.wysihtmlEditor.focus(!1),e&&this.wysihtmlEditor.composer.selection.setBookmark(e))}openLinkEditor(e){this.currentTextBox.link?me.alert("Link error",'It is impossible to add a link in this text, because the text box has a link in the properties. Please remove the link in the element property pannel and try again. <a target="_blank" href="https://github.com/silexlabs/Silex/wiki/Errors#link-error">More info here</a>',(()=>{})):Qi({data:this.getLink(),cbk:e=>{e?this.wysihtmlEditor.composer.commands.exec("createLink",e):this.wysihtmlEditor.composer.commands.exec("removeLink"),this.wysihtmlEditor.focus(!1)}}),e.preventDefault()}}function ea(){const e=Bn().find((e=>e.selected&&e.enableEdit));if(e)if(Ai(e)){const e=an().dialogs.find((e=>"params"===e.id));mr(e)}else switch(e.type){case wt.TEXT:Ks=Ks||new Qs(Ft().textFormatBar),Ks.startEditing(Vt.getInstance());break;case wt.HTML:cr();break;case wt.IMAGE:Vt.getInstance().openFile(Vt.IMAGE_EXTENSIONS).then((t=>{t&&Uo(e,t.absPath)})).catch((e=>{me.notifyError("Error: I did not manage to load the image. \n"+(e.message||""))}))}}class ta{constructor(e){this.element=e,this.currentPageElement=e.querySelector(".current-page"),this.currentPageElement.onclick=e=>{$s("page-tool-visible")},Wn(((e,t)=>this.redraw())),Xi((()=>this.redraw())),ln((()=>this.redraw())),this.element.querySelector(".delete").addEventListener("click",(()=>_o())),this.element.querySelector(".edit").addEventListener("click",(()=>ea())),this.element.querySelector(".copy").addEventListener("click",(()=>Zo())),this.element.querySelector(".paste").addEventListener("click",(()=>ir())),this.element.querySelector(".duplicate").addEventListener("click",(()=>Jo())),this.element.querySelector(".top").addEventListener("click",(()=>zo())),this.element.querySelector(".up").addEventListener("click",(()=>Ho())),this.element.querySelector(".down").addEventListener("click",(()=>jo())),this.element.querySelector(".bottom").addEventListener("click",(()=>qo())),this.element.querySelector(".sticky-elements").addEventListener("click",(e=>{Zs&&(Zs.enableSticky=!Zs.enableSticky)}))}redraw(){const e=sr();if(e){const t=fi().file,n=fn()?"*":"",i=t&&t.path?t.path+n+" - ":"";this.currentPageElement.innerHTML=`\n        ${i}\n        ${e.displayName}\n      `}0===Bn().filter((e=>e.selected&&oi(e))).length?(this.element.querySelector(".delete").classList.add("off"),this.element.querySelector(".edit").classList.add("off"),this.element.querySelector(".copy").classList.add("off"),this.element.querySelector(".top").classList.add("off"),this.element.querySelector(".up").classList.add("off"),this.element.querySelector(".down").classList.add("off"),this.element.querySelector(".bottom").classList.add("off"),this.element.querySelector(".duplicate").classList.add("off")):(this.element.querySelector(".delete").classList.remove("off"),this.element.querySelector(".edit").classList.remove("off"),this.element.querySelector(".copy").classList.remove("off"),this.element.querySelector(".top").classList.remove("off"),this.element.querySelector(".up").classList.remove("off"),this.element.querySelector(".down").classList.remove("off"),this.element.querySelector(".bottom").classList.remove("off"),this.element.querySelector(".duplicate").classList.remove("off")),nr()?this.element.querySelector(".paste").classList.remove("off"):this.element.querySelector(".paste").classList.add("off"),Zs&&Zs.enableSticky?this.element.querySelector(".sticky-elements").classList.remove("off"):this.element.querySelector(".sticky-elements").classList.add("off")}}const na=()=>Zs;let ia=!1;const oa=()=>ia=!0,ra=()=>ia=!1;function sa(){if(!Zs)return;const e=Yo(),{currentPageId:t}=an();oa(),Zs.reset(Bn().filter((e=>(0===e.pageNames.length||!!e.pageNames.find((e=>e===t)))&&(e.visibility.desktop&&!an().mobileEditor||e.visibility.mobile&&an().mobileEditor))).map((t=>Fn(e,t))).filter((e=>!!e))),Zs.setSelection(ci().map((t=>Fn(e,t)))),ra()}function aa(e){e.style.top="",e.style.left="",e.style.right="",e.style.bottom="",e.style.width="",e.style.height="",e.style.margin="",e.style.padding="",e.style.border="",e.style.minHeight="",e.style.position=""}function la(e){Zs&&Zs.visible===e&&(Zs.visible=!e)}function ca(){Zs&&Zs.resizeWindow()}function ua(e,t){if(Zs)return Zs.subscribeMouseEvent(e,t)}function da(e){return(...t)=>{oa();const n=e(...t);return ra(),n}}function ha(e){if(!Zs)return void console.warn("onAddElement NO STAGE");const t=Yo();e.forEach((e=>{const n=oi(e),i=n?Fn(t,n):t.body;n&&!i?console.warn("no parent element yet but will come soon"):Zs.addElement(Fn(t,e),!0)})),e.length&&(setTimeout((()=>{Zs.center(e.map((e=>Fn(t,e))))}),500),Zs.setSelection(ci().map((e=>Fn(t,e)))))}function pa(e){Zs?e.forEach((e=>{Zs.removeElement(e.id)})):console.warn("onDeleteElement NO STAGE")}function fa(e){if(!Zs)return void console.warn("onUpdateElement NO STAGE");const t=Yo();e.forEach((({from:e,to:n})=>{const i=Fn(t,n),o=na().getStateById(n.id);if(i){if(n.selected!==e.selected){const e=Zs.getSelection(),t=e.find((e=>e.el===i));if(n.selected){if(!t){const t=e.map((e=>e.el)).concat([i]);na().setSelection(t)}}else t&&na().setSelection(e.filter((e=>e!==t)).map((e=>e.el)))}n.visibility.desktop!==e.visibility.desktop&&(n.visibility.desktop?an().mobileEditor||na().addElement(i):an().mobileEditor||na().removeElement(o.id)),n.tagName!==e.tagName&&(Zs.removeElement(o.id),Zs.addElement(i),Zs.setSelection(ci().map((e=>Fn(t,e))))),n.visibility.mobile!==e.visibility.mobile&&n.visibility.mobile&&an().mobileEditor&&na().addElement(i),n.style,e.style}else console.error("Why?",e,n)}));const n=e.filter((({from:e,to:t})=>e.style!==t.style||e.classList!==t.classList)).map((({to:e})=>Fn(Yo(),e))).concat(e.flatMap((({to:e})=>ii(e))).map((e=>Fn(Yo(),e))));Zs.updateMetrics(n)}let ma,ga;class ba{constructor(){this.dragging=!1,this.toBeUnsubscribed=[],ln(((e,t)=>{Zs&&(e&&e.mobileEditor===t.mobileEditor||setTimeout((()=>sa()),0),e&&e.mobileEditor===t.mobileEditor||ca(),e&&e.currentPageId!==t.currentPageId&&setTimeout((()=>sa()),0))})),mi(((e,t)=>{Zs&&e.headStyle!==t.headStyle&&Zs.updateMetrics()})),Wn(on({onAdd:da(ha),onDelete:da(pa),onUpdate:da(fa)}))}cleanup(){this.stage&&(this.stage.cleanup(),this.stage=null,Zs=null),this.toBeUnsubscribed.forEach((e=>e())),this.toBeUnsubscribed=[]}init(e){this.cleanup(),Zs=this.stage=new Ht(e,[],{getId:e=>Gn(e),isSelectable:e=>!0,isDraggable:e=>ei(Gn(e)).enableDrag,isDropZone:e=>ei(Gn(e)).enableDrop,isResizeable:e=>{const t=ei(Gn(e));return(!an().mobileEditor||t.type!==wt.SECTION)&&(an().mobileEditor&&t.isSectionContent?{top:t.enableResize.top,left:!1,bottom:t.enableResize.bottom,right:!1}:t.enableResize)},useMinHeight:e=>ei(Gn(e)).useMinHeight,canDrop:(e,t)=>ei(Gn(e)).type!==wt.SECTION||"body"===t.tagName.toLowerCase(),onEdit:()=>{me.isActive||ea()},onChange:e=>this.applyStyle(e),onDrop:e=>this.stopDrag(e),onResizeEnd:e=>this.stopResize(e),onSelect:e=>this.onSelectionChanged(e),onStartDrag:e=>this.startDrag(),onStartResize:e=>this.startResize()}),setTimeout((()=>sa()),1e3),setTimeout((()=>{this.toBeUnsubscribed.push(ua("mousedown",(e=>{window!==e.target.ownerDocument.defaultView&&Ut()})))}),0)}getScroll(){return this.stage?this.stage.getScroll():{x:0,y:0}}startDragOrResize(){this.dragging=!0}startResize(){Yo().body.classList.add(jt.RESIZING_CLASS_NAME),this.startDragOrResize()}startDrag(){Yo().body.classList.add(jt.DRAGGING_CLASS_NAME),this.startDragOrResize()}stopDragOrResize(e){this.dragging=!1,this.applyStyle(e)}stopResize(e){Yo().body.classList.remove(jt.RESIZING_CLASS_NAME),this.stopDragOrResize(e)}stopDrag(e){Yo().body.classList.remove(jt.DRAGGING_CLASS_NAME),this.stopDragOrResize(e);const t=e.map((e=>({element:ti(Yo(),e.el),newParent:ti(Yo(),e.el.parentElement),idx:Array.from(e.el.parentElement.children).indexOf(e.el)}))).map((({element:e,newParent:t,idx:n})=>({element:e,newParent:t,idx:n,oldParent:oi(e)}))).filter((({element:e,newParent:t,oldParent:n,idx:i})=>t!==n||n.children.indexOf(e.id)!==i)).reduce(((e,{element:t,newParent:n,oldParent:i,idx:o})=>{const r=e.find((e=>e.id===n.id));if(r?r.children=Hn(r.children.filter((e=>e!==t.id)),o,t.id):e.push({...n,children:Hn(n.children.filter((e=>e!==t.id)),o,t.id)}),i&&i.id!==n.id){const n=ei(i.id,e);n?n.children=n.children.filter((e=>e!==t.id)):e.push({...i,children:i.children.filter((e=>e!==t.id))})}return e}),[]);Rn(t)}onSelectionChanged(e){if(ia)return;const t=e.map((e=>({element:Bn().find((t=>Fn(Yo(),t)===e.el)),selectable:e}))).filter((({element:e,selectable:t})=>e&&e.selected!==t.selected)).map((({element:e,selectable:t})=>({...e,selected:t.selected}))),n=ai();Rn(n.selected?t.concat([{...n,selected:!1}]):t),0===ci().length&&Eo()}applyStyle(e){ia||this.dragging||(e.forEach((e=>{aa(e.el),Array.from(e.el.querySelectorAll("."+jt.EDITABLE_CLASS_NAME)).forEach((e=>aa(e)))})),Rn(e.map((e=>{const t=Bn().find((t=>Fn(Yo(),t)===e.el));if(!an().mobileEditor){const n=e.metrics.computedStyleRect.width;t.isSectionContent&&fi().width!==n&&pi({...fi(),width:n})}return{...t,style:{...t.style,[an().mobileEditor?"mobile":"desktop"]:zn(t,t.isSectionContent,{...an().mobileEditor?t.style.mobile:t.style.desktop,height:e.metrics.computedStyleRect.height+"px",top:e.metrics.computedStyleRect.top+"px",left:e.metrics.computedStyleRect.left+"px",width:e.metrics.computedStyleRect.width+"px"})}}}))))}}class ya{constructor(e,t){this.element=e,this.onTheLeft=[],this.onTheRight=[],this.isDown=!1,this.toBeCleared=[],this.onRedraw=t,this.element.addEventListener("mousedown",(e=>this.onMouseDown(e)),!1),window.addEventListener("resize",(()=>this.redraw()),!1)}addLeft(e){this.onTheLeft.push(e),this.redraw()}addRight(e){this.onTheRight.push(e),this.redraw()}remove(e){this.onTheRight.splice(this.onTheRight.indexOf(e),1),e.style.left="",e.style.right="",this.redraw()}redraw(e=!0){const t=this.element.getBoundingClientRect(),n=this.element.parentElement.getBoundingClientRect();this.onTheLeft.forEach((e=>{e.style.right=n.width-t.left+"px"})),this.onTheRight.forEach((e=>{e.style.left=ya.WIDTH+t.left+"px"})),e&&this.onRedraw&&this.onRedraw()}onMouseDown(e){this.isDown=!0,this.toBeCleared.push(ua("mousemove",(e=>this.onMouseMove(e))),ua("mouseup",(e=>this.onMouseUp(e))))}onMouseUp(e){this.isDown=!1,this.toBeCleared.forEach((e=>e())),this.toBeCleared=[]}onMouseMove(e){let t=parseInt(this.element.style.right);if(""===this.element.style.right){const n=this.element.parentElement.getBoundingClientRect(),i=e.target.getBoundingClientRect();t=n.right-i.right}this.element.style.right=t-e.movementX+"px",this.redraw(),ca()}}function va(){return ga||(ga=new ya(Ft().verticalSplitter,(()=>{ca()}))),ga}ya.WIDTH=5;class Ea{constructor(e){this.element=e,Wn((()=>this.redraw()))}redraw(){function e(t){const n=oi(t);return n?oi(n)?[n].concat(e(n)):[n]:[]}for(;this.element.childNodes.length;)this.removeCrumb(this.element.childNodes[0]);const t=ci().map((t=>({el:t,parents:e(t)}))).sort(((e,t)=>t.parents.length-e.parents.length));if(t.length){const e=t.shift();let n=e.parents;t.forEach((({el:e,parents:t})=>{const i=[];let o=0;for(;o<n.length&&o<t.length&&n[o]===t[o];)i.push(n[o++]);n=i})),0===t.length&&n.unshift(e.el),n.reverse().forEach((e=>this.addCrumb(e)))}}addCrumb(e){if(!Fn(Yo(),e))return;const t=document.createElement("DIV"),n=e.classList.filter((e=>!jt.SILEX_CLASS_NAMES.includes(e))),i=n.length?"."+n.join("."):"",o=si(e)?"Body":Ai(e)?"Component":fo(e);t.classList.add("crumb"),t.innerHTML=o+i,t.style.zIndex=(100-this.element.childNodes.length).toString(),this.element.appendChild(t),t.onclick=()=>Rn(Bn().filter((t=>t.selected||t===e)).map((t=>({...t,selected:t===e}))));const r=document.createElement("DIV");r.classList.add("sep"),r.innerHTML='<svg class="svg" viewBox="0 0 7 28" height="28" width="7"><path d="M.5 0l6 14-6 14H7V0z" fill="currentColor"></path><path d="M1 0H0l6 14-6 14h1l6-14z" fill="#858585"></path></svg>',this.element.appendChild(r)}removeCrumb(e){this.element.removeChild(e)}}function Sa(e){return Sa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Sa(e)}function wa(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function xa(){return xa=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},xa.apply(this,arguments)}function Ca(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){wa(e,t,n[t])}))}return e}function Ta(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function ka(e){if("undefined"!=typeof window&&window.navigator)return!!navigator.userAgent.match(e)}var Ia=ka(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),Aa=ka(/Edge/i),_a=ka(/firefox/i),Oa=ka(/safari/i)&&!ka(/chrome/i)&&!ka(/android/i),La=ka(/iP(ad|od|hone)/i),Na=ka(/chrome/i)&&ka(/android/i),Da={capture:!1,passive:!1};function Pa(e,t,n){e.addEventListener(t,n,!Ia&&Da)}function Ma(e,t,n){e.removeEventListener(t,n,!Ia&&Da)}function Ra(e,t){if(t){if(">"===t[0]&&(t=t.substring(1)),e)try{if(e.matches)return e.matches(t);if(e.msMatchesSelector)return e.msMatchesSelector(t);if(e.webkitMatchesSelector)return e.webkitMatchesSelector(t)}catch(e){return!1}return!1}}function Ba(e){return e.host&&e!==document&&e.host.nodeType?e.host:e.parentNode}function Wa(e,t,n,i){if(e){n=n||document;do{if(null!=t&&(">"===t[0]?e.parentNode===n&&Ra(e,t):Ra(e,t))||i&&e===n)return e;if(e===n)break}while(e=Ba(e))}return null}var Ha,ja=/\s+/g;function za(e,t,n){if(e&&t)if(e.classList)e.classList[n?"add":"remove"](t);else{var i=(" "+e.className+" ").replace(ja," ").replace(" "+t+" "," ");e.className=(i+(n?" "+t:"")).replace(ja," ")}}function qa(e,t,n){var i=e&&e.style;if(i){if(void 0===n)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(e,""):e.currentStyle&&(n=e.currentStyle),void 0===t?n:n[t];t in i||-1!==t.indexOf("webkit")||(t="-webkit-"+t),i[t]=n+("string"==typeof n?"":"px")}}function Ua(e,t){var n="";if("string"==typeof e)n=e;else do{var i=qa(e,"transform");i&&"none"!==i&&(n=i+" "+n)}while(!t&&(e=e.parentNode));var o=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return o&&new o(n)}function $a(e,t,n){if(e){var i=e.getElementsByTagName(t),o=0,r=i.length;if(n)for(;o<r;o++)n(i[o],o);return i}return[]}function Fa(){return document.scrollingElement||document.documentElement}function Ga(e,t,n,i,o){if(e.getBoundingClientRect||e===window){var r,s,a,l,c,u,d;if(e!==window&&e.parentNode&&e!==Fa()?(s=(r=e.getBoundingClientRect()).top,a=r.left,l=r.bottom,c=r.right,u=r.height,d=r.width):(s=0,a=0,l=window.innerHeight,c=window.innerWidth,u=window.innerHeight,d=window.innerWidth),(t||n)&&e!==window&&(o=o||e.parentNode,!Ia))do{if(o&&o.getBoundingClientRect&&("none"!==qa(o,"transform")||n&&"static"!==qa(o,"position"))){var h=o.getBoundingClientRect();s-=h.top+parseInt(qa(o,"border-top-width")),a-=h.left+parseInt(qa(o,"border-left-width")),l=s+r.height,c=a+r.width;break}}while(o=o.parentNode);if(i&&e!==window){var p=Ua(o||e),f=p&&p.a,m=p&&p.d;p&&(l=(s/=m)+(u/=m),c=(a/=f)+(d/=f))}return{top:s,left:a,bottom:l,right:c,width:d,height:u}}}function Va(e,t,n){for(var i=Ja(e,!0),o=Ga(e)[t];i;){var r=Ga(i)[n];if(!("top"===n||"left"===n?o>=r:o<=r))return i;if(i===Fa())break;i=Ja(i,!1)}return!1}function Ya(e,t,n){for(var i=0,o=0,r=e.children;o<r.length;){if("none"!==r[o].style.display&&r[o]!==Ql.ghost&&r[o]!==Ql.dragged&&Wa(r[o],n.draggable,e,!1)){if(i===t)return r[o];i++}o++}return null}function Xa(e,t){for(var n=e.lastElementChild;n&&(n===Ql.ghost||"none"===qa(n,"display")||t&&!Ra(n,t));)n=n.previousElementSibling;return n||null}function Ka(e,t){var n=0;if(!e||!e.parentNode)return-1;for(;e=e.previousElementSibling;)"TEMPLATE"===e.nodeName.toUpperCase()||e===Ql.clone||t&&!Ra(e,t)||n++;return n}function Za(e){var t=0,n=0,i=Fa();if(e)do{var o=Ua(e),r=o.a,s=o.d;t+=e.scrollLeft*r,n+=e.scrollTop*s}while(e!==i&&(e=e.parentNode));return[t,n]}function Ja(e,t){if(!e||!e.getBoundingClientRect)return Fa();var n=e,i=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var o=qa(n);if(n.clientWidth<n.scrollWidth&&("auto"==o.overflowX||"scroll"==o.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==o.overflowY||"scroll"==o.overflowY)){if(!n.getBoundingClientRect||n===document.body)return Fa();if(i||t)return n;i=!0}}}while(n=n.parentNode);return Fa()}function Qa(e,t){return Math.round(e.top)===Math.round(t.top)&&Math.round(e.left)===Math.round(t.left)&&Math.round(e.height)===Math.round(t.height)&&Math.round(e.width)===Math.round(t.width)}function el(e,t){return function(){if(!Ha){var n=arguments,i=this;1===n.length?e.call(i,n[0]):e.apply(i,n),Ha=setTimeout((function(){Ha=void 0}),t)}}}function tl(e,t,n){e.scrollLeft+=t,e.scrollTop+=n}function nl(e){var t=window.Polymer,n=window.jQuery||window.Zepto;return t&&t.dom?t.dom(e).cloneNode(!0):n?n(e).clone(!0)[0]:e.cloneNode(!0)}var il="Sortable"+(new Date).getTime();var ol=[],rl={initializeByDefault:!0},sl={mount:function(e){for(var t in rl)rl.hasOwnProperty(t)&&!(t in e)&&(e[t]=rl[t]);ol.forEach((function(t){if(t.pluginName===e.pluginName)throw"Sortable: Cannot mount plugin ".concat(e.pluginName," more than once")})),ol.push(e)},pluginEvent:function(e,t,n){var i=this;this.eventCanceled=!1,n.cancel=function(){i.eventCanceled=!0};var o=e+"Global";ol.forEach((function(i){t[i.pluginName]&&(t[i.pluginName][o]&&t[i.pluginName][o](Ca({sortable:t},n)),t.options[i.pluginName]&&t[i.pluginName][e]&&t[i.pluginName][e](Ca({sortable:t},n)))}))},initializePlugins:function(e,t,n,i){for(var o in ol.forEach((function(i){var o=i.pluginName;if(e.options[o]||i.initializeByDefault){var r=new i(e,t,e.options);r.sortable=e,r.options=e.options,e[o]=r,xa(n,r.defaults)}})),e.options)if(e.options.hasOwnProperty(o)){var r=this.modifyOption(e,o,e.options[o]);void 0!==r&&(e.options[o]=r)}},getEventProperties:function(e,t){var n={};return ol.forEach((function(i){"function"==typeof i.eventProperties&&xa(n,i.eventProperties.call(t[i.pluginName],e))})),n},modifyOption:function(e,t,n){var i;return ol.forEach((function(o){e[o.pluginName]&&o.optionListeners&&"function"==typeof o.optionListeners[t]&&(i=o.optionListeners[t].call(e[o.pluginName],n))})),i}};var al=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=n.evt,o=Ta(n,["evt"]);sl.pluginEvent.bind(Ql)(e,t,Ca({dragEl:cl,parentEl:ul,ghostEl:dl,rootEl:hl,nextEl:pl,lastDownEl:fl,cloneEl:ml,cloneHidden:gl,dragStarted:_l,putSortable:wl,activeSortable:Ql.active,originalEvent:i,oldIndex:bl,oldDraggableIndex:vl,newIndex:yl,newDraggableIndex:El,hideGhostForTarget:Xl,unhideGhostForTarget:Kl,cloneNowHidden:function(){gl=!0},cloneNowShown:function(){gl=!1},dispatchSortableEvent:function(e){ll({sortable:t,name:e,originalEvent:i})}},o))};function ll(e){!function(e){var t=e.sortable,n=e.rootEl,i=e.name,o=e.targetEl,r=e.cloneEl,s=e.toEl,a=e.fromEl,l=e.oldIndex,c=e.newIndex,u=e.oldDraggableIndex,d=e.newDraggableIndex,h=e.originalEvent,p=e.putSortable,f=e.extraEventProperties;if(t=t||n&&n[il]){var m,g=t.options,b="on"+i.charAt(0).toUpperCase()+i.substr(1);!window.CustomEvent||Ia||Aa?(m=document.createEvent("Event")).initEvent(i,!0,!0):m=new CustomEvent(i,{bubbles:!0,cancelable:!0}),m.to=s||n,m.from=a||n,m.item=o||n,m.clone=r,m.oldIndex=l,m.newIndex=c,m.oldDraggableIndex=u,m.newDraggableIndex=d,m.originalEvent=h,m.pullMode=p?p.lastPutMode:void 0;var y=Ca({},f,sl.getEventProperties(i,t));for(var v in y)m[v]=y[v];n&&n.dispatchEvent(m),g[b]&&g[b].call(t,m)}}(Ca({putSortable:wl,cloneEl:ml,targetEl:cl,rootEl:hl,oldIndex:bl,oldDraggableIndex:vl,newIndex:yl,newDraggableIndex:El},e))}var cl,ul,dl,hl,pl,fl,ml,gl,bl,yl,vl,El,Sl,wl,xl,Cl,Tl,kl,Il,Al,_l,Ol,Ll,Nl,Dl,Pl=!1,Ml=!1,Rl=[],Bl=!1,Wl=!1,Hl=[],jl=!1,zl=[],ql="undefined"!=typeof document,Ul=La,$l=Aa||Ia?"cssFloat":"float",Fl=ql&&!Na&&!La&&"draggable"in document.createElement("div"),Gl=function(){if(ql){if(Ia)return!1;var e=document.createElement("x");return e.style.cssText="pointer-events:auto","auto"===e.style.pointerEvents}}(),Vl=function(e,t){var n=qa(e),i=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),o=Ya(e,0,t),r=Ya(e,1,t),s=o&&qa(o),a=r&&qa(r),l=s&&parseInt(s.marginLeft)+parseInt(s.marginRight)+Ga(o).width,c=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+Ga(r).width;if("flex"===n.display)return"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal";if("grid"===n.display)return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(o&&s.float&&"none"!==s.float){var u="left"===s.float?"left":"right";return!r||"both"!==a.clear&&a.clear!==u?"horizontal":"vertical"}return o&&("block"===s.display||"flex"===s.display||"table"===s.display||"grid"===s.display||l>=i&&"none"===n[$l]||r&&"none"===n[$l]&&l+c>i)?"vertical":"horizontal"},Yl=function(e){function t(e,n){return function(i,o,r,s){var a=i.options.group.name&&o.options.group.name&&i.options.group.name===o.options.group.name;if(null==e&&(n||a))return!0;if(null==e||!1===e)return!1;if(n&&"clone"===e)return e;if("function"==typeof e)return t(e(i,o,r,s),n)(i,o,r,s);var l=(n?i:o).options.group.name;return!0===e||"string"==typeof e&&e===l||e.join&&e.indexOf(l)>-1}}var n={},i=e.group;i&&"object"==Sa(i)||(i={name:i}),n.name=i.name,n.checkPull=t(i.pull,!0),n.checkPut=t(i.put),n.revertClone=i.revertClone,e.group=n},Xl=function(){!Gl&&dl&&qa(dl,"display","none")},Kl=function(){!Gl&&dl&&qa(dl,"display","")};ql&&document.addEventListener("click",(function(e){if(Ml)return e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.stopImmediatePropagation&&e.stopImmediatePropagation(),Ml=!1,!1}),!0);var Zl=function(e){if(cl){e=e.touches?e.touches[0]:e;var t=(o=e.clientX,r=e.clientY,Rl.some((function(e){if(!Xa(e)){var t=Ga(e),n=e[il].options.emptyInsertThreshold,i=o>=t.left-n&&o<=t.right+n,a=r>=t.top-n&&r<=t.bottom+n;return n&&i&&a?s=e:void 0}})),s);if(t){var n={};for(var i in e)e.hasOwnProperty(i)&&(n[i]=e[i]);n.target=n.rootEl=t,n.preventDefault=void 0,n.stopPropagation=void 0,t[il]._onDragOver(n)}}var o,r,s},Jl=function(e){cl&&cl.parentNode[il]._isOutsideThisEl(e.target)};function Ql(e,t){if(!e||!e.nodeType||1!==e.nodeType)throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(e));this.el=e,this.options=t=xa({},t),e[il]=this;var n,i,o={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(e.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Vl(e,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(e,t){e.setData("Text",t.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==Ql.supportPointer&&"PointerEvent"in window&&!Oa,emptyInsertThreshold:5};for(var r in sl.initializePlugins(this,e,o),o)!(r in t)&&(t[r]=o[r]);for(var s in Yl(t),this)"_"===s.charAt(0)&&"function"==typeof this[s]&&(this[s]=this[s].bind(this));this.nativeDraggable=!t.forceFallback&&Fl,this.nativeDraggable&&(this.options.touchStartThreshold=1),t.supportPointer?Pa(e,"pointerdown",this._onTapStart):(Pa(e,"mousedown",this._onTapStart),Pa(e,"touchstart",this._onTapStart)),this.nativeDraggable&&(Pa(e,"dragover",this),Pa(e,"dragenter",this)),Rl.push(this.el),t.store&&t.store.get&&this.sort(t.store.get(this)||[]),xa(this,(i=[],{captureAnimationState:function(){i=[],this.options.animation&&[].slice.call(this.el.children).forEach((function(e){if("none"!==qa(e,"display")&&e!==Ql.ghost){i.push({target:e,rect:Ga(e)});var t=Ca({},i[i.length-1].rect);if(e.thisAnimationDuration){var n=Ua(e,!0);n&&(t.top-=n.f,t.left-=n.e)}e.fromRect=t}}))},addAnimationState:function(e){i.push(e)},removeAnimationState:function(e){i.splice(function(e,t){for(var n in e)if(e.hasOwnProperty(n))for(var i in t)if(t.hasOwnProperty(i)&&t[i]===e[n][i])return Number(n);return-1}(i,{target:e}),1)},animateAll:function(e){var t=this;if(!this.options.animation)return clearTimeout(n),void("function"==typeof e&&e());var o=!1,r=0;i.forEach((function(e){var n=0,i=e.target,s=i.fromRect,a=Ga(i),l=i.prevFromRect,c=i.prevToRect,u=e.rect,d=Ua(i,!0);d&&(a.top-=d.f,a.left-=d.e),i.toRect=a,i.thisAnimationDuration&&Qa(l,a)&&!Qa(s,a)&&(u.top-a.top)/(u.left-a.left)==(s.top-a.top)/(s.left-a.left)&&(n=function(e,t,n,i){return Math.sqrt(Math.pow(t.top-e.top,2)+Math.pow(t.left-e.left,2))/Math.sqrt(Math.pow(t.top-n.top,2)+Math.pow(t.left-n.left,2))*i.animation}(u,l,c,t.options)),Qa(a,s)||(i.prevFromRect=s,i.prevToRect=a,n||(n=t.options.animation),t.animate(i,u,a,n)),n&&(o=!0,r=Math.max(r,n),clearTimeout(i.animationResetTimer),i.animationResetTimer=setTimeout((function(){i.animationTime=0,i.prevFromRect=null,i.fromRect=null,i.prevToRect=null,i.thisAnimationDuration=null}),n),i.thisAnimationDuration=n)})),clearTimeout(n),o?n=setTimeout((function(){"function"==typeof e&&e()}),r):"function"==typeof e&&e(),i=[]},animate:function(e,t,n,i){if(i){qa(e,"transition",""),qa(e,"transform","");var o=Ua(this.el),r=o&&o.a,s=o&&o.d,a=(t.left-n.left)/(r||1),l=(t.top-n.top)/(s||1);e.animatingX=!!a,e.animatingY=!!l,qa(e,"transform","translate3d("+a+"px,"+l+"px,0)"),this.forRepaintDummy=function(e){return e.offsetWidth}(e),qa(e,"transition","transform "+i+"ms"+(this.options.easing?" "+this.options.easing:"")),qa(e,"transform","translate3d(0,0,0)"),"number"==typeof e.animated&&clearTimeout(e.animated),e.animated=setTimeout((function(){qa(e,"transition",""),qa(e,"transform",""),e.animated=!1,e.animatingX=!1,e.animatingY=!1}),i)}}}))}function ec(e,t,n,i,o,r,s,a){var l,c,u=e[il],d=u.options.onMove;return!window.CustomEvent||Ia||Aa?(l=document.createEvent("Event")).initEvent("move",!0,!0):l=new CustomEvent("move",{bubbles:!0,cancelable:!0}),l.to=t,l.from=e,l.dragged=n,l.draggedRect=i,l.related=o||t,l.relatedRect=r||Ga(t),l.willInsertAfter=a,l.originalEvent=s,e.dispatchEvent(l),d&&(c=d.call(u,l,s)),c}function tc(e){e.draggable=!1}function nc(){jl=!1}function ic(e){for(var t=e.tagName+e.className+e.src+e.href+e.textContent,n=t.length,i=0;n--;)i+=t.charCodeAt(n);return i.toString(36)}function oc(e){return setTimeout(e,0)}function rc(e){return clearTimeout(e)}Ql.prototype={constructor:Ql,_isOutsideThisEl:function(e){this.el.contains(e)||e===this.el||(Ol=null)},_getDirection:function(e,t){return"function"==typeof this.options.direction?this.options.direction.call(this,e,t,cl):this.options.direction},_onTapStart:function(e){if(e.cancelable){var t=this,n=this.el,i=this.options,o=i.preventOnFilter,r=e.type,s=e.touches&&e.touches[0]||e.pointerType&&"touch"===e.pointerType&&e,a=(s||e).target,l=e.target.shadowRoot&&(e.path&&e.path[0]||e.composedPath&&e.composedPath()[0])||a,c=i.filter;if(function(e){zl.length=0;for(var t=e.getElementsByTagName("input"),n=t.length;n--;){var i=t[n];i.checked&&zl.push(i)}}(n),!cl&&!(/mousedown|pointerdown/.test(r)&&0!==e.button||i.disabled)&&!l.isContentEditable&&(this.nativeDraggable||!Oa||!a||"SELECT"!==a.tagName.toUpperCase())&&!((a=Wa(a,i.draggable,n,!1))&&a.animated||fl===a)){if(bl=Ka(a),vl=Ka(a,i.draggable),"function"==typeof c){if(c.call(this,e,a,this))return ll({sortable:t,rootEl:l,name:"filter",targetEl:a,toEl:n,fromEl:n}),al("filter",t,{evt:e}),void(o&&e.cancelable&&e.preventDefault())}else if(c&&(c=c.split(",").some((function(i){if(i=Wa(l,i.trim(),n,!1))return ll({sortable:t,rootEl:i,name:"filter",targetEl:a,fromEl:n,toEl:n}),al("filter",t,{evt:e}),!0}))))return void(o&&e.cancelable&&e.preventDefault());i.handle&&!Wa(l,i.handle,n,!1)||this._prepareDragStart(e,s,a)}}},_prepareDragStart:function(e,t,n){var i,o=this,r=o.el,s=o.options,a=r.ownerDocument;if(n&&!cl&&n.parentNode===r){var l=Ga(n);if(hl=r,ul=(cl=n).parentNode,pl=cl.nextSibling,fl=n,Sl=s.group,Ql.dragged=cl,xl={target:cl,clientX:(t||e).clientX,clientY:(t||e).clientY},Il=xl.clientX-l.left,Al=xl.clientY-l.top,this._lastX=(t||e).clientX,this._lastY=(t||e).clientY,cl.style["will-change"]="all",i=function(){al("delayEnded",o,{evt:e}),Ql.eventCanceled?o._onDrop():(o._disableDelayedDragEvents(),!_a&&o.nativeDraggable&&(cl.draggable=!0),o._triggerDragStart(e,t),ll({sortable:o,name:"choose",originalEvent:e}),za(cl,s.chosenClass,!0))},s.ignore.split(",").forEach((function(e){$a(cl,e.trim(),tc)})),Pa(a,"dragover",Zl),Pa(a,"mousemove",Zl),Pa(a,"touchmove",Zl),Pa(a,"mouseup",o._onDrop),Pa(a,"touchend",o._onDrop),Pa(a,"touchcancel",o._onDrop),_a&&this.nativeDraggable&&(this.options.touchStartThreshold=4,cl.draggable=!0),al("delayStart",this,{evt:e}),!s.delay||s.delayOnTouchOnly&&!t||this.nativeDraggable&&(Aa||Ia))i();else{if(Ql.eventCanceled)return void this._onDrop();Pa(a,"mouseup",o._disableDelayedDrag),Pa(a,"touchend",o._disableDelayedDrag),Pa(a,"touchcancel",o._disableDelayedDrag),Pa(a,"mousemove",o._delayedDragTouchMoveHandler),Pa(a,"touchmove",o._delayedDragTouchMoveHandler),s.supportPointer&&Pa(a,"pointermove",o._delayedDragTouchMoveHandler),o._dragStartTimer=setTimeout(i,s.delay)}}},_delayedDragTouchMoveHandler:function(e){var t=e.touches?e.touches[0]:e;Math.max(Math.abs(t.clientX-this._lastX),Math.abs(t.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){cl&&tc(cl),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var e=this.el.ownerDocument;Ma(e,"mouseup",this._disableDelayedDrag),Ma(e,"touchend",this._disableDelayedDrag),Ma(e,"touchcancel",this._disableDelayedDrag),Ma(e,"mousemove",this._delayedDragTouchMoveHandler),Ma(e,"touchmove",this._delayedDragTouchMoveHandler),Ma(e,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(e,t){t=t||"touch"==e.pointerType&&e,!this.nativeDraggable||t?this.options.supportPointer?Pa(document,"pointermove",this._onTouchMove):Pa(document,t?"touchmove":"mousemove",this._onTouchMove):(Pa(cl,"dragend",this),Pa(hl,"dragstart",this._onDragStart));try{document.selection?oc((function(){document.selection.empty()})):window.getSelection().removeAllRanges()}catch(e){}},_dragStarted:function(e,t){if(Pl=!1,hl&&cl){al("dragStarted",this,{evt:t}),this.nativeDraggable&&Pa(document,"dragover",Jl);var n=this.options;!e&&za(cl,n.dragClass,!1),za(cl,n.ghostClass,!0),Ql.active=this,e&&this._appendGhost(),ll({sortable:this,name:"start",originalEvent:t})}else this._nulling()},_emulateDragOver:function(){if(Cl){this._lastX=Cl.clientX,this._lastY=Cl.clientY,Xl();for(var e=document.elementFromPoint(Cl.clientX,Cl.clientY),t=e;e&&e.shadowRoot&&(e=e.shadowRoot.elementFromPoint(Cl.clientX,Cl.clientY))!==t;)t=e;if(cl.parentNode[il]._isOutsideThisEl(e),t)do{if(t[il]&&t[il]._onDragOver({clientX:Cl.clientX,clientY:Cl.clientY,target:e,rootEl:t})&&!this.options.dragoverBubble)break;e=t}while(t=t.parentNode);Kl()}},_onTouchMove:function(e){if(xl){var t=this.options,n=t.fallbackTolerance,i=t.fallbackOffset,o=e.touches?e.touches[0]:e,r=dl&&Ua(dl,!0),s=dl&&r&&r.a,a=dl&&r&&r.d,l=Ul&&Dl&&Za(Dl),c=(o.clientX-xl.clientX+i.x)/(s||1)+(l?l[0]-Hl[0]:0)/(s||1),u=(o.clientY-xl.clientY+i.y)/(a||1)+(l?l[1]-Hl[1]:0)/(a||1);if(!Ql.active&&!Pl){if(n&&Math.max(Math.abs(o.clientX-this._lastX),Math.abs(o.clientY-this._lastY))<n)return;this._onDragStart(e,!0)}if(dl){r?(r.e+=c-(Tl||0),r.f+=u-(kl||0)):r={a:1,b:0,c:0,d:1,e:c,f:u};var d="matrix(".concat(r.a,",").concat(r.b,",").concat(r.c,",").concat(r.d,",").concat(r.e,",").concat(r.f,")");qa(dl,"webkitTransform",d),qa(dl,"mozTransform",d),qa(dl,"msTransform",d),qa(dl,"transform",d),Tl=c,kl=u,Cl=o}e.cancelable&&e.preventDefault()}},_appendGhost:function(){if(!dl){var e=this.options.fallbackOnBody?document.body:hl,t=Ga(cl,!0,Ul,!0,e),n=this.options;if(Ul){for(Dl=e;"static"===qa(Dl,"position")&&"none"===qa(Dl,"transform")&&Dl!==document;)Dl=Dl.parentNode;Dl!==document.body&&Dl!==document.documentElement?(Dl===document&&(Dl=Fa()),t.top+=Dl.scrollTop,t.left+=Dl.scrollLeft):Dl=Fa(),Hl=Za(Dl)}za(dl=cl.cloneNode(!0),n.ghostClass,!1),za(dl,n.fallbackClass,!0),za(dl,n.dragClass,!0),qa(dl,"transition",""),qa(dl,"transform",""),qa(dl,"box-sizing","border-box"),qa(dl,"margin",0),qa(dl,"top",t.top),qa(dl,"left",t.left),qa(dl,"width",t.width),qa(dl,"height",t.height),qa(dl,"opacity","0.8"),qa(dl,"position",Ul?"absolute":"fixed"),qa(dl,"zIndex","100000"),qa(dl,"pointerEvents","none"),Ql.ghost=dl,e.appendChild(dl),qa(dl,"transform-origin",Il/parseInt(dl.style.width)*100+"% "+Al/parseInt(dl.style.height)*100+"%")}},_onDragStart:function(e,t){var n=this,i=e.dataTransfer,o=n.options;al("dragStart",this,{evt:e}),Ql.eventCanceled?this._onDrop():(al("setupClone",this),Ql.eventCanceled||((ml=nl(cl)).draggable=!1,ml.style["will-change"]="",this._hideClone(),za(ml,this.options.chosenClass,!1),Ql.clone=ml),n.cloneId=oc((function(){al("clone",n),Ql.eventCanceled||(n.options.removeCloneOnHide||hl.insertBefore(ml,cl),n._hideClone(),ll({sortable:n,name:"clone"}))})),!t&&za(cl,o.dragClass,!0),t?(Ml=!0,n._loopId=setInterval(n._emulateDragOver,50)):(Ma(document,"mouseup",n._onDrop),Ma(document,"touchend",n._onDrop),Ma(document,"touchcancel",n._onDrop),i&&(i.effectAllowed="move",o.setData&&o.setData.call(n,i,cl)),Pa(document,"drop",n),qa(cl,"transform","translateZ(0)")),Pl=!0,n._dragStartId=oc(n._dragStarted.bind(n,t,e)),Pa(document,"selectstart",n),_l=!0,Oa&&qa(document.body,"user-select","none"))},_onDragOver:function(e){var t,n,i,o,r=this.el,s=e.target,a=this.options,l=a.group,c=Ql.active,u=Sl===l,d=a.sort,h=wl||c,p=this,f=!1;if(!jl){if(void 0!==e.preventDefault&&e.cancelable&&e.preventDefault(),s=Wa(s,a.draggable,r,!0),A("dragOver"),Ql.eventCanceled)return f;if(cl.contains(e.target)||s.animated&&s.animatingX&&s.animatingY||p._ignoreWhileAnimating===s)return O(!1);if(Ml=!1,c&&!a.disabled&&(u?d||(i=!hl.contains(cl)):wl===this||(this.lastPutMode=Sl.checkPull(this,c,cl,e))&&l.checkPut(this,c,cl,e))){if(o="vertical"===this._getDirection(e,s),t=Ga(cl),A("dragOverValid"),Ql.eventCanceled)return f;if(i)return ul=hl,_(),this._hideClone(),A("revert"),Ql.eventCanceled||(pl?hl.insertBefore(cl,pl):hl.appendChild(cl)),O(!0);var m=Xa(r,a.draggable);if(!m||function(e,t,n){var i=Ga(Xa(n.el,n.options.draggable));return t?e.clientX>i.right+10||e.clientX<=i.right&&e.clientY>i.bottom&&e.clientX>=i.left:e.clientX>i.right&&e.clientY>i.top||e.clientX<=i.right&&e.clientY>i.bottom+10}(e,o,this)&&!m.animated){if(m===cl)return O(!1);if(m&&r===e.target&&(s=m),s&&(n=Ga(s)),!1!==ec(hl,r,cl,t,s,n,e,!!s))return _(),r.appendChild(cl),ul=r,L(),O(!0)}else if(s.parentNode===r){n=Ga(s);var g,b,y,v=cl.parentNode!==r,E=!function(e,t,n){var i=n?e.left:e.top,o=n?e.right:e.bottom,r=n?e.width:e.height,s=n?t.left:t.top,a=n?t.right:t.bottom,l=n?t.width:t.height;return i===s||o===a||i+r/2===s+l/2}(cl.animated&&cl.toRect||t,s.animated&&s.toRect||n,o),S=o?"top":"left",w=Va(s,"top","top")||Va(cl,"top","top"),x=w?w.scrollTop:void 0;if(Ol!==s&&(b=n[S],Bl=!1,Wl=!E&&a.invertSwap||v),g=function(e,t,n,i,o,r,s,a){var l=i?e.clientY:e.clientX,c=i?n.height:n.width,u=i?n.top:n.left,d=i?n.bottom:n.right,h=!1;if(!s)if(a&&Nl<c*o){if(!Bl&&(1===Ll?l>u+c*r/2:l<d-c*r/2)&&(Bl=!0),Bl)h=!0;else if(1===Ll?l<u+Nl:l>d-Nl)return-Ll}else if(l>u+c*(1-o)/2&&l<d-c*(1-o)/2)return function(e){return Ka(cl)<Ka(e)?1:-1}(t);return(h=h||s)&&(l<u+c*r/2||l>d-c*r/2)?l>u+c/2?1:-1:0}(e,s,n,o,E?1:a.swapThreshold,null==a.invertedSwapThreshold?a.swapThreshold:a.invertedSwapThreshold,Wl,Ol===s),0!==g){var C=Ka(cl);do{C-=g,y=ul.children[C]}while(y&&("none"===qa(y,"display")||y===dl))}if(0===g||y===s)return O(!1);Ol=s,Ll=g;var T=s.nextElementSibling,k=!1,I=ec(hl,r,cl,t,s,n,e,k=1===g);if(!1!==I)return 1!==I&&-1!==I||(k=1===I),jl=!0,setTimeout(nc,30),_(),k&&!T?r.appendChild(cl):s.parentNode.insertBefore(cl,k?T:s),w&&tl(w,0,x-w.scrollTop),ul=cl.parentNode,void 0===b||Wl||(Nl=Math.abs(b-Ga(s)[S])),L(),O(!0)}if(r.contains(cl))return O(!1)}return!1}function A(a,l){al(a,p,Ca({evt:e,isOwner:u,axis:o?"vertical":"horizontal",revert:i,dragRect:t,targetRect:n,canSort:d,fromSortable:h,target:s,completed:O,onMove:function(n,i){return ec(hl,r,cl,t,n,Ga(n),e,i)},changed:L},l))}function _(){A("dragOverAnimationCapture"),p.captureAnimationState(),p!==h&&h.captureAnimationState()}function O(t){return A("dragOverCompleted",{insertion:t}),t&&(u?c._hideClone():c._showClone(p),p!==h&&(za(cl,wl?wl.options.ghostClass:c.options.ghostClass,!1),za(cl,a.ghostClass,!0)),wl!==p&&p!==Ql.active?wl=p:p===Ql.active&&wl&&(wl=null),h===p&&(p._ignoreWhileAnimating=s),p.animateAll((function(){A("dragOverAnimationComplete"),p._ignoreWhileAnimating=null})),p!==h&&(h.animateAll(),h._ignoreWhileAnimating=null)),(s===cl&&!cl.animated||s===r&&!s.animated)&&(Ol=null),a.dragoverBubble||e.rootEl||s===document||(cl.parentNode[il]._isOutsideThisEl(e.target),!t&&Zl(e)),!a.dragoverBubble&&e.stopPropagation&&e.stopPropagation(),f=!0}function L(){yl=Ka(cl),El=Ka(cl,a.draggable),ll({sortable:p,name:"change",toEl:r,newIndex:yl,newDraggableIndex:El,originalEvent:e})}},_ignoreWhileAnimating:null,_offMoveEvents:function(){Ma(document,"mousemove",this._onTouchMove),Ma(document,"touchmove",this._onTouchMove),Ma(document,"pointermove",this._onTouchMove),Ma(document,"dragover",Zl),Ma(document,"mousemove",Zl),Ma(document,"touchmove",Zl)},_offUpEvents:function(){var e=this.el.ownerDocument;Ma(e,"mouseup",this._onDrop),Ma(e,"touchend",this._onDrop),Ma(e,"pointerup",this._onDrop),Ma(e,"touchcancel",this._onDrop),Ma(document,"selectstart",this)},_onDrop:function(e){var t=this.el,n=this.options;yl=Ka(cl),El=Ka(cl,n.draggable),al("drop",this,{evt:e}),ul=cl&&cl.parentNode,yl=Ka(cl),El=Ka(cl,n.draggable),Ql.eventCanceled||(Pl=!1,Wl=!1,Bl=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),rc(this.cloneId),rc(this._dragStartId),this.nativeDraggable&&(Ma(document,"drop",this),Ma(t,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),Oa&&qa(document.body,"user-select",""),qa(cl,"transform",""),e&&(_l&&(e.cancelable&&e.preventDefault(),!n.dropBubble&&e.stopPropagation()),dl&&dl.parentNode&&dl.parentNode.removeChild(dl),(hl===ul||wl&&"clone"!==wl.lastPutMode)&&ml&&ml.parentNode&&ml.parentNode.removeChild(ml),cl&&(this.nativeDraggable&&Ma(cl,"dragend",this),tc(cl),cl.style["will-change"]="",_l&&!Pl&&za(cl,wl?wl.options.ghostClass:this.options.ghostClass,!1),za(cl,this.options.chosenClass,!1),ll({sortable:this,name:"unchoose",toEl:ul,newIndex:null,newDraggableIndex:null,originalEvent:e}),hl!==ul?(yl>=0&&(ll({rootEl:ul,name:"add",toEl:ul,fromEl:hl,originalEvent:e}),ll({sortable:this,name:"remove",toEl:ul,originalEvent:e}),ll({rootEl:ul,name:"sort",toEl:ul,fromEl:hl,originalEvent:e}),ll({sortable:this,name:"sort",toEl:ul,originalEvent:e})),wl&&wl.save()):yl!==bl&&yl>=0&&(ll({sortable:this,name:"update",toEl:ul,originalEvent:e}),ll({sortable:this,name:"sort",toEl:ul,originalEvent:e})),Ql.active&&(null!=yl&&-1!==yl||(yl=bl,El=vl),ll({sortable:this,name:"end",toEl:ul,originalEvent:e}),this.save())))),this._nulling()},_nulling:function(){al("nulling",this),hl=cl=ul=dl=pl=ml=fl=gl=xl=Cl=_l=yl=El=bl=vl=Ol=Ll=wl=Sl=Ql.dragged=Ql.ghost=Ql.clone=Ql.active=null,zl.forEach((function(e){e.checked=!0})),zl.length=Tl=kl=0},handleEvent:function(e){switch(e.type){case"drop":case"dragend":this._onDrop(e);break;case"dragenter":case"dragover":cl&&(this._onDragOver(e),function(e){e.dataTransfer&&(e.dataTransfer.dropEffect="move"),e.cancelable&&e.preventDefault()}(e));break;case"selectstart":e.preventDefault()}},toArray:function(){for(var e,t=[],n=this.el.children,i=0,o=n.length,r=this.options;i<o;i++)Wa(e=n[i],r.draggable,this.el,!1)&&t.push(e.getAttribute(r.dataIdAttr)||ic(e));return t},sort:function(e,t){var n={},i=this.el;this.toArray().forEach((function(e,t){var o=i.children[t];Wa(o,this.options.draggable,i,!1)&&(n[e]=o)}),this),t&&this.captureAnimationState(),e.forEach((function(e){n[e]&&(i.removeChild(n[e]),i.appendChild(n[e]))})),t&&this.animateAll()},save:function(){var e=this.options.store;e&&e.set&&e.set(this)},closest:function(e,t){return Wa(e,t||this.options.draggable,this.el,!1)},option:function(e,t){var n=this.options;if(void 0===t)return n[e];var i=sl.modifyOption(this,e,t);n[e]=void 0!==i?i:t,"group"===e&&Yl(n)},destroy:function(){al("destroy",this);var e=this.el;e[il]=null,Ma(e,"mousedown",this._onTapStart),Ma(e,"touchstart",this._onTapStart),Ma(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(Ma(e,"dragover",this),Ma(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),(function(e){e.removeAttribute("draggable")})),this._onDrop(),this._disableDelayedDragEvents(),Rl.splice(Rl.indexOf(this.el),1),this.el=e=null},_hideClone:function(){if(!gl){if(al("hideClone",this),Ql.eventCanceled)return;qa(ml,"display","none"),this.options.removeCloneOnHide&&ml.parentNode&&ml.parentNode.removeChild(ml),gl=!0}},_showClone:function(e){if("clone"===e.lastPutMode){if(gl){if(al("showClone",this),Ql.eventCanceled)return;cl.parentNode!=hl||this.options.group.revertClone?pl?hl.insertBefore(ml,pl):hl.appendChild(ml):hl.insertBefore(ml,cl),this.options.group.revertClone&&this.animate(cl,ml),qa(ml,"display",""),gl=!1}}else this._hideClone()}},ql&&Pa(document,"touchmove",(function(e){(Ql.active||Pl)&&e.cancelable&&e.preventDefault()})),Ql.utils={on:Pa,off:Ma,css:qa,find:$a,is:function(e,t){return!!Wa(e,t,e,!1)},extend:function(e,t){if(e&&t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},throttle:el,closest:Wa,toggleClass:za,clone:nl,index:Ka,nextTick:oc,cancelNextTick:rc,detectDirection:Vl,getChild:Ya},Ql.get=function(e){return e[il]},Ql.mount=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t[0].constructor===Array&&(t=t[0]),t.forEach((function(e){if(!e.prototype||!e.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(e));e.utils&&(Ql.utils=Ca({},Ql.utils,e.utils)),sl.mount(e)}))},Ql.create=function(e,t){return new Ql(e,t)},Ql.version="1.13.0";var sc,ac,lc,cc=[];el((function(e,t,n,i){if(t.scroll){var o,r=(e.touches?e.touches[0]:e).clientX,s=(e.touches?e.touches[0]:e).clientY,a=t.scrollSensitivity,l=t.scrollSpeed,c=Fa();ac!==n&&(ac=n,cc.forEach((function(e){clearInterval(e.pid)})),cc=[],sc=t.scroll,o=t.scrollFn,!0===sc&&(sc=Ja(n,!0)));var u=0,d=sc;do{var h=d,p=Ga(h),f=p.top,m=p.bottom,g=p.left,b=p.right,y=p.width,v=p.height,E=void 0,S=void 0,w=h.scrollWidth,x=h.scrollHeight,C=qa(h),T=h.scrollLeft,k=h.scrollTop;h===c?(E=y<w&&("auto"===C.overflowX||"scroll"===C.overflowX||"visible"===C.overflowX),S=v<x&&("auto"===C.overflowY||"scroll"===C.overflowY||"visible"===C.overflowY)):(E=y<w&&("auto"===C.overflowX||"scroll"===C.overflowX),S=v<x&&("auto"===C.overflowY||"scroll"===C.overflowY));var I=E&&(Math.abs(b-r)<=a&&T+y<w)-(Math.abs(g-r)<=a&&!!T),A=S&&(Math.abs(m-s)<=a&&k+v<x)-(Math.abs(f-s)<=a&&!!k);if(!cc[u])for(var _=0;_<=u;_++)cc[_]||(cc[_]={});cc[u].vx==I&&cc[u].vy==A&&cc[u].el===h||(cc[u].el=h,cc[u].vx=I,cc[u].vy=A,clearInterval(cc[u].pid),0==I&&0==A||(!0,cc[u].pid=setInterval(function(){i&&0===this.layer&&Ql.active._onTouchMove(lc);var t=cc[this.layer].vy?cc[this.layer].vy*l:0,n=cc[this.layer].vx?cc[this.layer].vx*l:0;"function"==typeof o&&"continue"!==o.call(Ql.dragged.parentNode[il],n,t,e,lc,cc[this.layer].el)||tl(cc[this.layer].el,n,t)}.bind({layer:u}),24))),u++}while(t.bubbleScroll&&d!==c&&(d=Ja(d,!1)))}}),30);var uc=function(e){var t=e.originalEvent,n=e.putSortable,i=e.dragEl,o=e.activeSortable,r=e.dispatchSortableEvent,s=e.hideGhostForTarget,a=e.unhideGhostForTarget;if(t){var l=n||o;s();var c=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,u=document.elementFromPoint(c.clientX,c.clientY);a(),l&&!l.el.contains(u)&&(r("spill"),this.onSpill({dragEl:i,putSortable:n}))}};function dc(){}function hc(){}dc.prototype={startIndex:null,dragStart:function(e){var t=e.oldDraggableIndex;this.startIndex=t},onSpill:function(e){var t=e.dragEl,n=e.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var i=Ya(this.sortable.el,this.startIndex,this.options);i?this.sortable.el.insertBefore(t,i):this.sortable.el.appendChild(t),this.sortable.animateAll(),n&&n.animateAll()},drop:uc},xa(dc,{pluginName:"revertOnSpill"}),hc.prototype={onSpill:function(e){var t=e.dragEl,n=e.putSortable||this.sortable;n.captureAnimationState(),t.parentNode&&t.parentNode.removeChild(t),n.animateAll()},drop:uc},xa(hc,{pluginName:"removeOnSpill"});const pc=Ql;class fc{constructor(e){function t(e,t){Array.from(document.querySelectorAll(e)).forEach((e=>e.onclick=t))}this.element=e,Xi(((e,t)=>this.redraw())),ln((()=>this.redraw())),this.pageShortcuts(["F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12"],{modifiers:!1}),this.pageShortcuts(["1","2","3","4","5","6","7","8","9","0"],{ctrlKey:!0}),this.pageShortcuts(["1","2","3","4","5","6","7","8","9","0"],{ctrlKey:!0,shiftKey:!0}),this.element.addEventListener("click",(e=>{if(e.target.classList.contains("page-delete"))this.removePageAtIndex(this.getCellIndex(e.target.parentElement.parentElement));else if(e.target.classList.contains("page-properties"))this.editPageAtIndex(this.getCellIndex(e.target.parentElement.parentElement));else{const t=this.getCellIndex(e.target.parentElement);t>=0&&this.setSelectedIndex(t,!0)}e.preventDefault()}),!1),t(".add-page",(e=>gr())),t(".remove-page",(e=>yr())),t(".move-page-up",(e=>{const t=sr();vr(t,Yi().indexOf(t)-1)})),t(".move-page-down",(e=>{const t=sr();vr(t,Yi().indexOf(t)+1)}));const n=this.element.querySelector(".page-tool-container");pc.create(n,{ghostClass:"page-ghost",animation:150,handle:".page-handle",onSort:e=>{const t=Yi();Vi({page:t[e.oldIndex],idx:e.newIndex})}})}pageShortcuts(e,t){e.forEach(((e,n)=>Fs({label:"Go to page "+(n+1),key:e,input:!0,...t},(e=>{const t=Yi()[n];t&&hr(t)}))))}removePageAtIndex(e){yr(Yi()[e])}editPageAtIndex(e){br(Yi()[e])}setSelectedIndex(e,t){t&&hr(Yi()[e])}getCellIndex(e){const t=e.getAttribute("data-page-idx");return t?parseInt(t,10):-1}redraw(){const{currentPageId:e}=an(),t=Yi().map(((t,n)=>Object.assign({className:(t.id===e?" ui-selected":"")+(t.canDelete?" ui-can-delete":" ui-can-not-delete")+(t.canProperties?" ui-can-properties":" ui-can-not-properties")+(t.canMove?" ui-can-move":" ui-can-not-move"),idx:n,shortcutText:t.id!==e&&n<9?`Click to open this page (Ctrl+${n+1} or F${n+1})`:""},t))),n=this.element.querySelector(".page-tool-container"),i=this.element.querySelector(".page-tool-template").innerHTML;n.innerHTML=Kr(i,t)}}class mc{constructor(e,t){this.color="",this.isDisabled=!0,this.isIndeterminate=!0,this.element=e,this.cbk=t,this.colorInput=this.element.querySelector(".color-button"),this.colorInput.onchange=e=>this.onChange(e),this.colorInput.oninput=e=>this.onChange(e),this.opacityInput=this.element.querySelector(".color-opacity-input"),this.opacityInput.onchange=e=>this.onChange(e),this.opacityInput.oninput=e=>this.onChange(e),this.transparentCheckbox=this.element.querySelector(".color-edit-transparent-check"),this.transparentCheckbox.onchange=e=>this.onChange(e)}setDisabled(e){this.isDisabled=e,this.redraw()}setIndeterminate(e){this.isIndeterminate=e,this.redraw()}setColor(e){this.color=e,this.redraw()}getColor(){return this.color}getOpacity(){const e=parseInt(this.opacityInput.value,10);return isNaN(e)?1:e/100}onChange(e){if(e.preventDefault(),e.stopPropagation(),this.transparentCheckbox.checked)this.color="transparent";else{const e=this.getOpacity(),t=Math.round(255*e).toString(16);this.color=function(e){if(0!==e.indexOf("#"))return e;if(9!==e.length)return console.error("Error in length "+e+" - "+e.length),e;const t=function(e){return 0!==e.indexOf("#")?null:(e=e.replace("#",""),[parseInt(e.substring(0,2),16),parseInt(e.substring(2,4),16),parseInt(e.substring(4,6),16),parseInt(e.substring(6,8),16)/255])}(e);return"rgba("+t[0]+","+t[1]+","+t[2]+","+t[3]+")"}(this.colorInput.value+(2===t.length?"":"0")+t)}this.cbk()}redraw(){if(this.isIndeterminate)this.transparentCheckbox.indeterminate=!0,this.opacityInput.value="";else if(this.transparentCheckbox.indeterminate=!1,"transparent"===this.color||null==this.color||""===this.color)this.transparentCheckbox.checked=!0,this.colorInput.disabled=!0,this.colorInput.style.opacity=".3",this.opacityInput.disabled=!0,this.opacityInput.value="";else{this.transparentCheckbox.checked=!1,this.colorInput.disabled=!1,this.colorInput.style.opacity="1";const e=function(e){if(0!==e.indexOf("rgb"))return e;const t=$n(e);let n=t[0].toString(16);n.length<2&&(n="0"+n);let i=t[1].toString(16);i.length<2&&(i="0"+i);let o=t[2].toString(16);o.length<2&&(o="0"+o);let r=t[3].toString(16);return r.length<2&&(r="0"+r),"#"+(n+i+o+r)}(this.color);this.colorInput.value=e.substring(0,e.length-2),this.opacityInput.disabled=!1;try{const e=$n(this.color);this.opacityInput.value=Math.round(100*e[3]/255).toString()}catch(e){console.warn("this color is probably not an rgba color",this.color,e),this.opacityInput.value="100"}}this.isDisabled?(this.transparentCheckbox.disabled=!0,this.colorInput.disabled=!0,this.colorInput.style.opacity=".3",this.opacityInput.disabled=!0):this.transparentCheckbox.disabled=!1}}class gc{constructor(e){this.element=e,this.change=new Map,this.baseUrl=null}getCommonProperty(e,t){let n=null,i=!0,o=!0;return e.forEach((e=>{const r=t(e);o?(o=!1,n=r):r!==n&&(i=!1)})),i||(n=null),n}redraw(e){}onInputPxChanged(e,t){if(!this.change.has(e))throw new Error("Unknown input "+e);this.change.get(e).onChange(t)}createInput(e){e.forEach((e=>{const t=this.element.querySelector(e.selector);if(!t)throw new Error("Could not find input "+e.selector);const n={onChange:e=>{null!=e&&"auto"!==e?(e!==t.value&&(t.value=e),t.disabled=!1):(t.value="",t.disabled=!0)}};t.addEventListener(e.eventName,(n=>{n.preventDefault();const i=t.value?t.value+e.unit:"";this.styleChanged(e.styleName,i)})),this.change.set(e.selector,n)}))}styleChanged(e,t){"width"===e&&ci().filter((e=>e.isSectionContent&&!an().mobileEditor)).unshift()&&pi({...fi(),width:parseInt(t)}),Rn(ci().map((n=>{const i={};return i[e]=t,{...n,style:{...n.style,...qn(an().mobileEditor,n.style,zn(n,n.isSectionContent,i))}}})))}initInput(e,t,n="input"){return this.initEventTarget(e,n,t)}initComboBox(e,t){return this.initEventTarget(e,"change",t)}initCheckBox(e,t){return this.initEventTarget(e,"change",t)}initEventTarget(e,t,n){const i=this.element.querySelector(e);return i.addEventListener(t,(e=>{e.preventDefault(),e.stopPropagation(),n(e)})),i}}class bc extends gc{constructor(e){super(e),this.buildBgColor(),this.buildBgImage(),ln((()=>{this.redraw(ci())})),Wn((()=>{this.redraw(ci())}))}buildBgColor(){this.colorPicker=new mc(this.element.querySelector(".color-edit-container"),(()=>this.onColorChanged()))}buildBgImage(){this.bgSelectBgImage=this.element.querySelector(".bg-image-button"),this.bgClearBgImage=this.element.querySelector(".clear-bg-image-button"),this.bgSelectBgImage.addEventListener("click",(()=>this.onSelectImageButton()),!1),this.bgClearBgImage.addEventListener("click",(()=>this.onClearImageButton()),!1),this.attachmentComboBox=this.initComboBox(".bg-attachment-combo-box",(e=>{this.styleChanged("background-attachment",e.target.value)})),this.vPositionComboBox=this.initComboBox(".bg-position-v-combo-box",(e=>{const t=this.hPositionComboBox.value,n=this.vPositionComboBox.value;this.styleChanged("background-position",n+" "+t)})),this.hPositionComboBox=this.initComboBox(".bg-position-h-combo-box",(e=>{const t=this.hPositionComboBox.value,n=this.vPositionComboBox.value;this.styleChanged("background-position",n+" "+t)})),this.repeatComboBox=this.initComboBox(".bg-repeat-combo-box",(e=>{this.styleChanged("background-repeat",e.target.value)})),this.sizeComboBox=this.initComboBox(".bg-size-combo-box",(e=>{this.styleChanged("background-size",e.target.value)}))}redraw(e){if(super.redraw(e),As("design","properties")){this.element.style.display="";const t=an().mobileEditor?"mobile":"desktop";if(e.length>0){this.colorPicker.setDisabled(!1);const n=this.getCommonProperty(e,(e=>e.style[t]["background-color"]||""));this.colorPicker.setIndeterminate(null===n),null!=n&&this.colorPicker.setColor(n)}else this.colorPicker.setDisabled(!0);const n=e=>{e?this.bgClearBgImage.classList.remove("disabled"):this.bgClearBgImage.classList.add("disabled"),this.attachmentComboBox.disabled=!e,this.vPositionComboBox.disabled=!e,this.hPositionComboBox.disabled=!e,this.repeatComboBox.disabled=!e,this.sizeComboBox.disabled=!e},i=this.getCommonProperty(e,(e=>e.style[t]["background-image"]));n(null!=i&&"none"!==i&&""!==i);const o=this.getCommonProperty(e,(e=>e.style[t]["background-attachment"]));o?this.attachmentComboBox.value=o:this.attachmentComboBox.selectedIndex=0;const r=this.getCommonProperty(e,(e=>e.style[t]["background-position"]));if(r&&""!==r){const e=r.includes("left")?"left":r.includes("right")?"right":r.includes("center")?"center":"",t=r.includes("top")?"top":r.includes("bottom")?"bottom":r.includes("center")?"center":"";this.vPositionComboBox.value=t,this.hPositionComboBox.value=e}else this.vPositionComboBox.selectedIndex=0,this.hPositionComboBox.selectedIndex=0;const s=this.getCommonProperty(e,(e=>e.style[t]["background-repeat"]));s?this.repeatComboBox.value=s:this.repeatComboBox.selectedIndex=0;const a=this.getCommonProperty(e,(e=>e.style[t]["background-size"]));a?this.sizeComboBox.value=a:this.sizeComboBox.selectedIndex=0}else this.element.style.display="none"}onColorChanged(){"transparent"!==this.colorPicker.getColor()&&1===this.colorPicker.getOpacity()||!ci().includes(ai())?this.styleChanged("background-color",this.colorPicker.getColor()):this.redraw(ci())}async onSelectImageButton(){try{const e=await Vt.getInstance().openFile(Vt.IMAGE_EXTENSIONS);if(e){const t=Bn().find((e=>e.selected));Rn([{...t,style:qn(an().mobileEditor,t.style,{"background-image":ge.addUrlKeyword(e.absPath)})}])}}catch(e){me.notifyError(`Error: I could not load the image. \n${e.message||""}`)}}onClearImageButton(){this.styleChanged("background-image","")}}class yc extends gc{constructor(e){super(e),this.borderPlacementCheckBoxes=null,this.cornerPlacementCheckBoxes=null,this.colorPicker=new mc(this.element.querySelector(".color-edit-container"),(()=>this.onBorderColorChanged())),this.borderPlacementCheckBoxes=[".border-placement-container .top",".border-placement-container .right",".border-placement-container .bottom",".border-placement-container .left"].map((e=>this.initCheckBox(e,(e=>this.onBorderWidthChanged())))),this.cornerPlacementCheckBoxes=[".border-radius-container .top-left",".border-radius-container .top-right",".border-radius-container .bottom-right",".border-radius-container .bottom-left"].map((e=>this.initCheckBox(e,(()=>this.onBorderCornerChanged())))),this.borderWidthInput=this.initInput(".border-width-input",(e=>this.onBorderWidthChanged())),this.borderStyleComboBox=this.initComboBox(".border-type-combo-box",(e=>this.onBorderStyleChanged())),this.borderRadiusInput=this.initInput(".corner-radius-input",(e=>this.onBorderCornerChanged())),ln((()=>{this.redraw(ci())})),Wn((()=>{this.redraw(ci())}))}redraw(e){if(super.redraw(e),As("design","properties")){this.element.style.display="";const t=an().mobileEditor?"mobile":"desktop",n=this.getCommonProperty(e,(e=>{const n=e.style[t]["border-width"];return n&&""!==n?n:null}));n?(this.redrawBorderWidth(n),this.redrawBorderColor(e)):this.resetBorder();const i=this.getCommonProperty(e,(e=>e.style[t]["border-style"]));i?this.borderStyleComboBox.value=i:this.borderStyleComboBox.selectedIndex=0;const o=this.getCommonProperty(e,(e=>e.style[t]["border-radius"]));o?this.redrawBorderRadius(o):this.resetBorderRadius()}else this.element.style.display="none"}redrawBorderColor(e){const t=an().mobileEditor?"mobile":"desktop";if(e.length>0){this.colorPicker.setDisabled(!1);const n=this.getCommonProperty(e,(e=>e.style[t]["border-color"]||"rgba(0,0,0,1)"));this.colorPicker.setIndeterminate(null==n),null!=n&&this.colorPicker.setColor(n)}else this.colorPicker.setDisabled(!0)}redrawBorderRadius(e){const t=e.split(" ");let n=t[0];if((null!=t[1]&&"0"===n||"0px"===n)&&(n=t[1]),(null!=t[2]&&"0"===n||"0px"===n)&&(n=t[2]),(null!=t[3]&&"0"===n||"0px"===n)&&(n=t[3]),null!=n&&"0"!==n&&"0px"!==n){let e;this.borderRadiusInput.value=n.substr(0,n.indexOf("px"));const i=this.cornerPlacementCheckBoxes.length;for(e=0;e<i;e++){const n=this.cornerPlacementCheckBoxes[e];"0"!==t[e]&&"0px"!==t[e]?n.checked=!0:n.checked=!1}}else this.resetBorderRadius()}redrawBorderWidth(e){const t=e.split(" ");let n=t[0];if((null!=t[1]&&"0"===n||"0px"===n)&&(n=t[1]),(null!=t[2]&&"0"===n||"0px"===n)&&(n=t[2]),(null!=t[3]&&"0"===n||"0px"===n)&&(n=t[3]),"0"!==n&&"0px"!==n){this.borderWidthInput.value=n.substr(0,n.indexOf("px"));const e=this.borderPlacementCheckBoxes.length;for(let n=0;n<e;n++){const e=this.borderPlacementCheckBoxes[n];t.length>n&&"0"!==t[n]&&"0px"!==t[n]?e.checked=!0:e.checked=!1}}else this.resetBorder()}resetBorderRadius(){let e;this.borderRadiusInput.value="";const t=this.cornerPlacementCheckBoxes.length;for(e=0;e<t;e++)this.cornerPlacementCheckBoxes[e].checked=!0}resetBorder(){let e;this.borderWidthInput.value="";const t=this.borderPlacementCheckBoxes.length;for(e=0;e<t;e++)this.borderPlacementCheckBoxes[e].checked=!0;this.colorPicker.setColor(""),this.colorPicker.setDisabled(!0)}onBorderWidthChanged(){if(this.borderWidthInput.value&&""!==this.borderWidthInput.value&&"0"!==this.borderWidthInput.value){this.colorPicker.setDisabled(!1),null!=this.colorPicker.getColor()&&""!==this.colorPicker.getColor()||this.colorPicker.setColor("rgba(0,0,0,1)");let e,t="";const n=this.borderPlacementCheckBoxes.length;for(e=0;e<n;e++)this.borderPlacementCheckBoxes[e].checked?t+=this.borderWidthInput.value+"px ":t+="0 ";this.colorPicker.setIndeterminate(!1);const i=this.borderStyleComboBox.value;Rn(ci().map((e=>({...e,style:qn(an().mobileEditor,e.style,{"border-width":t,"border-style":i})}))))}else Rn(ci().map((e=>({...e,style:qn(an().mobileEditor,e.style,{"border-width":"","border-style":""})})))),this.colorPicker.setDisabled(!0)}onBorderStyleChanged(){this.styleChanged("border-style",this.borderStyleComboBox.value)}onBorderColorChanged(){this.styleChanged("border-color",this.colorPicker.getColor())}onBorderCornerChanged(){if(null!=this.borderRadiusInput.value&&""!==this.borderRadiusInput.value){let e,t="";const n=this.cornerPlacementCheckBoxes.length;for(e=0;e<n;e++)this.cornerPlacementCheckBoxes[e].checked?t+=this.borderRadiusInput.value+"px ":t+="0 ";this.styleChanged("border-radius",t)}else this.styleChanged("border-radius",null)}}const vc=new WeakMap,Ec=e=>"function"==typeof e&&vc.has(e),Sc="undefined"!=typeof window&&null!=window.customElements&&void 0!==window.customElements.polyfillWrapFlushCallback,wc=(e,t,n=null)=>{for(;t!==n;){const n=t.nextSibling;e.removeChild(t),t=n}},xc={},Cc={},Tc=`{{lit-${String(Math.random()).slice(2)}}}`,kc=`\x3c!--${Tc}--\x3e`,Ic=new RegExp(`${Tc}|${kc}`),Ac="$lit$";class _c{constructor(e,t){this.parts=[],this.element=t;const n=[],i=[],o=document.createTreeWalker(t.content,133,null,!1);let r=0,s=-1,a=0;const{strings:l,values:{length:c}}=e;for(;a<c;){const e=o.nextNode();if(null!==e){if(s++,1===e.nodeType){if(e.hasAttributes()){const t=e.attributes,{length:n}=t;let i=0;for(let e=0;e<n;e++)Oc(t[e].name,Ac)&&i++;for(;i-- >0;){const t=l[a],n=Dc.exec(t)[2],i=n.toLowerCase()+Ac,o=e.getAttribute(i);e.removeAttribute(i);const r=o.split(Ic);this.parts.push({type:"attribute",index:s,name:n,strings:r}),a+=r.length-1}}"TEMPLATE"===e.tagName&&(i.push(e),o.currentNode=e.content)}else if(3===e.nodeType){const t=e.data;if(t.indexOf(Tc)>=0){const i=e.parentNode,o=t.split(Ic),r=o.length-1;for(let t=0;t<r;t++){let n,r=o[t];if(""===r)n=Nc();else{const e=Dc.exec(r);null!==e&&Oc(e[2],Ac)&&(r=r.slice(0,e.index)+e[1]+e[2].slice(0,-Ac.length)+e[3]),n=document.createTextNode(r)}i.insertBefore(n,e),this.parts.push({type:"node",index:++s})}""===o[r]?(i.insertBefore(Nc(),e),n.push(e)):e.data=o[r],a+=r}}else if(8===e.nodeType)if(e.data===Tc){const t=e.parentNode;null!==e.previousSibling&&s!==r||(s++,t.insertBefore(Nc(),e)),r=s,this.parts.push({type:"node",index:s}),null===e.nextSibling?e.data="":(n.push(e),s--),a++}else{let t=-1;for(;-1!==(t=e.data.indexOf(Tc,t+1));)this.parts.push({type:"node",index:-1}),a++}}else o.currentNode=i.pop()}for(const e of n)e.parentNode.removeChild(e)}}const Oc=(e,t)=>{const n=e.length-t.length;return n>=0&&e.slice(n)===t},Lc=e=>-1!==e.index,Nc=()=>document.createComment(""),Dc=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;class Pc{constructor(e,t,n){this.__parts=[],this.template=e,this.processor=t,this.options=n}update(e){let t=0;for(const n of this.__parts)void 0!==n&&n.setValue(e[t]),t++;for(const e of this.__parts)void 0!==e&&e.commit()}_clone(){const e=Sc?this.template.element.content.cloneNode(!0):document.importNode(this.template.element.content,!0),t=[],n=this.template.parts,i=document.createTreeWalker(e,133,null,!1);let o,r=0,s=0,a=i.nextNode();for(;r<n.length;)if(o=n[r],Lc(o)){for(;s<o.index;)s++,"TEMPLATE"===a.nodeName&&(t.push(a),i.currentNode=a.content),null===(a=i.nextNode())&&(i.currentNode=t.pop(),a=i.nextNode());if("node"===o.type){const e=this.processor.handleTextExpression(this.options);e.insertAfterNode(a.previousSibling),this.__parts.push(e)}else this.__parts.push(...this.processor.handleAttributeExpressions(a,o.name,o.strings,this.options));r++}else this.__parts.push(void 0),r++;return Sc&&(document.adoptNode(e),customElements.upgrade(e)),e}}const Mc=window.trustedTypes&&trustedTypes.createPolicy("lit-html",{createHTML:e=>e}),Rc=` ${Tc} `;class Bc{constructor(e,t,n,i){this.strings=e,this.values=t,this.type=n,this.processor=i}getHTML(){const e=this.strings.length-1;let t="",n=!1;for(let i=0;i<e;i++){const e=this.strings[i],o=e.lastIndexOf("\x3c!--");n=(o>-1||n)&&-1===e.indexOf("--\x3e",o+1);const r=Dc.exec(e);t+=null===r?e+(n?Rc:kc):e.substr(0,r.index)+r[1]+r[2]+Ac+r[3]+Tc}return t+=this.strings[e],t}getTemplateElement(){const e=document.createElement("template");let t=this.getHTML();return void 0!==Mc&&(t=Mc.createHTML(t)),e.innerHTML=t,e}}const Wc=e=>null===e||!("object"==typeof e||"function"==typeof e),Hc=e=>Array.isArray(e)||!(!e||!e[Symbol.iterator]);class jc{constructor(e,t,n){this.dirty=!0,this.element=e,this.name=t,this.strings=n,this.parts=[];for(let e=0;e<n.length-1;e++)this.parts[e]=this._createPart()}_createPart(){return new zc(this)}_getValue(){const e=this.strings,t=e.length-1,n=this.parts;if(1===t&&""===e[0]&&""===e[1]){const e=n[0].value;if("symbol"==typeof e)return String(e);if("string"==typeof e||!Hc(e))return e}let i="";for(let o=0;o<t;o++){i+=e[o];const t=n[o];if(void 0!==t){const e=t.value;if(Wc(e)||!Hc(e))i+="string"==typeof e?e:String(e);else for(const t of e)i+="string"==typeof t?t:String(t)}}return i+=e[t],i}commit(){this.dirty&&(this.dirty=!1,this.element.setAttribute(this.name,this._getValue()))}}class zc{constructor(e){this.value=void 0,this.committer=e}setValue(e){e===xc||Wc(e)&&e===this.value||(this.value=e,Ec(e)||(this.committer.dirty=!0))}commit(){for(;Ec(this.value);){const e=this.value;this.value=xc,e(this)}this.value!==xc&&this.committer.commit()}}class qc{constructor(e){this.value=void 0,this.__pendingValue=void 0,this.options=e}appendInto(e){this.startNode=e.appendChild(Nc()),this.endNode=e.appendChild(Nc())}insertAfterNode(e){this.startNode=e,this.endNode=e.nextSibling}appendIntoPart(e){e.__insert(this.startNode=Nc()),e.__insert(this.endNode=Nc())}insertAfterPart(e){e.__insert(this.startNode=Nc()),this.endNode=e.endNode,e.endNode=this.startNode}setValue(e){this.__pendingValue=e}commit(){if(null===this.startNode.parentNode)return;for(;Ec(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=xc,e(this)}const e=this.__pendingValue;e!==xc&&(Wc(e)?e!==this.value&&this.__commitText(e):e instanceof Bc?this.__commitTemplateResult(e):e instanceof Node?this.__commitNode(e):Hc(e)?this.__commitIterable(e):e===Cc?(this.value=Cc,this.clear()):this.__commitText(e))}__insert(e){this.endNode.parentNode.insertBefore(e,this.endNode)}__commitNode(e){this.value!==e&&(this.clear(),this.__insert(e),this.value=e)}__commitText(e){const t=this.startNode.nextSibling,n="string"==typeof(e=null==e?"":e)?e:String(e);t===this.endNode.previousSibling&&3===t.nodeType?t.data=n:this.__commitNode(document.createTextNode(n)),this.value=e}__commitTemplateResult(e){const t=this.options.templateFactory(e);if(this.value instanceof Pc&&this.value.template===t)this.value.update(e.values);else{const n=new Pc(t,e.processor,this.options),i=n._clone();n.update(e.values),this.__commitNode(i),this.value=n}}__commitIterable(e){Array.isArray(this.value)||(this.value=[],this.clear());const t=this.value;let n,i=0;for(const o of e)n=t[i],void 0===n&&(n=new qc(this.options),t.push(n),0===i?n.appendIntoPart(this):n.insertAfterPart(t[i-1])),n.setValue(o),n.commit(),i++;i<t.length&&(t.length=i,this.clear(n&&n.endNode))}clear(e=this.startNode){wc(this.startNode.parentNode,e.nextSibling,this.endNode)}}class Uc{constructor(e,t,n){if(this.value=void 0,this.__pendingValue=void 0,2!==n.length||""!==n[0]||""!==n[1])throw new Error("Boolean attributes can only contain a single expression");this.element=e,this.name=t,this.strings=n}setValue(e){this.__pendingValue=e}commit(){for(;Ec(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=xc,e(this)}if(this.__pendingValue===xc)return;const e=!!this.__pendingValue;this.value!==e&&(e?this.element.setAttribute(this.name,""):this.element.removeAttribute(this.name),this.value=e),this.__pendingValue=xc}}class $c extends jc{constructor(e,t,n){super(e,t,n),this.single=2===n.length&&""===n[0]&&""===n[1]}_createPart(){return new Fc(this)}_getValue(){return this.single?this.parts[0].value:super._getValue()}commit(){this.dirty&&(this.dirty=!1,this.element[this.name]=this._getValue())}}class Fc extends zc{}let Gc=!1;(()=>{try{const e={get capture(){return Gc=!0,!1}};window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch(e){}})();class Vc{constructor(e,t,n){this.value=void 0,this.__pendingValue=void 0,this.element=e,this.eventName=t,this.eventContext=n,this.__boundHandleEvent=e=>this.handleEvent(e)}setValue(e){this.__pendingValue=e}commit(){for(;Ec(this.__pendingValue);){const e=this.__pendingValue;this.__pendingValue=xc,e(this)}if(this.__pendingValue===xc)return;const e=this.__pendingValue,t=this.value,n=null==e||null!=t&&(e.capture!==t.capture||e.once!==t.once||e.passive!==t.passive),i=null!=e&&(null==t||n);n&&this.element.removeEventListener(this.eventName,this.__boundHandleEvent,this.__options),i&&(this.__options=Yc(e),this.element.addEventListener(this.eventName,this.__boundHandleEvent,this.__options)),this.value=e,this.__pendingValue=xc}handleEvent(e){"function"==typeof this.value?this.value.call(this.eventContext||this.element,e):this.value.handleEvent(e)}}const Yc=e=>e&&(Gc?{capture:e.capture,passive:e.passive,once:e.once}:e.capture),Xc=new class{handleAttributeExpressions(e,t,n,i){const o=t[0];return"."===o?new $c(e,t.slice(1),n).parts:"@"===o?[new Vc(e,t.slice(1),i.eventContext)]:"?"===o?[new Uc(e,t.slice(1),n)]:new jc(e,t,n).parts}handleTextExpression(e){return new qc(e)}};function Kc(e){let t=Zc.get(e.type);void 0===t&&(t={stringsArray:new WeakMap,keyString:new Map},Zc.set(e.type,t));let n=t.stringsArray.get(e.strings);if(void 0!==n)return n;const i=e.strings.join(Tc);return n=t.keyString.get(i),void 0===n&&(n=new _c(e,e.getTemplateElement()),t.keyString.set(i,n)),t.stringsArray.set(e.strings,n),n}const Zc=new Map,Jc=new WeakMap,Qc=(e,t,n)=>{let i=Jc.get(t);void 0===i&&(wc(t,t.firstChild),Jc.set(t,i=new qc(Object.assign({templateFactory:Kc},n))),i.appendInto(t)),i.setValue(e),i.commit()};"undefined"!=typeof window&&(window.litHtmlVersions||(window.litHtmlVersions=[])).push("1.4.1");const eu=(e,...t)=>new Bc(e,t,"html",Xc),tu=new WeakMap,nu=(iu=e=>t=>{if(!(t instanceof qc))throw new Error("unsafeHTML can only be used in text bindings");const n=tu.get(t);if(void 0!==n&&Wc(e)&&e===n.value&&t.value===n.fragment)return;const i=document.createElement("template");i.innerHTML=e;const o=document.importNode(i.content,!0);t.setValue(o),tu.set(t,{value:e,fragment:o})},(...e)=>{const t=iu(...e);return vc.set(t,!0),t});var iu;class ou extends gc{constructor(e){super(e),this.template=(e,t,n,i)=>eu`
    <div title=${n?"Currently disabled because you have selected a container":""}>
      <label for="select-component-type">Component type selector${n?nu("&nbsp;<small>- disabled for selection</small>"):""}</label>
      <select @change=${i} ?disabled=${n} id="select-component-type">
        <option value="" ?selected=${""===t}>-</option>
        ${nu(Object.entries(e).filter((([e,t])=>!t.isPrivate)).map((([e,n])=>`\n              <option value=${e}${t===e?" selected":""}>${n.name}</option>\n            `)).join(""))}
      </select>
    </div>
  `,ln((()=>{As("params","properties")?(this.redraw(ci()),this.element.style.display=""):this.element.style.display="none"})),Wn((()=>{this.redraw(ci())}))}redraw(e){var t;super.redraw(e);const n=Ii(jt.COMPONENT_TYPE),i=e.length?null===(t=e[0].data.component)||void 0===t?void 0:t.templateName:void 0,o=e.every((e=>{var t;return i===(null===(t=e.data.component)||void 0===t?void 0:t.templateName)})),r=e.some((e=>[wt.CONTAINER,wt.SECTION].includes(e.type)||si(e))),s=o&&i?i:"";Qc(this.template(n,s,r,(e=>this.applyComponent(e.target.value))),this.element)}applyComponent(e){const t=ai(),n=ci().filter((e=>e!==t));if(n.length)if(""===e)Rn(n.map((e=>({...e,innerHtml:e.data.component.data.preview||"",data:{...e.data,component:null}}))));else{Rn(n.map((t=>({...t,data:{...t.data,component:{...t.data.component,templateName:e,data:{preview:t.innerHtml}}}}))));const i=ci().filter((e=>e!==t));Di(),Ti(i)}}}class ru extends gc{constructor(e){super(e),this.opacityInput=this.initInput(".opacity-input",(e=>this.onInputChanged(e))),ln((()=>{this.redraw(ci())})),Wn((()=>{this.redraw(ci())}))}onInputChanged(e){const t=this.opacityInput.value&&""!==this.opacityInput.value?Math.max(0,Math.min(1,parseFloat(this.opacityInput.value)/100)):null;this.styleChanged("opacity",t?t.toString():null)}redraw(e){if(super.redraw(e),As("design","properties")){this.element.style.display="";const t=ai(),n=e.filter((e=>e!==t));if(n.length>0){this.opacityInput.removeAttribute("disabled");const e=this.getCommonProperty(n,(e=>e.style[an().mobileEditor?"mobile":"desktop"].opacity));this.opacityInput.value=void 0===e?"":""===e?"100":Math.round(100*parseFloat(e)).toString()}else this.opacityInput.value="",this.opacityInput.setAttribute("disabled","true")}else this.element.style.display="none"}}class su extends gc{constructor(e){super(e),this.viewOnDeviceEl=null,this.viewOnAllPagesCheckbox=null,this.pageCheckboxes=[],this.linkBtn=null,this.linkStateEl=null,Xi((()=>{this.setPages(Yi()),this.redraw(ci())})),ln((()=>{this.redraw(ci())})),Wn((()=>{this.redraw(ci())})),this.linkStateEl=this.element.querySelector(".link-state"),this.linkBtn=this.element.querySelector(".link-button"),this.linkBtn.onclick=()=>this.editLink(),this.viewOnDeviceEl=this.element.querySelector(".view-on-mobile"),this.viewOnDeviceEl.onclick=()=>{const e=this.element.querySelector(".view-on-mobile input:checked").value,t="mobile"!==e,n="desktop"!==e;Rn(ci().map((e=>li(e))).filter((e=>e.visibility.desktop!==t||e.visibility.mobile!==n)).map((e=>({...e,selected:an().mobileEditor?n:t,visibility:{desktop:t,mobile:n}}))))},this.viewOnAllPagesCheckbox=this.element.querySelector(".view-on-allpages-check"),this.viewOnAllPagesCheckbox.onchange=()=>{const e=this.viewOnAllPagesCheckbox.checked?[]:[sr().id];Rn(ci().map((e=>li(e))).map((t=>({...t,pageNames:e}))))}}getLinkElements(e){const t=ai();return e.filter((e=>e!==t&&e.type!==wt.SECTION&&!e.isSectionContent))}editLink(){const e=this.getLinkElements(ci()),t=e.map((e=>e.link)).reduce(((e,t)=>e&&t&&Object.keys(e).every((n=>e[n]===t[n]))&&Object.keys(t).every((n=>e[n]===t[n]))?e:null));this.openLinkEditor(t,(t=>{Rn(e.map((e=>({...e,link:t}))))}))}setPages(e){const t=this.element.querySelector(".pages-container");t.innerHTML=Kr(su.selectorTemplate,e),this.pageCheckboxes&&this.pageCheckboxes.forEach((e=>{null!=e.checkbox.parentElement&&e.checkbox.parentElement.removeChild(e.checkbox),e.checkbox.onchange=null}));const n=Array.from(t.querySelectorAll(".page-container"));this.pageCheckboxes=n.map(((t,n)=>{const i=t.querySelector(".page-check"),o=e[n++];return i.onchange=e=>{this.checkPage(o,i),e.preventDefault()},{checkbox:i,page:o}}))}checkPage(e,t){t.checked?Lo(ci(),e):No(ci(),e),this.updateSelection()}updateSelection(){const{currentPageId:e}=an();Rn(ci().map((t=>({...t,selected:go(t,e)}))))}redraw(e){if(super.redraw(e),As("design","properties")){this.element.style.display="";const t=ai(),n=e.filter((e=>e!==t)).map((e=>li(e)));if(Array.from(this.viewOnDeviceEl.querySelectorAll(".view-on-mobile input")).forEach((e=>e.disabled=!fi().enableMobile)),n.length>0){const e=this.getCommonProperty(n,(e=>e.visibility.mobile?e.visibility.desktop?"both":"mobile":"desktop"));e?Array.from(this.viewOnDeviceEl.querySelectorAll(".view-on-mobile input")).forEach((t=>{t.checked=e===t.value,t.indeterminate=!1})):Array.from(this.viewOnDeviceEl.querySelectorAll(".view-on-mobile input")).forEach((e=>e.indeterminate=!0));let t=!0;this.pageCheckboxes.forEach((e=>{e.checkbox.disabled=!1;const i=Yi().find((t=>t.id===e.page.id)),o=this.getCommonProperty(n,(e=>e.pageNames.includes(i.id)));t=t&&!1===o,null===o?e.checkbox.indeterminate=!0:(e.checkbox.indeterminate=!1,e.checkbox.checked=o)})),this.viewOnAllPagesCheckbox.disabled=!1,this.viewOnAllPagesCheckbox.checked=!!t}else this.pageCheckboxes.forEach((e=>{e.checkbox.disabled=!0,e.checkbox.indeterminate=!0})),this.viewOnAllPagesCheckbox.disabled=!0,this.viewOnAllPagesCheckbox.checked=!0,Array.from(this.viewOnDeviceEl.querySelectorAll(".view-on-mobile input")).forEach((e=>e.disabled=!0))}else this.element.style.display="none";const t=this.getLinkElements(e);if(t.length>0){const e=this.getCommonProperty(t,(e=>e.link));this.linkStateEl.value=e?e.href:"",this.linkStateEl.disabled=!1,this.linkBtn.disabled=!1}else this.linkBtn.disabled=!0,this.linkStateEl.disabled=!0,this.linkStateEl.value=""}hasLink(e){return!!e.link||e.innerHtml.includes("<a")}openLinkEditor(e,t){ci().some((e=>e.innerHtml.includes("<a")))||ci().map((e=>ii(e))).some((e=>e.some((e=>this.hasLink(e)))))?me.alert("Link error",'It is impossible to add a link on this element, because the text inside the element has links. Please remove the links in the element and try again. <a target="_blank" href="https://github.com/silexlabs/Silex/wiki/Errors#link-error">More info here</a>',(()=>{})):Qi({data:e,cbk:e=>{t(e)}})}}su.selectorTemplate="<div class='page-container'>\n    <input class='page-check checkbox' type='checkbox' id='page-check-id-{{id}}' />\n    <label class='page-label xsmall-font' for='page-check-id-{{id}}' >{{displayName}}</label>\n  </div>\n\t";const au=".flex-wrap-select",lu=".justify-content-select",cu=".align-items-select",uu=".flex-direction-select",du=".display-select",hu=".position-select",pu=".padding-left-input",fu=".padding-bottom-input",mu=".padding-right-input",gu=".padding-top-input",bu=".margin-left-input",yu=".margin-bottom-input",vu=".margin-right-input",Eu=".margin-top-input",Su=".height-input",wu=".width-input",xu=".top-input",Cu=".left-input";function Tu(e,t){return null==e?t:parseInt(e).toString()}class ku extends gc{constructor(e){super(e),mi((()=>{this.redraw(ci())})),ln((()=>{this.redraw(ci())})),Wn((()=>{this.redraw(ci())})),this.createInput([{selector:Cu,styleName:"left",eventName:"input",unit:"px"},{selector:xu,styleName:"top",eventName:"input",unit:"px"},{selector:wu,styleName:"width",eventName:"input",unit:"px"},{selector:Su,styleName:"height",eventName:"input",unit:"px"},{selector:Eu,styleName:"margin-top",eventName:"input",unit:"px"},{selector:vu,styleName:"margin-right",eventName:"input",unit:"px"},{selector:yu,styleName:"margin-bottom",eventName:"input",unit:"px"},{selector:bu,styleName:"margin-left",eventName:"input",unit:"px"},{selector:gu,styleName:"padding-top",eventName:"input",unit:"px"},{selector:mu,styleName:"padding-right",eventName:"input",unit:"px"},{selector:fu,styleName:"padding-bottom",eventName:"input",unit:"px"},{selector:pu,styleName:"padding-left",eventName:"input",unit:"px"},{selector:hu,styleName:"position",eventName:"change",unit:""},{selector:du,styleName:"display",eventName:"change",unit:""},{selector:uu,styleName:"flex-direction",eventName:"change",unit:""},{selector:cu,styleName:"align-items",eventName:"change",unit:""},{selector:lu,styleName:"justify-content",eventName:"change",unit:""},{selector:au,styleName:"flex-wrap",eventName:"change",unit:""}]),this.tagNameInput=this.initComboBox("#tag-name-input",(e=>this.onTagNameChanged(e))),this.altInput=this.initInput("#alt-input",(e=>this.onAltChanged(e))),this.titleInput=this.initInput("#title-input",(e=>this.onTitleChanged(e)))}onTagNameChanged(e){const t=e.target;Rn(ci().map((e=>({...e,tagName:t.value}))))}onAltChanged(e){const t=e.target;Rn(ci().map((e=>({...e,alt:t.value}))))}onTitleChanged(e){e.preventDefault();const t=e.target;Rn(ci().map((e=>({...e,title:t.value}))))}redraw(e){if(super.redraw(e),As("design","properties")){this.element.querySelector(".position-editor").style.display="",this.element.querySelector(".seo-editor").style.display="";const t=ai(),n=an().mobileEditor,i=e.filter((e=>e!==t)),o=i.filter((e=>e.type!==wt.SECTION)),r=this.getCommonProperty(i,(e=>lo(e,"display",n))),s=this.getCommonProperty(i,(e=>lo(e,"position",n))),a=uo(o.map((e=>co(e,n)))),l=new Map([[Cu,()=>Math.round(a.left||0).toString()],[xu,()=>Math.round(a.top||0).toString()],[wu,()=>Math.round(a.width||0).toString()],[Su,()=>Math.round(a.height||0).toString()],[Eu,()=>Tu(this.getCommonProperty(i,(e=>lo(e,"margin-top",n))),"")],[vu,()=>Tu(this.getCommonProperty(i,(e=>lo(e,"margin-right",n))),"")],[yu,()=>Tu(this.getCommonProperty(i,(e=>lo(e,"margin-bottom",n))),"")],[bu,()=>Tu(this.getCommonProperty(i,(e=>lo(e,"margin-left",n))),"")],[gu,()=>Tu(this.getCommonProperty(i,(e=>lo(e,"padding-top",n))),"")],[mu,()=>Tu(this.getCommonProperty(i,(e=>lo(e,"padding-right",n))),"")],[fu,()=>Tu(this.getCommonProperty(i,(e=>lo(e,"padding-bottom",n))),"")],[pu,()=>Tu(this.getCommonProperty(i,(e=>lo(e,"padding-left",n))),"")],[hu,()=>s],[du,()=>r],[uu,()=>this.getCommonProperty(i,(e=>lo(e,"flex-direction",n)))],[cu,()=>this.getCommonProperty(i,(e=>lo(e,"align-items",n)))],[lu,()=>this.getCommonProperty(i,(e=>lo(e,"justify-content",n)))],[au,()=>this.getCommonProperty(i,(e=>lo(e,"flex-wrap",n)))]]),c=this.getCommonProperty(i,(e=>e.tagName));if(this.tagNameInput.value=c||"",o.length>0){const e=o.filter((e=>!e.isSectionContent));this.titleInput.disabled=!1,o.length?(this.onInputPxChanged(wu,l.get(wu)()),this.onInputPxChanged(Su,l.get(Su)())):(this.onInputPxChanged(wu,null),this.onInputPxChanged(Su,null)),"static"!==s&&e.length?(this.onInputPxChanged(xu,l.get(xu)()),this.onInputPxChanged(Cu,l.get(Cu)())):(this.onInputPxChanged(xu,null),this.onInputPxChanged(Cu,null));const t=this.getCommonProperty(o,(e=>e.type));if(t===wt.IMAGE){this.altInput.disabled=!1;const e=this.getCommonProperty(o,(e=>e.alt));this.altInput.value=e||""}else this.altInput.value="",this.altInput.disabled=!0;e.length?this.onInputPxChanged(hu,s||""):this.onInputPxChanged(hu,null),t===wt.CONTAINER&&o.length?this.onInputPxChanged(du,r||""):this.onInputPxChanged(du,null),o.length&&"flex"===r?(this.onInputPxChanged(uu,l.get(uu)()||""),this.onInputPxChanged(cu,l.get(cu)()||""),this.onInputPxChanged(lu,l.get(lu)()||""),this.onInputPxChanged(au,l.get(au)()||"")):(this.onInputPxChanged(uu,null),this.onInputPxChanged(cu,null),this.onInputPxChanged(lu,null),this.onInputPxChanged(au,null));const n=this.getCommonProperty(o,(e=>e.title));this.titleInput.value=n||"",this.onInputPxChanged(Eu,l.get(Eu)()),this.onInputPxChanged(bu,l.get(bu)()),this.onInputPxChanged(vu,l.get(vu)()),this.onInputPxChanged(yu,l.get(yu)()),this.onInputPxChanged(gu,l.get(gu)()),this.onInputPxChanged(pu,l.get(pu)()),this.onInputPxChanged(mu,l.get(mu)()),this.onInputPxChanged(fu,l.get(fu)())}else this.disableDimensions()}else this.element.querySelector(".position-editor").style.display="none",this.element.querySelector(".seo-editor").style.display="none"}disableDimensions(){this.onInputPxChanged(au,null),this.onInputPxChanged(lu,null),this.onInputPxChanged(cu,null),this.onInputPxChanged(uu,null),this.onInputPxChanged(du,null),this.onInputPxChanged(hu,null),this.onInputPxChanged(pu,null),this.onInputPxChanged(fu,null),this.onInputPxChanged(mu,null),this.onInputPxChanged(gu,null),this.onInputPxChanged(bu,null),this.onInputPxChanged(yu,null),this.onInputPxChanged(vu,null),this.onInputPxChanged(Eu,null),this.onInputPxChanged(Su,null),this.onInputPxChanged(wu,null),this.onInputPxChanged(xu,null),this.onInputPxChanged(Cu,null),this.altInput.disabled=!0,this.altInput.value="",this.titleInput.disabled=!0,this.titleInput.value=""}}function Iu(e,t,n,i=fi(),o=Tn.dispatch){const r=n?JSON.parse(JSON.stringify(n)):{className:"",displayName:"",templateName:"",styles:{desktop:{normal:{}}}};if(i.styles[t])throw new Error("This style already exists");gi(r).forEach((n=>{Au(t,n.pseudoClass,n.visibility,n.data,e,i,o)}))}function Au(e,t,n,i,o,r=fi(),s=Tn.dispatch){const a={...i,className:e,pseudoClass:t},l=r.styles[e]?{...r.styles[e]}:{className:e,templateName:"text",displayName:o,styles:{}};l.styles[n]||(l.styles[n]={}),l.styles[n][t]=a;const c={...r.styles,[e]:l};pi({...r,styles:c},s)}function _u(e,t=fi(),n=Bn(),i=Tn.dispatch){const o={...t,styles:{...t.styles}};delete o.styles[e],Rn(n.filter((t=>t.classList.includes(e))).map((t=>({...t,classList:t.classList.filter((t=>t!==e))}))),i),pi(o,i)}function Ou(e,t,n){Bi({data:((fi().styles[e]||{styles:{}}).styles[n]||{})[t]||{templateName:"text",className:e,pseudoClass:t},dataSources:{components:[{displayName:"",name:"",templateName:""}].concat(fi().fonts.map((e=>({displayName:e.family,name:e.family,templateName:""}))))},templateName:"text",events:{onChange:(i,o)=>Au(e,t,n,i),onBrowse:(e,t,n)=>yo(e,n)}})}class Lu extends gc{constructor(e){super(e),this.styleComboPrevValue="",this.styleCombo=this.element.querySelector(".class-name-style-combo-box"),this.pseudoClassCombo=this.element.querySelector(".pseudoclass-style-combo-box"),this.mobileOnlyCheckbox=this.element.querySelector(".visibility-style-checkbox"),this.pseudoClassCombo.onchange=e=>{Ou(this.styleCombo.value,this.getPseudoClass(),this.getVisibility());const t=fi().styles[this.styleCombo.value]||{};this.updateTagButtonBar(t)},this.mobileOnlyCheckbox.onchange=e=>{sn({...an(),mobileEditor:this.mobileOnlyCheckbox.checked})},this.styleCombo.onchange=e=>{this.applyStyle(this.styleCombo.value)},this.element.querySelector(".add-style").onclick=e=>{this.createStyle()},this.element.querySelector(".remove-style").onclick=e=>{this.deleteStyle(this.styleCombo.value)},this.element.querySelector(".unapply-style").onclick=e=>{Rn(ci().map((e=>({...e,classList:e.classList.filter((e=>e!==this.styleCombo.value))}))))},this.selectionCountTotal=this.element.querySelector(".total"),this.selectionCountTotal.onclick=e=>{Rn(Bn().filter((e=>e.selected!==!!e.classList.find((e=>e===this.styleCombo.value)))).map((e=>({...e,selected:!e.selected}))))},this.selectionCountPage=this.element.querySelector(".on-page"),this.selectionCountPage.onclick=e=>{const t=sr();Rn(Bn().filter((e=>e.selected!==!!e.classList.find((e=>e===this.styleCombo.value))&&(0===e.pageNames.length||!!e.pageNames.find((e=>e===t.id))))).map((e=>({...e,selected:!e.selected}))))},this.element.querySelector(".duplicate-style").onclick=()=>this.duplicateStyle(this.styleCombo.value),this.element.querySelector(".edit-style").onclick=e=>this.renameStyle(this.styleCombo.value),ln((()=>{this.redraw(ci())})),Wn((()=>{this.redraw(ci())}))}duplicateStyle(e){this.createStyle(fi().styles[e])}renameStyle(e){if(e===jt.BODY_STYLE_CSS_CLASS)me.alert("Rename a style",`The style '${jt.BODY_STYLE_NAME}' is a special style, you can not rename it.`,(()=>{}));else{const t=fi().styles[e];this.createStyle(t,(t=>this.doRenameStyle(e,t)))}}doRenameStyle(e,t,n=fi().styles,i=Bn(),o=Tn.dispatch){const r=this.getClassNameFromClassName(t);this.doApplyStyle(this.getElementsWithStyle(e,null,i),r,n,o),_u(e)}getElementsWithStyle(e,t,n=Bn()){return t?n.filter((n=>n.classList.includes(e)&&0===n.pageNames.length||n.pageNames.includes(t))):n.filter((t=>t.classList.includes(e)))}getVisibility(){return jt.STYLE_VISIBILITY[an().mobileEditor?1:0]}applyStyle(e,t=fi().styles,n=Bn(),i=Tn.dispatch){const o=ai(n),r=ci(n).filter((e=>e!==o));e===jt.BODY_STYLE_CSS_CLASS?me.alert("Apply a style",`\n        The style '${jt.BODY_STYLE_NAME}' is a special style, it is already applyed to all elements.\n      `,(()=>{})):r.length?this.doApplyStyle(r,e,t,i):me.alert("Apply a style","Error: you need to select at least 1 element for this action.",(()=>{}))}doApplyStyle(e,t,n=fi().styles,i=Tn.dispatch){const o=Object.keys(n).filter((e=>e!==jt.BODY_STYLE_CSS_CLASS));Rn(e.map((e=>e.classList.includes(t)?e:{...e,classList:e.classList.filter((e=>!o.includes(e))).concat([t])})),i)}getStyles(e){const t=fi().styles;return e.map((e=>e.classList)).reduce(((e,t)=>e.filter((e=>t.indexOf(e)>-1)))).filter((e=>Object.keys(t).find((t=>t===e))))}updateStyleList(e){var t;this.styleCombo.innerHTML="";const n=fi().styles;if((e===jt.EMPTY_STYLE_CLASS_NAME?[{className:jt.EMPTY_STYLE_CLASS_NAME,displayName:jt.EMPTY_STYLE_DISPLAY_NAME}]:[]).concat(Object.keys(n).map((e=>n[e]))).map((e=>{const t=document.createElement("option");return t.value=e.className,t.innerHTML=e.displayName,t})).forEach((e=>this.styleCombo.appendChild(e))),null!=e){const n=e;this.styleCombo.value=n,this.element.classList.remove("no-style");const i=fi().styles[n]||{};this.populatePseudoClassCombo(i),this.pseudoClassCombo.disabled=!1,this.styleComboPrevValue!==n&&(this.pseudoClassCombo.selectedIndex=0),this.styleComboPrevValue=n,Ou(n,this.getPseudoClass(),this.getVisibility());const o=this.getElementsWithStyle(n,null===(t=sr())||void 0===t?void 0:t.id).length,r=0===o?0:this.getElementsWithStyle(n,null).length;this.selectionCountPage.innerHTML=`${r} on this page (<span>select</span>),&nbsp;`,this.selectionCountTotal.innerHTML=`${o} total (<span>select</span>)`,this.updateTagButtonBar(i)}else this.element.classList.add("no-style")}updateTagButtonBar(e){const t=((e.styles||{})[this.getVisibility()]||{})[this.getPseudoClass()]||{};Array.from(this.element.querySelectorAll("[data-prodotype-name]")).forEach((e=>{const n=e.getAttribute("data-prodotype-name"),i=e.getAttribute("data-initial-value")+(t[n]?" *":"");e.innerHTML!==i&&(e.innerHTML=i)}))}populatePseudoClassCombo(e){const t=(e.styles||{})[this.getVisibility()],n=this.pseudoClassCombo.selectedIndex;this.pseudoClassCombo.innerHTML="",Ii(jt.STYLE_TYPE).text.props.find((e=>"pseudoClass"===e.name)).type.map((e=>{const n=document.createElement("option");return n.value=e,n.innerHTML=e+(t&&t[e]?" *":""),n})).forEach((e=>this.pseudoClassCombo.appendChild(e))),this.pseudoClassCombo.selectedIndex=n}getPseudoClass(){return""===this.pseudoClassCombo.value?"normal":this.pseudoClassCombo.value}createStyle(e,t){const n=ai();Bn().filter((e=>e!==n)).length<=0?me.alert("Create a style","Error: you need to select at least 1 element for this action.",(()=>{})):me.prompt("Create a style","Enter a name for your style!",e?e.displayName:"","Your Style",((n,i)=>{n&&i&&""!==i&&(this.doCreateStyle({name:i,opt_data:e}),t&&t(i))}))}getClassNameFromClassName(e){return"style-"+e.replace(/ /g,"-").toLowerCase()}doCreateStyle({name:e,opt_data:t},n=fi().styles,i=Bn(),o=Tn.dispatch){const r=this.getClassNameFromClassName(e);Iu(e,r,t),this.applyStyle(r,n,i,o),this.updateStyleList(r)}deleteStyle(e,t){!1===t?this.doDeleteStyle(e):e===jt.BODY_STYLE_CSS_CLASS?me.alert("Delete a style",`\n          The style '${jt.BODY_STYLE_NAME}' is a special style, you can not delete it.\n        `,(()=>{})):me.confirm("Delete a style",`\n          I am about to delete the style <b>${e}</b>!<br><br>Are you sure?\n        `,(t=>{t&&this.doDeleteStyle(e)}))}redraw(e){if(super.redraw(e),As("style","properties"))if(this.element.style.display="",this.mobileOnlyCheckbox.checked=an().mobileEditor,e.length>0){const t=(()=>{const t=this.getStyles(e);return t.length>=1?t[0]:jt.BODY_STYLE_CSS_CLASS})();this.updateStyleList(t),e.length>0&&0===e.filter((e=>e.type!==wt.TEXT)).length?this.element.classList.remove("style-editor-notext"):this.element.classList.add("style-editor-notext")}else this.updateStyleList(jt.BODY_STYLE_CSS_CLASS),this.element.classList.remove("style-editor-notext");else this.element.style.display="none"}doDeleteStyle(e){const t=this.styleCombo.querySelector('option[value="'+e+'"]');_u(t.value),this.styleCombo.removeChild(t)}}var Nu=n(1907),Du=n.n(Nu);class Pu extends gc{constructor(e){super(e),this.iAmChanging=!1;const t=this.initInput(".style-css-classes-input",(()=>this.onInputChanged()),"blur");Du()(t),this.cssClassesTagsInput=t.nextElementSibling,this.cssClassesTagsInput.classList.add("silex-input"),this.initComboBox(".style-css-classes-input",(()=>this.onInputChanged())),this.htmlAttrInput=this.element.querySelector(".style-css-attr-input"),this.initInput(".style-css-attr-input",(()=>this.onInputChanged())),ln((()=>{this.redraw(ci())})),Wn((()=>{this.redraw(ci())}))}getClassesTags(){return this.cssClassesTagsInput.getValue().split(",").join(" ")}setClassesTags(e){this.iAmChanging||this.getClassesTags()!==e&&(this.iAmChanging=!0,this.cssClassesTagsInput.setValue(e.split(" ").filter((e=>!jt.SILEX_CLASS_NAMES.includes(e))).join(",")),this.iAmChanging=!1)}onInputChanged(){if(this.iAmChanging)return;this.iAmChanging=!0;const e=this.stringToAttr(this.htmlAttrInput.value);if(this.cssClassesTagsInput.classList.contains("off"))this.setClassesTags("");else{const e=ci()[0].classList.filter((e=>jt.SILEX_CLASS_NAMES.includes(e)));Io(this.getClassesTags()+" "+e)}ko(e),this.iAmChanging=!1}redraw(e){if(!this.iAmChanging)if(super.redraw(e),As("design","properties")){this.element.style.display="",1===e.length?(this.cssClassesTagsInput.classList.remove("off"),this.setClassesTags(e[0].classList.join(" "))):(this.cssClassesTagsInput.classList.add("off"),this.setClassesTags(""));const t=this.getCommonProperty(e,(e=>this.attrToString(e.attr)));null!=t&&t===this.attrToString(this.stringToAttr(this.htmlAttrInput.value))||(this.htmlAttrInput.value=t||"")}else this.element.style.display="none"}attrToString(e){return null==e?"":Object.entries(e).sort(((e,t)=>e[0].localeCompare(t[0]))).map((([e,t])=>e+(null!=t?`="${t}"`:""))).join(" ")}stringToAttr(e){if(null==e)return{};const t=e.match(/\b([a-z,A-Z,\-,:]+)(="(.*?)")?/g);if(null==t)return{};const n={};return t.forEach((e=>{const[t,i]=e.split("=");if(null==i)n[t]=null;else{const e=i.replace(/^"(.+)"$/,"$1");n[t]=e}})),n}}const Mu={[wt.CONTAINER]:"container",[wt.SECTION]:"fa-inverse fa-fw fa-list-alt",[wt.IMAGE]:"image",[wt.TEXT]:"text",[wt.HTML]:"fa-inverse fa-code",[jt.COMPONENT_TYPE]:"fa-inverse fa-square",body:"body"};class Ru extends gc{constructor(e){super(e),this.template=(e,t,n,i)=>t?eu`
    <details style="padding: 5px 15px; ${sr()&&go(t,sr().id)?"":"opacity: .5;"}" key=${t.id} open>
      <summary class="${t.selected?"selected":""}${t.children.length?"":" hide-details-marker"}" style="display: flex;">
        <span class="small-icon icon ${Mu["body"===t.tagName.toLowerCase()?"body":t.data.component?jt.COMPONENT_TYPE:t.type]}"></span>
        <span @click=${e=>(i(t),e.preventDefault(),e.stopPropagation(),!1)} style="
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
          ">
          ${t.tagName.toLowerCase().replace(/^\w/,(e=>e.toUpperCase()))}${t.classList.length?".":""}${t.classList.join(".")}
        </span>
      </summary>
      ${ni(t,n).map((t=>this.template(e,t,n,i)))}
    </details>
  `:"",ln((()=>{As("tree-editor","properties")?(this.redraw(ci()),e.style.display=""):e.style.display="none"})),Wn((()=>{this.redraw(ci())}))}redraw(e){super.redraw(e);const t=Ii(jt.COMPONENT_TYPE),n=Bn();Qc(this.template(t,ai(n),n,(e=>So([e]))),this.element)}}const Bu=Ft().propertyTool;let Wu=!1;function Hu(){const e=Bu.querySelector(".prodotype-component-editor"),t=ci().filter((e=>Ai(e))),[n]=_s("properties");"params"===(null==n?void 0:n.id)&&1===t.length?(function(e){if(e&&e.data.component){const t=e.data.component;Ri({data:t.data,dataSources:fi().dataSources,templateName:t.templateName,events:{onChange:(t,n)=>{Rn([{...e,data:{...e.data,component:{...e.data.component,data:{...e.data.component.data,...t}}},innerHtml:n}])},onBrowse:(e,t,n)=>yo(e,n),onEditLink:(e,t,n)=>bo(e,t,n)}})}else Mi()}(t[0]),e.style.display=""):(e.style.display="none",Mi())}function ju(e){e.parentElement.classList.toggle("expanded");const t=e.querySelector(".fa-inverse");t&&(t.classList.toggle("fa-caret-right"),t.classList.toggle("fa-caret-down"))}function zu(e){qs(),new ta(Ft().contextMenu),new Ea(Ft().breadCrumbs),new fc(Ft().pageTool),setTimeout((()=>{Wu||function(){new bc(Bu.querySelector(".background-editor")),new yc(Bu.querySelector(".border-editor")),new ou(Bu.querySelector(".component-generic-editor")),new ku(Bu),new su(Bu.querySelector(".page-editor")),new ru(Bu.querySelector(".general-editor")),new Pu(Bu.querySelector(".style-editor"));const e=Bu.querySelector(".prodotype-style-editor"),t=(new Lu(e),Bu.querySelectorAll(".expandable legend"));for(let e=0;e<t.length;e++){const n=t[e],i="silex-expand-property-"+e;"true"===window.localStorage.getItem(i)&&ju(n),n.onclick=e=>{ju(n),window.localStorage.setItem(i,n.parentElement.classList.contains("expanded").toString())}}Os(Bu.querySelector(".tabs .simplebar-content"),"properties"),Wn((()=>Hu())),ln((()=>Hu())),setTimeout((()=>{const e=an();sn({...e,dialogs:e.dialogs.concat({id:"tree-editor",type:"properties",visible:!1,data:{className:"fa fa-lg fa-list"}})});const t=document.createElement("section");t.classList.add("editor-container","tree-editor-container"),Bu.querySelector(".main-container").appendChild(t),new Ru(t)}),100)}(),Wu=!0}),0),wi();const t=Ft(),n=va();n.addLeft(t.contextMenu),n.addLeft(t.breadCrumbs),n.addLeft(Xo().parentElement),n.addRight(t.propertyTool)}let qu=!1;function Uu(){sn({...an(),loading:he.NONE}),pn()}function $u(){console.warn("calling window.silex.init() is deprecated")}function Fu(){if(qu)throw new Error("Silex has already been instanciated");qu=!0,de.debug&&console.warn("Silex starting in debug mode.");const e=function(e){return e?ue(e):"undefined"==typeof document&&"undefined"!=typeof navigator&&"ReactNative"===navigator.product?new se:"undefined"!=typeof navigator?ue(navigator.userAgent):"undefined"!=typeof process&&process.version?new ie(process.version.slice(1)):null}(),t=e&&"firefox"===e.name,n=e&&"chrome"===e.name;t||n||me.alert("Warning",`Your browser is not supported yet.\n      <br><br>\n      Considere using <a href="https://www.mozilla.org/firefox/" target="_blank">Firefox</a>\n      or <a href="https://www.google.com/chrome/" target="_blank">chrome</a>.\n      <br><br>\n      <small>Note: I believe you use ${e?e.name:"Unknown"}</small>\n      `,(()=>{})),zu(Ft().workspace),Wn(on({onAdd:ps(Qr(Vo())),onDelete:ps(es(Vo())),onUpdate:ps(ts(Vo()))})),Xi(on({onAdd:ps(ns),onDelete:ps(is),onUpdate:ps(ss)})),mi(ps(cs)),ln(ps(us)),hs(),de.debug||(window.onbeforeunload=()=>fn()?"You have unsaved modifications, are you sure you want to leave me?":null,function(){const e=document.documentElement.clientWidth,t=document.documentElement.clientHeight;(t<630||e<950)&&me.alert("Warning",`Your window is very small (${e}x${t}) and Silex may not display correctly.<br><br>Considere maximizing the window or use a bigger screen to use Silex at its best. A window size of 950x630 is considered to be a acceptable.`,(()=>{}))}()),de.singleSiteMode?(pn(),async function(){new Promise(((e,t)=>{document.body.classList.add("single-site-mode");const n=ge.getUrlParams(),{path:i,service:o}=n;i&&o?gs({path:i,service:o,absPath:`/ce/${o}/get${i}`,name:i.split("/").pop(),mime:"",isDir:!1},(()=>{e()})):(me.alert("Open a file",`\n          Could not open the file ${n.path}.<br /><br />\n          You need to specify which website I am supposed to open with the variables "path" and "service" in the URL. Please <a href="https://github.com/silexlabs/Silex/wiki/Single-site-mode" target="_blank">check this document</a> or <a href="https://github.com/silexlabs/Silex/issues" target="_blank">get in touch in Silex forums"</a>\n      `,(()=>{})),t())}))}()):bs((()=>Uu()),(()=>Uu()))}}},t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={id:i,loaded:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}return n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(4125)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,